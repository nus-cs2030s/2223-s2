{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"CS2030s","text":""},{"location":"index.html#ay-202223-semester-2","title":"AY 2022/23 Semester 2","text":""},{"location":"00-overview.html","title":"Unit 0. Overview","text":""},{"location":"00-overview.html#learning-outcomes","title":"Learning Outcomes","text":"<p>This unit provides an overview of the aims of CS2030/S and how the key concepts covered in CS2030/S are related to each other.</p>"},{"location":"00-overview.html#what-is-this-module-about","title":"What is This Module About?","text":"<p>CS2030/S is designed for students who have gone through a typical basic programming module and have learned about problem-solving with simple programming constructs such as loops, conditions, and functions.  In a typical introductory programming module, such as CS1010 and its variants at NUS, students tend to write small programs (in the order of tens or hundreds of lines of code) to solve a programming homework problem, work alone on their code, and move on to solve the next problem once the homework is done.</p> <p>The first aim of CS2030/S is to change the students' mindset and to make them learn to write software that will continue to evolve as software requirements change and to write software that will be read and modified by other programmers (including their future selves).</p> <p>The second aim of CS2030/S is to level up the complexity of programs that the students write, from the order of hundreds of lines to thousands of lines.  CS2030/S bridges the students between writing toy programs to solve specific problems in CS1010 and writing larger real-world software in their later modules, such as CS2103 Software Engineering.</p> <p>A programming language is the medium in which programmers can express their intention and construct software, and thus is critical to supporting the aims above.  With the appropriate features and tools, one can tame the complexity of software, make the code written friendlier to other programmers, and easier to evolve.  The third aim of CS2030/S is thus to expand the students' minds on different ways one can construct software and the principles behind some of the programming language constructs.  In particular, CS2030/S focuses on objects, types, and functions, as three key constructs for building programmer-friendly software.  It covers both object-oriented and functional paradigms as two different approaches to constructing software, with a strong emphasis on type safety.</p> <p>The final aim of CS2030/S is to introduce students to programming language concepts and to bridge them from introductory programming to advanced modules such as programming language design and implementation.  Part of CS2030/S introduces students to the design decisions behind some of the constraints and the workings behind the programming language compilation and execution, giving them a glimpse inside the programming system that so far has been mostly treated as a black box in introductory modules.</p>"},{"location":"00-overview.html#the-choice-of-java","title":"The Choice of Java","text":"<p>We decided to use one programming language throughout the module.  This decision means that we need to pick a language that is strongly typed with static typing and supports both object-oriented and functional programming.  Considering multiple factors, we decided to choose Java for CS2030/S, for its popularity, syntax familiarity, and smoother transitions to later modules in the NUS computing curriculum.</p> <p>While Java is not the most elegant programming language when expressing programs in a functional style, we hope that students can still learn the principles of functional programming and apply them in other programming languages.  This choice is a trade-off between having to switch to a different language in the middle of a module.  </p>"},{"location":"00-overview.html#what-this-module-is-not-about","title":"What This Module is not About","text":"<p>This is not a module on Java programming.  We will not comprehensively cover Java syntax and features, except those relevant to the concepts we teach.  In fact, we will avoid and even ban students from using certain Java features (such as <code>var</code>) for pedagogical purposes.</p> <p>This is not a module on software engineering either.  Software engineering is a broad discipline on its own and deserves another module.  Rather, this module is about the programming principles and constructs on top of which programmers can design better software.  To motivate the importance of these principles and constructs and see how they can be used, we will inevitably cover some of the software engineering design principles, such as Liskov Substitution Principle (the L in SOLID), Tell-Don't-Ask, Composition over Inheritance, etc.  But we will not comprehensively cover object-oriented design or software design in general (e.g., we will not cover S, O, I, and D in SOLID).</p> <p>Finally, CS2030/S is not a module that focuses on computational efficiency.  We have CS2040/S for that.  In CS2030/S, although reducing computational cost still plays a role, this is not the only cost that matters.  CS2030/S is also concerned with the human cost of debugging or maintaining software.  In striving for simpler software that is easier to maintain and extend, we may have to sacrifice computational efficiency.</p>"},{"location":"00-overview.html#taming-complexity-in-software-development","title":"Taming Complexity in Software Development","text":"<p>An underlying theme of CS2030/S is taming complexity in software development.  There are objective metrics with which one can measure the complexity of software, but here, we will loosely define complexity as anything that increases the likelihood of bugs in a program.</p> <p>Let's start by considering a simplified view of what a software program is.  One can view a software program as a collection of data variables and instructions on how to modify these variables.  A program is generally written to meet a given requirement: given one or more input variables, the program should perform the computation to produce the output variables, in a way that meets the requirement.  Often, the program stores information in the intermediate variables while performing the computation.</p> <p>As a student who has gone through an introductory programming module such as CS1010 and its variants, you should be familiar with the view above, and you should have some experience writing a program to solve a given computational problem.  The program you have written for these introductory modules are small \"toy\" programs mostly -- they consist of only a few hundred lines and tens of variables, at most.</p> <p>Software development in the real world, however, is far more complex than what you have experienced.  A software program rarely solves a well-defined computational problem only.  It often requires multiple components, such as user interface, data storage, and business rules, intricately interacting with each other to attain a set of functionalities.  </p> <p>As the requirement of the software becomes more complex, the number of variables that need to be kept track of increases; the logic of the computation the programmer needs to maintain the variables becomes more complicated.  Further, it is often that the variables are interdependent.  For instance, updating a variable might require updating another; how a variable should be updated might depend on another variable.  As the number of variables increases, so is the number of relationships between the variables that the programmer has to keep track of.  Failure to correctly maintain the variables and the relationship between them most likely will lead to bugs.</p> <p>Further, real-world software rarely remains static.  This property is again different from what you have experienced in your introductory programming module, where once the instructors release a programming assignment, they rarely go back and change the requirement.  In the real world, software evolves -- new features are added, business rules change, and better algorithms are deployed.  The code needs to be updated accordingly -- adding new variables and new computation; changing how variables are updated or are dependent on each other.  Updating the code of an already-complex software program to keep up with the requirement, if not managed properly, can lead to bugs.</p> <p>Real-world software is often the product of teamwork from multiple programmers, where the software development process is unlike what you have experienced in your introductory programming module, where you solve your homework individually.  When multiple programmers work together, the interdependency between the states needs to be communicated and handled properly and consistently across the programmers.  One programmer's modification to the code should not introduce bugs into another programmer's code.  </p> <p>Since software evolves, the notion of \"multiple programmers\" actually applies even to software developed by a single lone programmer across time.  Changing one's code should not introduce new bugs to other parts of the code that is written some time ago.  </p>"},{"location":"00-overview.html#strategies-to-tame-complexity","title":"Strategies to Tame Complexity","text":""},{"location":"00-overview.html#good-software-development-practices","title":"Good Software Development Practices","text":"<p>If you are taught properly in your introductory programming modules, you should already be familiar with good programming practices that help to tame the complexity and reduce the chances of bugs.  These practices include</p> <ul> <li> <p>Comment your code: Commenting your code provides in situ communication between you and other programmers on the team, as well as between you and your future self, on the non-obvious purpose of the states and the relationships between the states.  Such comments help to enhance the understanding of what the code is doing and to remind whoever is updating to code to modify appropriately when the requirement changes.</p> </li> <li> <p>Use a coding convention: Adhering to a coding convention helps improve code readability, reducing the cognitive barrier when one programmer reads another programmer's code and allowing the reader to understand the code more easily and thoroughly.</p> </li> </ul> <p>CS2030/S will continue to enforce these good programming practices.</p>"},{"location":"00-overview.html#functions","title":"Functions","text":"<p>You should also be taught to always break your code down into functions, each one performing a simple, specific, task.  The functions can then be composed to solve larger and more complex tasks.  Functions are an important programming structure in taming code complexity, it allows programmers to (i) compartmentalize computation and its effects, reducing the number of interactions to a few well-defined ones (through arguments and return values); (ii) hide the implementation details so that they can be changed later without affecting other parts of the code; (iii) reuse computations and thus write code that is more succinct and easier to understand/change.</p> <p>In CS2030/S, you will not only continue to break your computation into functions, but we will kick it up several notches.  A major part of CS2030/S is to introduce you to more programming paradigms and language tools that allow you to compartmentalize computations, hide details, and reduce repetition.</p>"},{"location":"00-overview.html#the-abstraction-principle","title":"The Abstraction Principle","text":"<p>The last point above about why it is important to code in small, reusable functions, follows what is called the Abstraction Principle1.  The principle states that:</p> <p>\"Each significant piece of functionality in a program should be implemented in just one place in the source code. Where similar functions are carried out by distinct pieces of code, it is generally beneficial to combine them into one by abstracting out the varying parts.\"</p> <p>This principle is something that we will visit over and over again in CS2030/S, applying it to different varying parts of a program. In the case of functions, the \"varying parts\" are the values on which we wish to perform the computation on.  We will also apply this principle to (i) types, abstracting them out as parameterized types or subtypes, and (ii) to sub-computation, abstracting them out as first-class functions.  These concepts: generics, subtypes, and first-class functions, underlies most of the content of CS2030/S.</p>"},{"location":"00-overview.html#erecting-an-abstraction-barrier","title":"Erecting an Abstraction Barrier","text":"<p>Another important strategy for taming complexity is the abstraction barrier.  Let's separate the role of a programmer into two, in the context of writing functions: the implementer, who implements the function, and the client, who calls the function.  The implementer should compartmentalize the internal variables and the implementation of the function, hiding them behind the abstraction barrier.  The parameters and the return values are the only communication gateways across the barrier.  </p> <p>The abstraction barrier is something that we will refer to repeatedly in CS2030/S as well.  We will see how we maintain this barrier not only in the context of functions, but also variables and computations on these variables together, by encapsulating them as objects, and hiding details from the client through access modifiers.  These ideas form two of the core principles of object-oriented programming: encapsulation and abstraction.  </p>"},{"location":"00-overview.html#code-for-change","title":"Code for Change","text":"<p>The abstraction barrier, if erected and maintained properly, reduces code complexity.  It, however, also reduces flexibility as the software evolves.  If the client wishes to modify the computation protected by the abstraction barrier, it will need the help of the implementer.  In CS2030/S, we will see two ways we can modify the computation behind the abstraction barrier, without changing the code behind the barrier.  </p> <p>First, we will introduce the concept of inheritance and polymorphism, the other two core principles of object-oriented programming.  These object-oriented mechanisms allow programmers to easily extend or modify the behavior of existing code.  </p> <p>Second, we will introduce closure, an abstraction to computation and its environment, that we can pass into the functions behind the abstraction barrier to perform a computation.  The second idea, if carried to the extreme in terms of flexibility, leads to the concept of monad in the functional programming paradigm.  A monad is a computational structure that allows objects to be composed and manipulated in a succinct and powerful way.</p>"},{"location":"00-overview.html#types","title":"Types","text":"<p>Allowing a programmer to change the behavior of the existing code without changing the code could lead to more bugs, if not managed properly.  To prevent this, both the programming language system and the programmers, have to adhere to certain rules when extending or modifying the behavior of the existing code.  Java and many other typed languages have type systems -- a set of rules that governs how variables, expressions, and functions interact with each other.  You will learn about subtyping and the Liskov Substitution Principle, two notions that are important to constraining how inheritance and polymorphism should be used to avoid bugs.</p> <p>A type system is also an important tool to reduce the complexity of software development.  Constraining the interactions among the variables, expressions, and functions, it reduces the possible interdependence between these programming constructs.  Furthermore, any attempt by programmers to break the constraint can be caught automatically by the compiler.  By utilizing the type system properly, we can detect potential bugs before they manifest themselves.</p> <p>A reason CS2030/S chooses to use Java is due to its type system.  CS2030/S will introduce the concept of types, subtypes, compile-time vs. run-time types, variants of types, parameterized types, and type inferences, in the context of Java.  We will see how we can define our own types (using classes and interfaces) and define relationships between them.  We will see how we can define parameterized types and generic functions that take in types as parameters.  These concepts apply to many other programming languages.</p>"},{"location":"00-overview.html#eliminating-side-effects","title":"Eliminating Side Effects","text":"<p>We have discussed how functions can compartmentalize computations and limit their complexity within their body.  For this approach to be effective, the function must not have any side effects -- such as updating a variable that is not within the function.  Such functions, called pure _functions, are one of the key principles of the functional programming paradigm and is something that we will explore to kick off the section on functional paradigm in CS2030/S.</p> <p>A related idea in object-oriented programming we will cover in CS2030/S is immutability -- once we create an object, the object cannot be changed.  In order to update an object, we need to create a new one.  With immutability and pure functions, we can guarantee that the same function invoked on the same objects will always return the same value.  This certainty can help in understanding and reasoning about the code behavior.</p> <ol> <li> <p>This principle is formulated by Benjamin C. Pierce in his book \"Types and Programming Languages.\"\u00a0\u21a9</p> </li> </ol>"},{"location":"01-compiler.html","title":"Unit 1: Program and Compiler","text":"<p>After reading this unit, students should:</p> <ul> <li>recap some fundamental programming concepts, including the concept of a program, a programming language, a compiler, an interpreter</li> <li>be aware of two modes of running a Java program (compiled vs. interpreted)</li> <li>be aware that compile-time errors are better than run-time errors, but the compiler cannot always detect errors during compile time</li> </ul>"},{"location":"01-compiler.html#software-program","title":"Software Program","text":"<p>A software program is a collection of data variables and instructions on how to modify these variables.  To dictate these instructions to the computer, programmers usually write down the instructions using a programming language, expressing their instructions in code that are made up of keywords, symbols, and names.  </p> <p>A programming language is a formal language that helps programmers specify precisely what the instructions are at a higher level of abstraction (i.e., at a higher conceptual level) so that a programmer only needs to write a few lines of code to give complex instructions to the computer.  </p>"},{"location":"01-compiler.html#compiled-vs-interpreted-programs","title":"Compiled vs. Interpreted Programs","text":"<p>The processing unit of a computer can only accept and understand instructions written in machine code.  A program, written in a higher-level programming language, therefore needs to be translated into machine code before execution.  There are different approaches to how such translations can be done.  The first approach uses a compiler -- a software tool that reads in the entire program written in a higher-level programming language and translates it into machine code.  The machine code is then saved into an executable file, which can be executed later.  <code>clang</code>, a C/C++ compiler, is an example.  The second approach uses an interpreter -- software that reads in the program one statement at a time interprets what the statement means, and executes its directly.   This is how Python and Javascript programs are executed. </p> <p>Modern programming systems for executing programs are, however, more sophisticated.  V8, for instance, is an open-source engine that executes Javascript, and it contains both an interpreter that first interprets a Javascript into bytecode (an intermediate, low-level representation).  A just-in-time compiler then reads in the bytecode and generates machine code dynamically at runtime with optimized performance. </p> <p>Java programs, on the other hand, can be executed in two ways.  </p> <ul> <li> <p>The Java program can first be compiled into bytecode.  During execution, the bytecode is interpreted and compiled on-the-fly by the Java Virtual Machine (JVM) into machine code.</p> </li> <li> <p>The Java program can also be interpreted by the Java interpreter.</p> </li> </ul> <p>To better understand this distinction, we will introduce a visual aid to describe the relationships between programs, compilers, interpreters, and machines.</p>"},{"location":"01-compiler.html#tombstone-diagrams-t-diagrams","title":"Tombstone Diagrams (T-Diagrams)","text":"<p>Tombstone Diagrams or T-diagrams consist of combinations of the following four components: </p> <ul> <li>Programs which are implemented in a particular language (i.e. <code>Java</code>, <code>python</code>, <code>c/c++</code>)</li> <li>Language A to language B Interpreters</li> <li>Language A to language B Compilers which are implemented in a language C</li> <li>Physical Machines implementing a particular language (i.e. x86-64, ARM-64)</li> </ul> <p>These components are represented in T-diagrams as shown in the figure below:</p> <p></p> <p>We can treat these components like \"puzzle pieces\" and build diagrams to describe various execution, compilation, or interpreted processes.  For example, in the diagram below, a python script <code>Hello.py</code> is being interpreted by the python interpreter running on the x86-64 architecture.</p> <p></p> <p>Note: In order for the diagram to be valid, adjacent connected diagram components need to match. This can be seen in the diagram below (highlighted with blue boxes).</p> <p></p> <p>Since CS2030/S uses Java, we will now look at the two approaches to execute a Java program in more detail (without worrying about how to write a single line of Java first).</p>"},{"location":"01-compiler.html#compiling-and-running-java-programs","title":"Compiling and Running Java Programs","text":"<p>Suppose we have a Java program called <code>Hello.java</code>.  To compile the program, we type1 <pre><code>$ javac Hello.java\n</code></pre> into the command line.  <code>javac</code> is the Java compiler.  This step will either lead to the bytecode called <code>Hello.class</code> being created or spew out some errors.  This process can be seen in the figure below, where the <code>Hello.java</code> program is compiled from Java to the JVM language (bytecode). The Java compiler <code>javac</code> in this diagram is implemented in the x86-64 machine language.</p> <p></p> <p>Assuming that there is no error in compilation, we can now run <pre><code>$ java Hello\n</code></pre> to invoke the JVM <code>java</code> and execute the bytecode contains in <code>Hello.class</code>. This can be seen in the figure below, where the <code>Hello.class</code> program is interpreted from JVM language (bytecode) to the x86-64 machine language.</p> <p></p> <p>Beginners tend to confuse between <code>javac</code> and <code>java</code>, and whether to add the extension <code>.java</code> or <code>.class</code> when compiling and executing a Java program.  Do take note and refer back here if needed2.</p>"},{"location":"01-compiler.html#interpreting-a-java-program","title":"Interpreting a Java program","text":"<p>Java (version 8 or later) comes with an interpreter called <code>jshell</code> that can read in Java statements, evaluate them, and print the results3. <code>jshell</code> is useful for learning and experimenting about Java.   This can be seen in the figure below, where the <code>Hello.java</code> program is interpreted from Java directly to the x86-64 machine language. </p> <p></p> <p>To run <code>jshell</code> in interactive mode, we type <pre><code>$ jshell\n</code></pre> on the command line, which causes an interactive prompt to appear: <pre><code>$ jshell\n|  Welcome to JShell -- Version 11.0.2\n|  For an introduction type: /help intro\n\njshell&gt;\n</code></pre></p> <p>We can now type in Java code on <code>jshell&gt;</code>. </p> <p>Alternatively, we can also include all the Java statements that we want <code>jshell</code> to run in a file and pass it into jshell</p> <pre><code>$ jshell Hello.jsh\n</code></pre> <p>While <code>jshell</code> is a convenient way to test things out and play with new Java concepts as we learn, do keep in mind that <code>jshell</code> combined both compilation and run-time into a single step.  The error spewed out by <code>jshell</code> could be either compile-time error or run-time error, and this could be confusing to beginners who try to distinguish between the two phases of program execution.</p>"},{"location":"01-compiler.html#compiler","title":"Compiler","text":"<p>The compiler does more than just translating source code into machine code or bytecode.  The compiler also needs to parse the source code written and check if it follows the precise specification of the programming language (called grammar) used, and produces a syntax error if the grammar is violated.  It therefore can detect any syntax error before the program is run.</p> <p>It is much better for a programmer to detect any error in its code during compilation -- since this is the phase when the program is still being developed and under the control of the programmer.  Runtime error, on the other hand, might occur when the customers are running the program, and so are much less desirable.  As such, we try to detect errors as much as possible during compilation.  The compiler is a powerful friend for any programmer if used properly.</p> <p>The power of the compiler, however, is limited.  A compiler can only read and analyze the source code without actually running it.  Without running the program, the compiler cannot always tell if a particular statement in the source code will ever be executed; it cannot always tell what values a variable will take.  </p> <p>To deal with this, the compiler can either be conservative, and report an error as long as there is a possibility that a particular statement is incorrect; or, the compiler can be more permissive, reporting an error only if there is no possiblity that a particular statement is correct.  If there is a possibility that a particular statement is correct, it does not throw an error, but rely on the programmer to do the right thing.  We will further contrast these two behaviors later in this module.</p> <ol> <li> <p>The <code>$</code> represents the command prompt in a shell and you do not need to type this.\u00a0\u21a9</p> </li> <li> <p>To add to the confusion, Java 11 introduces a shortcut where we can run <code>java Hello.java</code> directly.  This command causes <code>Hello.java</code> to be compiled and executed in a single step.  We won't do this in CS2030/S (i) to avoid confusion and (ii) to show you the steps explicitly.\u00a0\u21a9</p> </li> <li> <p>Such a program is called REPL (Read-Evaluate-Print in a Loop) for short.\u00a0\u21a9</p> </li> </ol>"},{"location":"02-type.html","title":"Unit 2: Variable and Type","text":"<p>After this unit, students should be able to:</p> <ul> <li>appreciate the concept of variables as an abstraction</li> <li>understand the concept of types and subtypes</li> <li>contrast between statically typed language vs. dynamically typed language</li> <li>contrast between strongly typed language vs. weakly typed language</li> <li>be familiar with Java variables and primitive types</li> <li>understand widening type conversion in the context of variable assignments and how subtyping dictates whether the type conversion is allowed.</li> </ul>"},{"location":"02-type.html#data-abstraction-variable","title":"Data Abstraction: Variable","text":"<p>One of the important abstractions that are provided by a programming language is the variable.  Data are stored in some location in computer memory.  But we should not be referring to the memory location all the time.  First, referring to something like <code>0xFA49130E</code> is not user-friendly; Second, the location may change.  A variable is an abstraction that allows us to give a user-friendly name to a piece of data in memory.  We use the variable name whenever we want to access the value in that location, and pointer to the variable or reference to the variable whenever we want to refer to the address of the location.</p>"},{"location":"02-type.html#type","title":"Type","text":"<p>As programs get more complex, the number of variables that the programmer needs to keep track of increases.  These variables might be an abstraction over different types of data: some variables might refer to a number, some to a string, some to a list of numbers, etc.  Not all operations are meaningful over all types of data.</p> <p>To help mitigate the complexity,  we can assign a type to a variable.  The type communicates to the readers what data type the variable is an abstraction over, and to the compiler/interpreter what operations are valid on this variable and how the operation behaves.  In lower-level programming languages like C, the type also informs the compiler how the bit representing the variable should be interpreted.</p> <p>As an example of how types can affect how an operation behaves, let's consider Python.  Suppose we have two variables <code>x</code> and <code>y</code>, storing the values <code>4</code> and <code>5</code> respectively and we run <code>print x + y</code>.  If <code>x</code> and <code>y</code> are both strings, you would get <code>45</code>; if <code>x</code> and <code>y</code> are integers, you would get <code>9</code>; if <code>4</code> is an integer and <code>5</code> is a string, you would get an error.  </p> <p>In the last instance above, you see that assigning a type to each variable helps to keep the program meaningful, as the operation <code>+</code> is not defined over an integer and a string in Python.</p> <p>Java and Javascript, however,  would happily convert <code>4</code> into a string for you, and return <code>45</code>.</p>"},{"location":"02-type.html#dynamic-vs-static-type","title":"Dynamic vs. Static Type","text":"<p>Python and Javascript are examples of dynamically typed programming languages.  The same variable can hold values of different types, and checking if the right type is used is done during the execution of the program.  Note that, the type is associated with the values, and the type of the variable changes depending on the value it holds.  For example, we can do the following:</p> JavascriptPython <pre><code>let i = 4;   // i is an integer\ni = \"5\"; // ok, i is now a string\n</code></pre> <pre><code>i = 4   // i is an integer\ni = \"5\" // ok, i is now a string\n</code></pre> <p>Java, on the other hand, is a statically typed language.  We need to declare every variable we use in the program and specify its type.  A variable can only hold values of the same type as the type of the variable, so we can't assign, for instance, a string to a variable of type <code>int</code>.  Once a variable is assigned a type, its type cannot be changed.</p> <pre><code>int i;   // declare a variable\ni = 4;   // ok\ni = \"5\"; // error, cannot assign a string to an `int`\n</code></pre> <p>The type that a variable is assigned with when we declare the variable is also known as the compile-time type.  During the compilation, this is the only type that the compiler is aware of.  The compiler will check if the compile-time type matches when it parses the variables, expressions, values, and function calls, and throw an error if there is a type mismatch.  This type-checking step helps to catch errors in the code early.</p>"},{"location":"02-type.html#strong-typing-vs-weak-typing","title":"Strong Typing vs. Weak Typing","text":"<p>A type system of a programming language is a set of rules that govern how the types can interact with each other.  </p> <p>A programming language can be strongly typed or weakly typed.  There are no formal definitions of \"strong\" vs. \"weak\" typing of a programming language, and there is a spectrum of \"strength\" between the typing discipline of a language.  </p> <p>Generally, a strongly typed programming language enforces strict rules in its type system, to ensure type safety, i.e., to catch type errors during compile time rather than leaving it to runtime.</p> <p>On the other hand, a weakly typed (or loosely typed) programming language is more permissive in terms of typing checking.  C is an example of a static, weakly typed language.  In C, the following is possible:</p> <pre><code>int i;   // declare a variable\ni = 4;   // ok\ni = (int)\"5\"; // you want to treat a string as an int? ok, as you wish!   \n</code></pre> <p>The last line forces the C compiler to treat the string (to be more precise, the address of the string) as an integer, through typecasting.</p> <p>In contrast, if we try the following in Java:</p> <pre><code>int i;   // declare a variable\ni = 4;   // ok\ni = (int)\"5\"; // error\n</code></pre> <p>we will get the following compile-time error message: <pre><code>|  incompatible types: java.lang.String cannot be converted to int\n</code></pre></p> <p>because the compiler enforces a stricter rule and allows typecasting only if it makes sense.</p>"},{"location":"02-type.html#type-checking-with-a-compiler","title":"Type Checking with A Compiler","text":"<p>In addition to checking for syntax errors, the compiler can check for type compilability according to the compile-time type, to catch possible errors as early as possible.  Such type checking is made possible with static typing.  Consider the following Python program:</p> <pre><code>i = 0\nwhile (i &lt; 10):\n    # do something that takes time\n    i = i + 1\nprint(\"i is \" + i)\n</code></pre> <p>The type mismatch error on Line 5 is only caught when Line 5 is executed.  Since the type of the variable <code>i</code> can change during run time, Python (and generally, dynamically typed languages) can not tell if Line 5 will lead to an error until it is evaluated at run-time.  </p> <p>In contrast, statically typed language like Java can detect type mismatch during compile time since the compile-time type of a variable is fixed.</p>"},{"location":"02-type.html#primitive-types-in-java","title":"Primitive Types in Java","text":"<p>We now switch our focus to Java, particularly to the types supported.  There are two categories of types in Java, the primitive types and the reference types.  We will first look at primitive types in this unit.</p> <p>Primitive types are types that holds numeric values (integers, floating-point numbers) as well as boolean values (<code>true</code> and <code>false</code>).  </p> <p>For storing integral values, Java provides four types, <code>byte</code>, <code>short</code>, <code>int</code>, and <code>long</code>, for storing 8-bit, 16-bit, 32-bit, 64-bit signed integers respectively.  The type <code>char</code> stores 16-bit unsigned integers representing UTF-16 Unicode characters.</p> <p>For storing floating-point values, Java provides two types, <code>float</code> and <code>double</code>, for 32-bit and 64-bit floating-point numbers.</p> <p>Unlike reference types, which we will see later, primitive type variables never share their value with each other, i.e., if we have: <pre><code>int i = 1000;\nint j = i;\ni = i + 1;\n</code></pre></p> <p><code>i</code> and <code>j</code> each store a copy of the value <code>1000</code> after Line 2.  Changing <code>i</code> on Line 3 does not change the content of <code>j</code>.</p>"},{"location":"02-type.html#subtypes","title":"Subtypes","text":"<p>An important concept that we will visit repeatedly in CS2030/S is the concept of subtypes.</p> <p>Let \\(S\\) and \\(T\\) be two types.  We say that \\(T\\) is a subtype of \\(S\\) if a piece of code written for variables of type \\(S\\) can also safely be used on variables of type \\(T\\).  </p> <p>We use the notation \\(T &lt;: S\\) or \\(S :&gt; T\\) to denote that \\(T\\) is subtype of \\(S\\).</p> <p>The subtype relationship is transitive, i.e., if \\(S &lt;: T\\) and \\(T &lt;: U\\), then \\(S &lt;: U\\).  It is also reflexive, for any type \\(S\\), \\(S &lt;: S\\).</p> <p>We also use the term supertype to denote the reversed relationship: if \\(T\\) is a subtype of \\(S\\), then \\(S\\) is a supertype of \\(T\\).</p>"},{"location":"02-type.html#subtyping-between-java-primitive-types","title":"Subtyping Between Java Primitive Types","text":"<p>Consider the range of values that the primitive types can take, Java defines the following subtyping relationship:</p> <p><code>byte</code> &lt;: <code>short</code> &lt;: <code>int</code> &lt;: <code>long</code> &lt;: <code>float</code> &lt;: <code>double</code></p> <p><code>char</code> &lt;: <code>int</code></p> <p>Valid subtype relationship is part of what the Java compiler checks for when it compiles.  Consider the following example: <pre><code>double d = 5.0;\nint i = 5;\nd = i;\ni = d; // error\n</code></pre></p> <p>Line 4 above would lead to an error: <pre><code>|  incompatible types: possible lossy conversion from double to int\n</code></pre></p> <p>but Line 3 is OK.  </p> <p>This example shows how subtyping applies to type checking.  Java allows a variable of type \\(T\\) to hold a value from a variable of type \\(S\\) only if \\(S &lt;: T\\).  This step is called widening type conversion.  Such conversion can happen during assignment or parameter passing.</p>"},{"location":"02-type.html#additional-readings","title":"Additional Readings","text":"<ul> <li>Java Tutorial: Primitive Data Types and other Language Basics</li> </ul>"},{"location":"03-function.html","title":"Unit 3: Functions","text":"<p>After reading this unit, students should</p> <ul> <li>understand the importance of function as a programming constructor and how it helps to reduce complexity and mitigate bugs.</li> <li>be aware of two different roles a programmer can play: the implementer and the client</li> <li>understand the concept of abstraction barrier as a wall between the client and the implementer, including in the context of a function.</li> </ul>"},{"location":"03-function.html#function-as-an-abstraction-over-computation","title":"Function as an Abstraction over Computation","text":"<p>Another important abstraction provided by a programming language is the function (or procedure).  This abstraction allows programmers to group a set of instructions and give it a name.  The named set of instructions may take one or more variables as input parameters, and return one or more values.   </p> <p>Like all other abstractions, defining functions allow us to think at a higher conceptual level.  By composing functions at increasingly higher level of abstractions, we can build programs with increasing level of complexity.</p> <p>Functions help us deal with complexity in a few ways:</p> <ul> <li> <p>Functions allow programmers to compartmentalize computation and its effects.  We can isolate the complexity to within its body: the intermediate variables exists only as local variables that has no effect outside of the function.  A function only interacts with the rest of the code through its parameters and return value, and so, reduces the dependencies between variables to these well-defined interactions.  Such compartmentalization reduces the complexity of code.</p> </li> <li> <p>Functions allow programmers to hide how a task is performed.  The caller of the function only needs to worry about what the function does.  By hiding the details of how, we gain two weapons against code complexity.  First, we reduce the amount of information that we need to communicate among programmers.  A fellow programmer only needs to read the documentation to understand what the parameters are for, what the return values are.  There is no need for a fellow programmer to know about the intermediate variables or the internal computation used to implement the functions.  Second, as the design and requirement evolve, the implementation of a function may change.  But, as long as the parameters and the return value of a function remains the same, the caller of the function does not have to update the code accordingly.  Reducing the need to change as the software evolves reduces the chances of introducing bugs accordingly.  </p> </li> <li> <p>Functions allows us to reduce repetition in our code through code reuse.  If we have the same computation that we need to perform repeatedly on different values, we can construct these computations as functions, replacing the values with parameters, and pass in the values as arguments to the function.  This approach reduces the amount of boiler-plate code and has two major benefits in reducing code complexity and bugs.  First, it makes the code more succinct, and therefore easier to read and understand.  Second, it reduces the number of places in our code that we need to modify as the software evolves, and therefore, decreases the chance of introducing new bugs. </p> </li> </ul>"},{"location":"03-function.html#abstraction-barrier","title":"Abstraction Barrier","text":"<p>We can imagine an abstraction barrier between the code that calls a function and the code that defines the function body.  Above the barrier, the concern is about using the function to perform a task, while below the barrier, the concern is about how to perform the task.  </p> <p>While many of you are used to writing a program solo, in practice, you rarely write a program with contributions from only a single person.  The abstraction barrier separates the role of the programmer into two: (i) an implementer, who provides the implementation of the function, and (ii) a client, which uses the function to perform the task.  Part of the aim in CS2030/S is to switch your mindset into thinking in terms of these two roles.  </p> <p>The abstraction barrier thus enforces a separation of concerns between the two roles.</p> <p>The concept of abstraction barrier applies not only to a function, but it can be applied to different levels of abstraction as well.  We will see how it is used for a higher-level of abstraction in the next unit.</p>"},{"location":"04-encapsulation.html","title":"Unit 4: Encapsulation","text":"<p>After reading this unit, students should</p> <ul> <li>understand composite data type as a even-higher level abstraction over variables</li> <li>understand encapsulation as an object-oriented (OO) principle</li> <li>understand the meaning of class, object, fields, methods, in the context of OO programming</li> <li>be able to define a class and instantiate one as an object in Java</li> <li>appreciate OO as a natural way to model the real world in programs</li> <li>understand reference types in Java and its difference from the primitive types</li> </ul>"},{"location":"04-encapsulation.html#abstraction-composite-data-type","title":"Abstraction: Composite Data Type","text":"<p>Just like functions allow programmers to group instructions, give it a name, and refer to it later, a composite data type allows programmers to group primitive types together, give it a name (a new type), and refer to it later.  This is another powerful abstraction in programming languages that help us to think at a higher conceptual level without worrying about the details.   Commonly used examples are mathematical objects such as complex numbers, 2D data points, multi-dimensional vectors, circles, etc, or everyday objects such as a person, a product, etc.</p> <p>Defining composite data type allows programmers to abstract away (and be separated from the concern of) how a complex data type is represented.</p> <p>For instance, a circle on a 2D plane can be represented by the center (<code>x</code>, <code>y</code>) and its radius <code>r</code>, or it can be represented by the top left corner (<code>x</code>,<code>y</code>) and the width <code>w</code> of the bounding square.</p> <p>In C, we build a composite data type with <code>struct</code>.  For example,</p> <pre><code>typedef struct {\ndouble x, y; // (x,y) coordinate of the center.\ndouble r; // radius\n} circle;\n</code></pre> <p>Once we have the <code>struct</code> defined, we are not completely shielded from its representation, until we write a set of functions that operates on the <code>circle</code> composite type.  For instance,</p> <pre><code>double circle_area(circle c) { ... };\nbool   circle_contains_point(circle c, double x, double y) { ... };\n:\n</code></pre> <p>Implementing these functions requires knowledge of how a circle is represented.  Once the set of functions that operates on and manipulates circles is available, we can use the circle type without worrying about the internal representation.  </p> <p>If we decide to change the representation of a circle, then only the set of functions that operates on a circle type need to be changed, but not the code that uses circles to do other things.  In other words, the representation of the circle and the set of functions that operation on and manipulate circles, fall on the same side of the abstraction barrier.</p>"},{"location":"04-encapsulation.html#abstraction-class-and-object-or-encapsulation","title":"Abstraction: Class and Object (or, Encapsulation)","text":"<p>We can further bundle the composite data type and its associated functions on the same side of the abstraction barrier together, into another abstraction called a class.</p> <p>A class is a data type with a group of functions associated with it.  We call the functions as methods and the data in the class as fields (or members, or states, or attributes1).   A well-designed class maintains the abstraction barrier, properly wraps the barrier around the internal representation and implementation, and exposes just the right method interface for others to use.</p> <p>The concept of keeping all the data and functions operating on the data related to a composite data type together within an abstraction barrier is called encapsulation.</p> <p>Let's see how we can encapsulate the fields and methods associated together, using <code>Circle</code> as an example, in Java.</p> <pre><code>// Circle v0.1\nclass Circle {\ndouble x;\ndouble y;\ndouble r;\n\ndouble getArea() {\nreturn 3.141592653589793 * r * r;\n}\n}\n</code></pre> <p>The code above defines a new class using the keyword <code>class</code>, give it a name <code>Circle</code>2, followed by a block listing the member variables (with types) and the function definitions.</p> <p>Just like we can create variables of a given type, we can create objects of a given class.  Objects are instances of a class, each allowing the same methods to be called, and each containing the same set of variables of the same types, but (possibly) storing different values.</p> <p>In Java, the keyword <code>new</code> creates an object of a given class.  For instance, to create a <code>Circle</code> object, we can use <pre><code>Circle c = new Circle();\n</code></pre></p> <p>To access the fields and the methods, we use the <code>.</code> notation.  For example, <code>object.field</code> or <code>object.method(..)</code>.  For instance, <pre><code>c.r = 10;    // set the radius to 10\nc.getArea(); // return 314.1592653589793\n</code></pre></p>"},{"location":"04-encapsulation.html#object-oriented-programming","title":"Object-Oriented Programming","text":"<p>A program written in an object-oriented language such as Java consists of classes, with one main class as the entry point.  One can view a running object-oriented (or OO) program as something that instantiates objects of different classes and orchestrates their interactions with each other by calling each others' methods.</p> <p>One could argue that an object-oriented way of writing programs is much more natural, as it mirrors our world more closely.  If we look around us, we see objects all around us, and each object has certain properties, exhibits certain behavior, and they allow certain actions.  We interact with the objects through their interfaces, and we rarely need to know the internals of the objects we used every day (unless we try to repair them)3.  </p> <p>To model a problem in an object-oriented manner, we typically model the nouns as classes and objects, the properties or relationships among the classes as fields, and the verbs or actions of the corresponding objects as methods.</p>"},{"location":"04-encapsulation.html#reference-types-in-java","title":"Reference Types in Java","text":"<p>We mentioned in Unit 2 that there are two kinds of types in Java.  You have been introduced to the primitive types.  Everything else in Java is a reference type.</p> <p>The <code>Circle</code> class is an example of a reference type.  Unlike primitive variables, which never share the value, a reference variable stores only the reference to the value, and therefore two reference variables can share the same value.  For instance,</p> <pre><code>Circle c1 = new Circle();\nCircle c2 = c1;\nSystem.out.println(c2.r); // print 0\nc1.r = 10.0;\nSystem.out.println(c2.r); // print 10.0\n</code></pre> <p>The behavior above is due to the variables <code>c1</code> and <code>c2</code> referencing to the same <code>Circle</code> object in the memory.  Therefore, changing the field <code>r</code> of <code>c1</code> causes the field <code>r</code> of <code>c2</code> to change as well.</p>"},{"location":"04-encapsulation.html#special-reference-value-null","title":"Special Reference Value: <code>null</code>","text":"<p>Any reference variable that is not initialized will have the special reference value <code>null</code>.  A common error for beginners is to declare a reference variable and try to use it without instantiating an object:</p> <pre><code>Circle c1;\nc1.r = 10.0;  // error\n</code></pre> <p>Line 2 would lead to a run-time error message <pre><code>|  Exception java.lang.NullPointerException\n</code></pre></p> <p>Remember to always instantiate a reference variable before using it.</p>"},{"location":"04-encapsulation.html#further-readings","title":"Further Readings","text":"<ul> <li>Oracle's Java Tutorial on Classes and Objects</li> </ul> <ol> <li> <p>Computer scientists just could not decide what to call this :(\u00a0\u21a9</p> </li> <li> <p>As a convention, we use PascalCase for class name and camelCase for variable and method names in Java.\u00a0\u21a9</p> </li> <li> <p>This is a standard analogy in an OOP textbook.  In practice, however, we often have to write programs that include abstract concepts with no tangible real-world analogy as classes.\u00a0\u21a9</p> </li> </ol>"},{"location":"05-infohiding.html","title":"Unit 5: Information Hiding","text":"<p>After taking this unit, students should:</p> <ul> <li>understand the drawback of breaking the abstraction barrier</li> <li>understand the concept of information hiding to enforce the abstraction barrier</li> <li>understand how Java uses access modifiers to enforce information hiding</li> <li>understand what is a constructor and how to write one in Java</li> </ul>"},{"location":"05-infohiding.html#breaking-the-abstraction-barrier","title":"Breaking the Abstraction Barrier","text":"<p>In the ideal case, the code above the abstraction barrier would just call the provided interface to use the composite data type.  There, however, may be cases where a programmer may intentionally or accidentally break the abstraction barrier.  </p> <p>Consider the case of <code>Circle</code> above, where we modify the radius <code>r</code> directly with <code>c.r = 10</code>.  In doing so, we, as the client to <code>Circle</code>, make an explicit assumption of how <code>Circle</code> implements a circle.  The implementation details have been leaked outside the abstraction barrier.   Now, if the implementer wishes to change the representation of the <code>Circle</code>, to say, store the diameter, instead.  This small implementation change would invalidate the code that the client has written!  The client will have to carefully change all the code that makes the assumption, and modify accordingly, increasing the chances of introducing a bug.</p>"},{"location":"05-infohiding.html#data-hiding","title":"Data Hiding","text":"<p>Many OO languages allow programmers to explicitly specify if a field or a method can be accessed from outside the abstraction barrier.  Java, for instance, supports <code>private</code> and <code>public</code> access modifiers.  A field or a method that is declared as <code>private</code> cannot be accessed from outside the class, and can only be accessed within the class.  On the other hand, as you can guess, a <code>public</code> field or method can be accessed, modified, or invoked from outside the class.  </p> <p>Such a mechanism to protect the abstraction barrier from being broken is called data hiding or information hiding.  This protection is enforced by the compiler at compile time.</p> <p>In our original <code>Circle</code> class (v0.1) in Unit 4, we did not specify any access modifier -- this amounts to using the default modifier, the meaning of which is not our concern right now1  For a start, we will explicitly indicate <code>private</code> or <code>public</code> for all our methods and fields.</p> <pre><code>// Circle v0.2\nclass Circle {\nprivate double x;\nprivate double y;\nprivate double r;\n\npublic double getArea() {\nreturn 3.141592653589793 * r * r;\n}\n}\n</code></pre> <p>Now the fields <code>x</code>, <code>y</code>, and <code>r</code> are hidden behind the abstraction barrier of the class <code>Circle</code>.  Note that these fields are not accessible and modifiable outside of the class <code>Circle</code>, but they can be accessed and modified within <code>Circle</code> (inside the abstraction barrier), such as in the methods <code>getArea</code>.</p> <p>Breaking Python's Abstraction Barrier</p> <p>Python tries to prevent accidental access to internal representation by having a convention of prefixing the internal variables with <code>_</code> (one underscore) or <code>__</code> (two underscores).   This method, however, does not prevent a lazy programmer from directly accessing the variables and possibly planting a bug/error that will surface later.</p>"},{"location":"05-infohiding.html#constructors","title":"Constructors","text":"<p>With data hiding, we completely isolate the internal representation of a class using an abstraction barrier.  But, with no way for the client of the class to modify the fields directly, how can the client initialize the fields in a class?  To get around this, it is common for a class to provide methods to initialize these internal fields.</p> <p>A method that initializes an object is called a constructor.</p> <p>A constructor method is a special method within the class.  It cannot be called directly but is invoked automatically when an object is instantiated.   In Java, a constructor method has the same name as the class and has no return type.  A constructor can take in arguments just like other functions.  Let's add a constructor to our <code>Circle</code> class:</p> <pre><code>// Circle v0.3\nclass Circle {\nprivate double x;\nprivate double y;\nprivate double r;\n\npublic Circle(double x, double y, double r) {\nthis.x = x;\nthis.y = y;\nthis.r = r;\n}\n\npublic double getArea() {\nreturn 3.141592653589793 * this.r * this.r;\n}\n}\n</code></pre> <p>Now, to create a <code>Circle</code> object, we need to pass in three arguments: <pre><code>Circle c = new Circle(0.0, 0.5, 10.0);\n</code></pre></p> <p>Constructor in Python and JavaScript</p> <p>In Python, the constructor is the <code>__init__</code> method.   In JavaScript, the constructor is simply called <code>constructor</code>.</p>"},{"location":"05-infohiding.html#the-this-keyword","title":"The <code>this</code> Keyword","text":"<p>The code above also introduces the <code>this</code> keyword.  <code>this</code> is a reference variable that refers back to self, and is used to distinguish between two variables of the same name.  In the example above, <code>this.x = x</code> means we want to set the field <code>x</code> of this object to the parameter <code>x</code> passed into the constructor.</p> <p>Now that you have been introduced to <code>this</code>, we have also updated the method body of <code>getArea</code> and replaced <code>r</code> with <code>this.r</code>.  Although there is nothing syntactically incorrect about using <code>r</code>, sticking to the idiom of referring to members through the <code>this</code> reference makes the code easier to understand to readers.  We are making it explicit that we are referring to a field in the class, rather than a local variable or a parameter.</p> <ol> <li> <p>The other access modifier is <code>protected</code>.  Again, we do not want to worry about this modifier for now.\u00a0\u21a9</p> </li> </ol>"},{"location":"06-tell-dont-ask.html","title":"Unit 6: Tell, Don't Ask","text":"<p>After taking this unit, students should:</p> <ul> <li>understand what accessor and mutator are used for, and why not to use them</li> <li>understand the principle of \"Tell, Don't Ask\"</li> </ul>"},{"location":"06-tell-dont-ask.html#accessors-and-mutators","title":"Accessors and Mutators","text":"<p>Similar to providing constructors, a class should also provide methods to retrieve or modify the properties of the object.  These methods are called the accessor (or getter) or mutator (or setter).</p> <p>The use of accessor and mutator methods is a bit controversial.   Suppose that we provide an accessor method and a mutator method for every private field, then we are exposing the internal representation, therefore breaking the encapsulation.  For instance:</p> <pre><code>// Circle v0.4\nclass Circle {\nprivate double x;\nprivate double y;\nprivate double r;\n\npublic Circle(double x, double y, double r) {\nthis.x = x;\nthis.y = y;\nthis.r = r;\n}\n\npublic double getX() {\nreturn this.x;\n}\n\npublic void setX(double x) {\nthis.x = x;\n}\n\npublic double getY() {\nreturn this.y;\n}\n\npublic void setY(double y) {\nthis.y = y;\n}\n\npublic double getR() {\nreturn this.r;\n}\n\npublic void setR(double r) {\nthis.r = r;\n}\n\npublic double getArea() {\nreturn 3.141592653589793 * this.r * this.r;\n}\n}\n</code></pre>"},{"location":"06-tell-dont-ask.html#the-tell-dont-ask-principle","title":"The \"Tell Don't Ask\" Principle","text":"<p>The mutators and accessors above are pretty pointless.  If we need to know the internal and do something with it, then we are breaking the abstraction barrier.  The right approach is to implement a method within the class that does whatever we want the class to do.   For instance, suppose that we want to check if a given point (x,y) calls within the circle, one approach would be:</p> <pre><code>double cX = c.getX();\ndouble cY = c.getY();\ndouble r = c.getR();\nboolean isInCircle = ((x - cX) * (x - cX) + (y - cY) * (y - cY)) &lt;= r * r;\n</code></pre> <p>where <code>c</code> is a <code>Circle</code> object.</p> <p>A better approach would be to add a new <code>boolean</code> method in the <code>Circle</code> class, and call it instead: <pre><code>boolean isInCircle = c.contains(x, y);\n</code></pre></p> <p>The better approach involves writing a few more lines of code to implement the method, but it keeps the encapsulation intact.  If one fine day, the implementer of <code>Circle</code> decided to change the representation of the circle and remove the direct accessors to the fields, then only the implementer needs to change the implementation of <code>contains</code>.  The client does not have to change anything.  </p> <p>The principle around which we can think about this is the \"Tell, Don't Ask\" principle.  The client should tell a <code>Circle</code> object what to do (compute the circumference), instead of asking \"what is your radius?\" to get the value of a field then perform the computation on the object's behalf.</p> <p>While there are situations where we can't avoid using accessor or modifier in a class, for beginner OO programmers like yourself, it is better to not define classes with any accessor and modifier to the private fields, and forces yourselves to think in the OO way -- to tell an object what task to perform as a client, and then implement this task within the class as a method as the implementer.</p>"},{"location":"06-tell-dont-ask.html#further-reading","title":"Further Reading","text":"<ul> <li>Tell Don't Ask by Martin Fowler</li> <li>Why getters and setters are evil, by Allen Holub, JavaWorld</li> <li>Getters and setters are evil. Period, by Yegor Bygayenko.</li> </ul>"},{"location":"07-static-field.html","title":"Unit 7: Class Fields","text":"<p>After this unit, students should:</p> <ul> <li>understand the difference between instance fields and class fields</li> <li>understand the meaning of keywords <code>final</code> and <code>static</code> in the context of a field</li> <li>be able to define and use a class field</li> <li>be able to use <code>import</code> to access classes from the Java standard libraries</li> </ul>"},{"location":"07-static-field.html#class-fields","title":"Class Fields","text":"<p>Let's revisit the following implementation of <code>Circle</code>. <pre><code>// Circle v0.3\nclass Circle {\nprivate double x;\nprivate double y;\nprivate double r;\n\npublic Circle(double x, double y, double r) {\nthis.x = x;\nthis.y = y;\nthis.r = r;\n}\n\npublic double getArea() {\nreturn 3.141592653589793 * this.r * this.r;\n}\n}\n</code></pre></p> <p>In the code above, we use the constant \\(\\pi\\) but hardcoded it as 3.141592653589793.  Hardcoding such a magic number is a no-no in terms of coding style.  This constant can appear in more than one places. If we hardcode such a number and want to change its precision later, we would need to trace down and change every occurrence.  Every time we need to use \\(\\pi\\), we have to remember or look up what is the precision that we use.  Not only does this practice introduce more work, it is also likely to introduce bugs.  </p> <p>In C, we define \\(\\pi\\) as a macro constant <code>M_PI</code>.  But how should we do this in Java?  This is where the ideal that a program consists of only objects with internal states that communicate with each other can feel a bit constraining.  The constant \\(\\pi\\) is universal, and does not really belong to any object (the value of \\(\\pi\\) is the same for every circle!).  </p> <p>Another example is the method <code>sqrt()</code> that computes the square root of a given number.  <code>sqrt</code> is a general function that is not associated with any object as well.</p> <p>A solution to this is to associate these global values and functions with a class instead of with an object.  For instance. Java predefines a <code>java.lang.Math</code> class1 that is populated with constants <code>PI</code> and <code>E</code> (for Euler's number \\(e\\)), along with a long list of mathematical functions.  To associate a method or a field with a class in Java, we declare them with the <code>static</code> keyword.  We can additionally add a keyword <code>final</code> to indicate that the value of the field will not change and <code>public</code> to indicate that the field is accessible from outside the class.  In short, the combination of <code>public static final</code> modifiers is used for constant values in Java.</p> <pre><code>class Math {\n:\npublic static final double PI = 3.141592653589793;\n:\n:\n}\n</code></pre> <p>We call these <code>static</code> fields that are associated with a class as class fields, and fields that are associated with an object as instance fields.  Note that, a <code>static</code> class field needs not be <code>final</code> and it needs not be <code>public</code>.  Class fields are useful for storing pre-computed values or configuration parameters associated with a class rather than individual objects.</p>"},{"location":"07-static-field.html#accessing-class-fields","title":"Accessing Class Fields","text":"<p>A class field behaves just like a global variable and can be accessed in the code, anywhere the class can be accessed.  Since a class field is associated with a class rather than an object, we access it through its  class name.  To use the static class field <code>PI</code>, for instance, we have to say <code>java.lang.Math.PI</code>. <pre><code>public double getArea() {\nreturn java.lang.Math.PI * this.r * this.r;\n}\n</code></pre></p> <p>A more common way, however, is to use <code>import</code> statements at the top of the program.  If we have this line: <pre><code>import java.lang.Math;\n</code></pre></p> <p>Then, we can save some typing and write: <pre><code>public double getArea() {\nreturn Math.PI * this.r * this.r;\n}\n</code></pre></p> <p>Class Fields and Methods in Python</p> <p>Note that, in Python, any variable declared within a <code>class</code> block is a class field: <pre><code>class Circle:\n  x = 0\n  y = 0\n</code></pre></p> <p>In the above example, <code>x</code> and <code>y</code> are class fields, not instance fields.</p>"},{"location":"07-static-field.html#example-the-circle-class","title":"Example: The Circle class","text":"<p>Now, let revise our <code>Circle</code> class to improve the code and make it a little more complete.  We now add in comments for each method and variable as well, as we always should.</p> <pre><code>// version 0.4\nimport java.lang.Math;\n\n/**\n * A Circle object encapsulates a circle on a 2D plane.  \n */\nclass Circle {\nprivate double x;  // x-coordinate of the center\nprivate double y;  // y-coordinate of the center\nprivate double r;  // the length of the radius\n\n/**\n   * Create a circle centered on (x, y) with given radius\n  */\npublic Circle(double x, double y, double r) {\nthis.x = x;\nthis.y = y;\nthis.r = r;\n}\n\n/**\n   * Return the area of the circle.\n   */\npublic double getArea() {\nreturn Math.PI * this.r * this.r;\n}\n\n/**\n   * Return true if the given point (x, y) is within the circle.\n   */\npublic boolean contains(double x, double y) {\nreturn false; // TODO: Left as an exercise\n}\n}\n</code></pre> <ol> <li> <p>The class <code>Math</code> is provided by the package <code>java.lang</code> in Java.  A package is simply a set of related classes (and interfaces, but I have not told you what is an interface yet).  To use this class, we need to add the line <code>import java.lang.Math</code> at the beginning of our program.\u00a0\u21a9</p> </li> </ol>"},{"location":"08-static-method.html","title":"Unit 8: Class Methods","text":"<p>After this unit, students should:</p> <ul> <li>understand the differences between instance methods and class methods</li> <li>be able to define and use a class method</li> <li>know that the <code>main</code> method is the entry point to a Java program </li> <li>the modifies and parameters required for a <code>main</code> method</li> </ul> <p>Let's suppose that, in our program, we wish to assign a unique integer identifier to every <code>Circle</code> object ever created.  We can do this with the additions below:</p> <pre><code>class Circle {\nprivate double x;  // x-coordinate of the center\nprivate double y;  // y-coordinate of the center\nprivate double r;  // the length of the radius\nprivate final int id; // identifier\nprivate static int lastId = 0; // the id of the latest circle instance\n/**\n   * Create a circle centered on (x, y) with a given radius\n   */\npublic Circle(double x, double y, double r) {\nthis.x = x;\nthis.y = y;\nthis.r = r;\nthis.id = Circle.lastId;\nCircle.lastId += 1;\n}\n\n/**\n   * Return how many circles have ever existed.\n   */\npublic static int getNumOfCircles() {\nreturn Circle.lastId;\n}\n}\n</code></pre> <ul> <li>On Line 5, we added a new instance field <code>id</code> to store the identifier of the circle.  Note that, since the identifier of a circle should not change once it is created, we use the keyword <code>final</code> here.</li> <li>On Line 6, we added a new class field <code>lastId</code> to remember that the <code>lastId</code> of the latest circle instance.  This field is maintained as part of the class <code>Circle</code> and is initialized to 0.</li> <li>On Line 15 and 16, as part of the constructor, we initialize <code>id</code> to <code>lastId</code> and increment <code>lastId</code>.   We explicitly access <code>lastId</code> through <code>Circle</code> to make it clear that <code>lastId</code> is a class field.</li> </ul> <p>Note that all of the above are done privately beneath the abstraction barrier.</p> <p>Since <code>lastId</code> is incremented by one every time a circle is created, we can also interpret <code>lastId</code> as the number of circles created so far.  On Line 22-24, we added a method <code>getNumOfCircles</code> to return its value.</p> <p>The interesting thing here is that we declare <code>getNumOfCircles</code> with a <code>static</code> keyword.  Similar to a <code>static</code> field, a <code>static</code> method is associated with a class, not to an instance of the class.  Such method is called a class method.  A class method is always invoked without being attached to an instance, and so it cannot access its instance fields or call other of its instance methods.  The reference <code>this</code> has no meaning within a class method.  Furthermore, just like a class field, a class method should be accessed through the class.  For example, <code>Circle.getNumOfCircles()</code>.</p> <p>Other examples of class methods include the methods provided in <code>java.lang.Math</code>: <code>sqrt</code>, <code>min</code>, etc.  These methods can be invoked through the <code>Math</code> class: e.g., <code>Math.sqrt(x)</code>.</p>"},{"location":"08-static-method.html#the-main-method","title":"The <code>main</code> method","text":"<p>The most common class method you will use is probably the <code>main</code> method.</p> <p>Every Java program has a class method called <code>main</code>, which serves as the entry point to the program.  To run a Java program, we need to tell the JVM the class whose <code>main</code> method should be invoked first.  In the example that we have seen, <pre><code>java Hello\n</code></pre></p> <p>will invoke the <code>main</code> method defined within the class <code>Hello</code> to kick start the execution of the program.</p> <p>The <code>main</code> method must be defined in the following way: <pre><code>public final static void main(String[] args) {\n}\n</code></pre></p> <p>You have learned what <code>public</code> and <code>static</code> means.  The return type <code>void</code> indicates that <code>main</code> must not return a value.  We have discussed what <code>final</code> means on a field, but are not ready to explain what <code>final</code> means on a method yet.</p> <p>The <code>main</code> method takes in an array (<code>[]</code>) of strings as parameters.  These are the command-line arguments that we can pass in when invoking <code>java</code>.  <code>String</code> (or <code>java.lang.String</code>) is another class provided by the Java library that encapsulates a sequence of characters.</p>"},{"location":"09-composition.html","title":"Unit 9: Composition","text":"<p>After learning this unit, students should understand:</p> <ul> <li>how to compose a new class from existing classes using composition</li> <li>how composition models the HAS-A relationship</li> <li>how sharing reference values in composed objects could lead to surprising results</li> </ul>"},{"location":"09-composition.html#adding-more-abstractions","title":"Adding more Abstractions","text":"<p>Our previous implementation of <code>Circle</code> stores the center using its Cartesian coordinate \\((x,y)\\).  We have a method <code>contains</code> that takes in the Cartesian coordinate of a point.  As such, our implementation of <code>Circle</code> assumes that a 2D point is best represented using its Cartesian coordinate.  </p> <p>Recall that we wish to hide the implementation details as much as possible, protecting them with an abstraction barrier, so that the client does not have to bother about the details and it is easy for the implementer to change the details.  In this example, what happens if the application finds that it is more convenient to use polar coordinates to represent a 2D point?  We will have to change the code of the constructor to <code>Circle</code> and the method <code>contains</code>.  If our code contains other shapes or other methods in <code>Circle</code> that similarly assume a point is represented with its Cartesian coordinate, we will have to change them as well.  It is easy for bugs to creep in.  For instance, we might pass in the polar coordinate \\((r, \\theta)\\) to a method, but the method treats the two parameters as the Cartesian \\((x,y)\\).</p> <p>We can apply the principle of abstraction and encapsulation here, and create a new class <code>Point</code>.  The details of which are omitted and left as an exercise.  </p> <p>With the <code>Point</code> class, our <code>Circle</code> class looks like the following:</p> <pre><code>// version 0.5\nimport java.lang.Math;\n\n/**\n * A Circle object encapsulates a circle on a 2D plane.  \n */\nclass Circle {\nprivate Point c;   // the center\nprivate double r;  // the length of the radius\n\n/**\n   * Create a circle centered on Point c with given radius r\n  */\npublic Circle(Point c, double r) {\nthis.c = c;\nthis.r = r;\n}\n\n/**\n   * Return the area of the circle.\n   */\npublic double getArea() {\nreturn Math.PI * this.r * this.r;\n}\n\n/**\n   * Return true if the given point p is within the circle.\n   */\npublic boolean contains(Point p) {\n// TODO: Left as an exercise\nreturn false;\n}\n}\n</code></pre> <p>This example also illustrates the concept of composition.  Our class <code>Circle</code> has been upgraded from being a bundle of primitive types and its methods, to a bundle that includes a reference type <code>Point</code> as well.  In OOP, composition is a basic technique to build up layers of abstractions and construct sophisticated classes.</p> <p>We have mentioned that classes model real-world entities in OOP.  The composition models that HAS-A relationship between two entities.  For instance, a circle has a point as the center.</p>"},{"location":"09-composition.html#example-cylinder","title":"Example: <code>Cylinder</code>","text":"<p>Now let's build up another layer of abstraction and construct a 3D object -- a cylinder.  A cylinder has a circle as its base and has a height value.  Using composition, we can construct a <code>Cylinder</code> class:</p> <pre><code>class Cylinder {\nprivate Circle base;\nprivate double height;\n\npublic Cylinder(Circle base, double height) {\nthis.base = base;\nthis.height = height;\n}\n:\n}\n</code></pre>"},{"location":"09-composition.html#sharing-references-aka-aliasing","title":"Sharing References (aka Aliasing)","text":"<p>Recall that unlike primitive types, reference types may share the same reference values.  This is called aliasing.  Let's look at the subtleties of how this could affect our code and catch us by surprise.</p> <p>Consider the following, where we create two circles <code>c1</code> and <code>c2</code> centered at the origin (0, 0). <pre><code>Point p = new Point(0, 0);\nCircle c1 = new Circle(p, 1);\nCircle c2 = new Circle(p, 4);\n</code></pre></p> <p>Let's say that we want to allow a Circle to move its center.  For the sake of this example, let's allow mutators on the class <code>Point</code>.  Suppose we want to move <code>c1</code> and only <code>c1</code> to be centered at (1,1). <pre><code>p.moveTo(1, 1);\n</code></pre></p> <p>You will find that by moving <code>p</code>, we are actually moving the center of both <code>c1</code> and <code>c2</code>!  This result is due to both circles <code>c1</code> and <code>c2</code> sharing the same point.  When we pass the center into the constructor, we are passing the reference instead of passing a cloned copy of the center.  </p> <p>This is a common source of bugs and we will see how we can reduce the possibilities of such bugs later in this module, but let's first consider the following \"fix\" (that is still not ideal).</p> <p>Let's suppose that instead of moving <code>p</code>, we add a <code>moveTo</code> method to the <code>Circle</code> instead: <pre><code>class Circle {\nprivate Point c;   // the center\nprivate double r;  // the length of the radius\n:\n/**\n   * move the center of this circle to the given point\n   */\nvoid moveTo(Point c) {\nthis.c = c;\n}\n\n:\n}\n</code></pre></p> <p>Now, to move <code>c1</code>, <pre><code>Point p = new Point(0, 0);\nCircle c1 = new Circle(p, 1);\nCircle c2 = new Circle(p, 4);\nc1.moveTo(new Point(1, 1));\n</code></pre></p> <p>You will find that <code>c1</code> will now have a new center, but <code>c2</code>'s center remains at (0,0).  Why doesn't this solve our problem then?  Recall that we can further composed circles into other objects.  Let's say that we have two cylinders: <pre><code>Cylinder cylinder1 = new Cylinder(c1, 1);\nCylinder cylinder2 = new Cylinder(c1, 1);\n</code></pre></p> <p>that share the same base, then the same problem repeats itself!</p> <p>One solution is to avoid sharing references as much as possible.  For instance,</p> <pre><code>Point p1 = new Point(0, 0);\nCircle c1 = new Circle(p1, 1);\n\nPoint p2 = new Point(0, 0);\nCircle c2 = new Circle(p2, 4);\n\np1.moveTo(1, 1);\n</code></pre> <p>Without sharing references, moving <code>p1</code> only affects <code>c1</code>, so we are safe.   </p> <p>The drawback of not sharing objects with the same content is that we will have a proliferation of objects and the computational resource usage is not optimized.  This is an example of the trade offs we mentioned in the introduction to this module: we are sacrificing the computational cost to save programmers from potential suffering!</p> <p>Another approach to address this issue is immutability.  We will cover this later in the module.</p>"},{"location":"10-heap-stack.html","title":"Unit 10: Heap and Stack","text":"<p>After taking this unit, students should:</p> <ul> <li>understand when memory are allocated/deallocated from the heap vs. from the stack</li> <li>understand the concept of call stack in JVM</li> </ul>"},{"location":"10-heap-stack.html#heap-and-stack","title":"Heap and Stack","text":"<p>The Java Virtual Machine (JVM) manages the memory of Java programs while its bytecode instructions are interpreted and executed.  Different JVM implementations may implement these differently, but typically a JVM implementation partitions the memory into several regions, including:</p> <ul> <li>method area for storing the code for the methods;</li> <li>metaspace for storing meta information about classes;</li> <li>heap for storing dynamically allocated objects;</li> <li>stack for local variables and call frames.</li> </ul> <p>Since the concepts of heap and stack are common to all execution environments (either based on bytecode or machine code), we will focus on them here.</p> <p>The heap is the region in memory where all objects are allocated in and stored, while the stack is the region where all variables (including primitive types and object references) are allocated in and stored.</p> <p>Considers the following two lines of code. <pre><code>Circle c;\nc = new Circle(new Point(1, 1), 8);\n</code></pre> Line 1 declares a variable <code>c</code>.  When the JVM executes this line of code, it allocates some memory space for an object reference for <code>c</code>, the content is initialized to <code>null</code>.  Since <code>c</code> is a variable, it resides in the stack.</p> <p>Line 2 creates a new Circle object.  When the JVM executes this line of code, it allocates some memory space for a <code>Circle</code> object on the heap.  The memory address of this memory space becomes the reference of the object and is assigned to the variable <code>c</code>.</p> <p>This is shown in the figure below.</p> <p></p> <p>The first argument to the <code>Circle</code> constructor is also an object, so to be more precise, when Line 2 above is executed, a <code>Point</code> object is also created and allocated on the heap.  So the field <code>c</code> inside <code>Circle</code> is actually a reference to this object.</p> <p></p> <p>Now, let's look at a slightly different example. <pre><code>Circle c;\nPoint center;\ndouble radius;\nradius = 8;\ncenter = new Point(1, 1);\nc = new Circle(center, radius);\n</code></pre></p> <p>In the second example, we have three variables, <code>c</code>, <code>center</code>, and <code>radius</code> .  Lines 1-3 declare the variables, and as a result, we have three variables allocated on the stack.  Recall that for object references, they are initialized to <code>null</code>.  Primitive type variables (e.g., <code>radius</code>) are initialized to 0.</p> <p></p> <p>After Lines 4-6, we have:</p> <p></p>"},{"location":"10-heap-stack.html#call-stack","title":"Call Stack","text":"<p>Now, let's look at what happens when we invoke a method.  Take the <code>distanceTo</code> method in <code>Point</code> as an example:</p> <p><pre><code>class Point {\nprivate double x;\nprivate double y;\n\npublic Point(double x, double y) {\nthis.x = x;\nthis.y = y;\n}\n\npublic double distanceTo(Point q) {\nreturn Math.sqrt((q.x - this.x)*(q.x - this.x)+(q.y - this.y)*(q.y - this.y));\n}\n}\n</code></pre> and the invocation: <pre><code>Point p1 = new Point(0, 0);\nPoint p2 = new Point(1, 1);\np1.distanceTo(p2);\n</code></pre></p> <p>After declaring <code>p1</code> and <code>p2</code> and creating both objects, we have: </p> <p>When <code>distanceTo</code> is called, the JVM creates a stack frame for this instance method call.  This stack frame is a region of memory that tentatively contains (i) the <code>this</code> reference, (ii) the method arguments, and (iii) local variables within the method, among other things12.  When a class method is called, the stack frame does not contain the <code>this</code> reference.</p> <p></p> <p>You can see that the references to the objects <code>p1</code> and <code>p2</code> are copied onto the stack frame. <code>p1</code> and <code>this</code> point to the same object, and <code>p2</code> and <code>q</code> point to the same object. Within the method, any modification done to <code>this</code> would change the object referenced to by <code>p1</code>, and any change made to <code>q</code> would change the object referenced to by <code>p2</code> as well. After the method returns, the stack frame for that method is destroyed.</p> <p>Let's consider a new <code>move</code> method for the class <code>Point</code> that has two parameters <code>(double x, double y)</code> and moves the <code>x</code> and <code>y</code> cordinates of the <code>Point</code>.</p> <pre><code>class Point {\nprivate double x;\nprivate double y;\n\npublic Point(double x, double y) {\nthis.x = x;\nthis.y = y;\n}\n\npublic void move(double x, double y) {\nthis.x = x;\nthis.y = y;\n}\n}\n</code></pre> <pre><code>Point p1 = new Point(0, 0);\nPoint p2 = new Point(1, 1);\ndouble x = 5;\ndouble y = 5;\np1.move(x, y);\n</code></pre> <p>Again, we create a stack frame, copy the reference to object <code>p1</code> into <code>this</code>, copy <code>x</code> from the calling method to <code>x</code> the argument within the method, copy <code>y</code> from the calling method to <code>y</code> the argument within the method.   </p> <p></p> <p>What is important here is that, as <code>x</code> and <code>y</code> are primitive types instead of references, we copy the values onto the stack.  If we change <code>x</code> or <code>y</code> within <code>move</code>, the <code>x</code> and <code>y</code> of the calling function will not change.  This behavior is the same as you would expect in C.  However, unlike in C where you can pass in a pointer to a variable, you cannot pass in a reference to a primitive type in any way in Java.  If you want to pass in a variable of primitive type into a method and have its value changed, you will have to use a wrapper class.  The details of how to do this are left as an exercise.</p> <p>To summarize, Java uses call by value for primitive types, and call by reference for objects.</p> <p>If we made multiple nested method calls, as we usually do, the stack frames get stacked on top of each other. </p> <p>One final note: the memory allocated on the stack is deallocated when a method returns.  The memory allocated on the heap, however, stays there as long as there is a reference to it (either from another object or from a variable in the stack).  Unlike C or C++, in Java, you do not have to free the memory allocated to objects.  The JVM runs a garbage collector  that checks for unreferenced objects on the heap and cleans up the memory automatically.</p> <ol> <li> <p>This is not that different from how an OS handles function call in a machine code, as you will see in CS2100/CS2106.\u00a0\u21a9</p> </li> <li> <p>The other things are JVM implementation independent and not relevant to our discussion here.\u00a0\u21a9</p> </li> </ol>"},{"location":"11-inheritance.html","title":"Unit 11: Inheritance","text":"<p>After taking this unit, students should:</p> <ul> <li>understand inheritance as a mechanism to extend existing code</li> <li>understand how inheritance models the IS-A relationship</li> <li>know how to use the <code>extends</code> keyword for inheritance</li> <li>understand inheritance as a subtype</li> <li>be able to determine the run-time type and compile-time type of a variable</li> </ul>"},{"location":"11-inheritance.html#extension-with-composition","title":"Extension with Composition","text":"<p>We have seen how composition allows us to compose a new, more complex, class, out of existing classes, without breaking the abstraction barrier of existing classes.  Sometimes, however, composition is not the right approach.  Let's consider the following example.  Let's suppose that we, as a client, want to add color as a property to our <code>Circle</code>.   </p> <p>Without penetrating the abstraction barrier of <code>Circle</code>, we can do the following: <pre><code>// version 0.1 (using composition)\nclass ColoredCircle {\nprivate Circle circle;\nprivate Color color;\n\npublic ColoredCircle(Circle circle, Color color) {\nthis.circle = circle;\nthis.color = color;\n}\n}\n</code></pre></p> <p>where <code>Color</code> is another abstraction representing the color of shapes.</p> <p>What should we do if we want to calculate the area of our colored circle?  Suppose we already have a <code>ColoredCircle</code> instance called <code>coloredCircle</code>. We could make <code>circle</code> public and call <code>coloredCircle.circle.getArea()</code>, or we could add an accessor and call <code>coloredCircle.getCircle().getArea()</code>.  Both of these are not ideal, since it breaks the abstraction barrier and reveals that the <code>ColoredCircle</code> class stores a <code>circle</code> (the latter being slightly better than the first).</p> <p>A better alternative is to let <code>ColoredCircle</code> provide its own <code>getArea()</code> method, and forward its call to <code>Circle</code>.</p> <pre><code>// version 0.2 (using composition)\nclass ColoredCircle {\nprivate Circle circle;\nprivate Color color;\n\npublic ColoredCircle(Circle circle, Color color) {\nthis.circle = circle;\nthis.color = color;\n}\n\npublic double getArea() {\nreturn circle.getArea();\n}\n}\n</code></pre> <p>Then, the client to <code>ColoredCircle</code> can just call <code>coloredCircle.getArea()</code> without knowing or needing to know how a colored circle is represented internally.  The drawback of this approach is that we might end up with many such boilerplate forwarding methods.</p>"},{"location":"11-inheritance.html#extension-with-inheritance","title":"Extension with Inheritance","text":"<p>Recall the concept of subtyping.  We say that \\(S &lt;: T\\) if any piece of code written for type \\(T\\) also works for type \\(S\\).  </p> <p>Now, think about <code>ColoredCircle</code> and <code>Circle</code>.  If someone has written a piece of code that operates on <code>Circle</code> objects.  Do we expect the same code to work on <code>ColoredCircle</code>?  In this example, yes!  A <code>ColoredCircle</code> object should behave just like a circle -- we can calculate its area, circumference, check if two circles intersect, check if a point falls within the circle, etc.  The only difference, or more precisely, extension, is that it has a color, and perhaps has some methods related to this additional field.  So, <code>ColoredCircle</code> is a subtype of <code>Circle</code>.</p> <p>We now show you how we can introduce this subtype relationship in Java, using the <code>extends</code> keyword.  We can reimplement our <code>ColoredCircle</code> class this way:</p> <pre><code>// version 0.3 (using inheritance)\nclass ColoredCircle extends Circle {\nprivate Color color;\n\npublic ColoredCircle(Point center, double radius, Color color) {\nsuper(center, radius);  // call the parent's constructor\nthis.color = color;\n}\n}\n</code></pre> <p>We just created a new type <code>ColoredCircle</code> as a class that extends from <code>Circle</code>.  We call <code>Circle</code> the parent class or superclass of <code>ColoredCircle</code>; and <code>ColoredCircle</code> a subclass of <code>Circle</code>.  </p> <p>We also say that <code>ColoredCircle</code> inherits from <code>Circle</code>, since all the public fields of <code>Circle</code> (center and radius) and public methods (like <code>getArea()</code>) are now accessible to <code>ColoredCircle</code>.  Just like a parent-child relationship in real-life, however, anything private to the parent remains inaccessible to the child.  This privacy veil maintains the abstraction barrier of the parent from the child, and creates a bit of a tricky situation -- technically a child <code>ColoredCircle</code> object has a center and a radius, but it has no access to it!</p> <p>Line 6 of the code above introduces another keyword in Java: <code>super</code>.  Here, we use <code>super</code> to call the constructor of the superclass, to initialize its center and radius (since the child has no direct access to these fields that it inherited).</p> <p>The concept we have shown you is called inheritance and is one of the four pillars of OOP.  We can think of inheritance as a model for the \"is a\" relationship between two entities.</p> <p>With inheritance, we can call <code>coloredCircle.getArea()</code> without knowing or needing to know how a colored circle is represented internally and without forwarding methods.</p>"},{"location":"11-inheritance.html#when-not-to-use-inheritance","title":"When NOT to Use Inheritance","text":"<p>Inheritance tends to get overused.  In practice, we seldom use inheritance.  Let's look at some examples of how not to use inheritance, and why.</p> <p>You may come across examples online or in books that look like the following:</p> <pre><code>class Point {\nprivate double x;\nprivate double y;\n:\n}\n\nclass Circle extends Point {\nprivate double radius;\n:\n}\n\nclass Cylinder extends Circle {\nprivate double height;\n:\n}\n</code></pre> <p>The difference between these implementations and the one you have seen in Unit 9 is that it uses inheritance rather than composition.  </p> <p><code>Circle</code> implemented like the above would have the center coordinate inherited from the parent (so it has three fields, x, y, and radius); <code>Cylinder</code> would have the fields corresponding to a circle, which is its base and height.  In terms of modeling the properties of circle and cylinder, we have all the right properties in the right class.</p> <p>When we start to consider methods encapsulated with each object, things start to break down. Consider a piece of code written as follows: <pre><code>void foo(Circle c, Point p) {\nif (c.contains(p)) {\n// do something\n}\n}\n</code></pre></p> <p>Since <code>Cylinder</code> is a subtype of <code>Point</code> according to the implementation above, the code above should still work also if we replace <code>Point</code> with a <code>Cylinder</code> (according to the semantic of subtyping).   But it gets weird -- what is the meaning of a <code>Circle</code> (in 2D) containing a Cylinder (in 3D)?  We could come up with a convoluted meaning that explains this, but it is likely not what the original implementer of <code>foo</code> expects.</p> <p>The message here is this: Use composition to model a has-a relationship; inheritance for a is-a relationship.  Make sure inheritance preserves the meaning of subtyping.  </p>"},{"location":"11-inheritance.html#run-time-type","title":"Run-Time Type","text":"<p>Recall that Java allows a variable of type \\(T\\) to hold a value from a variable of type \\(S\\) only if \\(S &lt;: T\\).  Since <code>ColoredCircle</code> &lt;: <code>Circle</code>, the following is not allowed in Java: <pre><code>ColoredCircle c = new Circle(p, 0); // error\n</code></pre></p> <p>but this is OK: <pre><code>Circle c = new ColoredCircle(p, 0, blue); // OK\n</code></pre></p> <p>where <code>p</code> is a <code>Point</code> object and <code>blue</code> is a <code>Color</code> object.</p> <p>Also, recall that <code>Circle</code> is called the compile-time type of <code>c</code>.  Here, we see that <code>c</code> is now referencing an object of subtype <code>ColoredCircle</code>.  Since this assignment happens during run-time, we say that the run-time type of <code>c</code> is <code>ColoredCircle</code>.  The distinction between these two types will be important later.</p>"},{"location":"12-overriding.html","title":"Unit 12: Overriding","text":"<p>After reading this unit, students should</p> <ul> <li>be aware that every class inherits from <code>Object</code></li> <li>be familiar with the <code>equals</code> and <code>toString</code> methods</li> <li>understand what constitutes a method signature</li> <li>understand method overriding</li> <li>appreciate the power of method overriding</li> <li>understand what Java annotations are for, and know when to use <code>@Override</code></li> <li>be exposed to the <code>String</code> class and its associated methods, especially the <code>+</code> operator</li> </ul>"},{"location":"12-overriding.html#object-and-string","title":"<code>Object</code> and <code>String</code>","text":"<p>In Java, every class that does not extend another class inherits from the class <code>Object</code> implicitly.  <code>Object</code> is, therefore, the \"ancestor\" of all classes in Java and is at the root of the class hierarchy.</p> <p>The <code>Object</code> class does not encapsulate anything in particular.  It is a very general class that provides useful methods common to all objects.  The two useful ones that we are going to spend time with are:</p> <ul> <li><code>equals(Object obj)</code>, which checks if two objects are equal to each other, and</li> <li><code>toString()</code>, which returns a string representation of the object as a <code>String</code> object.</li> </ul>"},{"location":"12-overriding.html#the-tostring-method","title":"The <code>toString</code> Method","text":"<p>The <code>toString</code> method is very special, as this is invoked implicitly by Java, by default, to convert a reference object to a <code>String</code> object during string concatenation using the operator <code>+</code>.</p> <p>We showed you that in Python, <code>4 + \"Hello\"</code> would result in a type mismatch error.  In Java, however, <code>4 + \"Hello\"</code> will result in the string <code>\"4Hello\"</code>.  In this example, the primitive value 4 is converted to a string before concatenation.</p> <p>A more interesting scenario is what happens if we try to concatenate, say, a <code>Circle</code> object with a string.  Let's say we have: <pre><code>Circle c = new Circle(new Point(0, 0), 4.0);\nString s = \"Circle c is \" + c;\n</code></pre></p> <p>You will see that <code>s</code> now contains the string \"Circle c is Circle@1ce92674 \" (the seemingly gibberish text after @` is the reference to the object and so your result will be different).</p> <p>What happened here is that the <code>+</code> operator sees that one of the operands is a string but the other is not, so it converts the one that is not a string to a string by calling its <code>toString()</code> method automatically for us.  This is equivalent to1 <pre><code>Circle c = new Circle(new Point(0, 0), 4.0);\nString s = \"Circle c is \" + c.toString();\n</code></pre></p> <p>Recall that in our <code>Circle</code> class (up to version 0.5) we do not have any <code>toString</code> method.  The <code>toString</code> method that we invoked here is the <code>toString</code> method inherited from its parent <code>Object</code>.</p> <p><code>jshell</code> and <code>toString</code></p> <p>Recall that <code>jshell</code> is a REPL tool.  After evaluating an expression, <code>jshell</code> prints the resulting value out.  If the resulting value is a reference type, <code>jshell</code> will invoke <code>toString</code> to convert the reference type to a string first, before printing the string.</p>"},{"location":"12-overriding.html#customizing-tostring-for-circle","title":"Customizing <code>toString</code> for <code>Circle</code>","text":"<p>The <code>Object::toString</code> method (that is our notation for the method <code>toString</code> from the class <code>Object</code>) is not very user friendly.  Ideally, when we print a <code>Circle</code> object, say, for debugging, we want to see its center and its radius.  To do so, we can define our own <code>toString</code> method in <code>Circle</code>.  Let's upgrade our <code>Circle</code> class to do this:</p> <pre><code>// version 0.6\nimport java.lang.Math;\n\n/**\n * A Circle object encapsulates a circle on a 2D plane.  \n */\nclass Circle {\nprivate Point c;   // the center\nprivate double r;  // the length of the radius\n\n/**\n   * Create a circle centered on Point c with given radius r\n  */\npublic Circle(Point c, double r) {\nthis.c = c;\nthis.r = r;\n}\n\n/**\n   * Return the area of the circle.\n   */\npublic double getArea() {\nreturn Math.PI * this.r * this.r;\n}\n\n/**\n   * Return true if the given point p is within the circle.\n   */\npublic boolean contains(Point p) {\nreturn false;\n// TODO: Left as an exercise\n}\n\n/**\n   * Return the string representation of this circle.\n   */\n@Override\npublic String toString() {\nreturn \"{ center: \" + this.c + \", radius: \" + this.r + \" }\";\n}\n}\n</code></pre> <p>The body of the method <code>toString</code> simply constructs a string representation for this circle object and returns it.  With this <code>toString</code> implemented, the output will look something like this: <pre><code>Circle c is { center: (0.0, 0.0), radius: 4.0 }\n</code></pre></p> <p>Note that when the center <code>this.c</code> is converted to a string, the <code>toString</code> method of <code>Point</code> is invoked.  We leave the implementation of <code>Point::toString</code> as an exercise.</p>"},{"location":"12-overriding.html#method-overriding","title":"Method Overriding","text":"<p>What we just did is called method overriding in OOP.  Inheritance is not only good for extending the behavior of an existing class but through method overriding, we can alter the behavior of an existing class as well.</p> <p>Let's define the method signature of a method as the method name and the number, type, and order of its parameters, and the method descriptor as the method signature plus the return type. When a subclass defines an instance method with the same method descriptor as an instance method in the parent class, we say that the instance method in the subclass overrides the instance method in the parent class2.  In the example above, <code>Circle::toString</code> has overridden <code>Object::toString</code>.</p>"},{"location":"12-overriding.html#the-override-annotation","title":"The <code>@Override</code> Annotation","text":"<p>Line 37 in the example above contains the symbol <code>@Override</code>.  This symbol is an example of annotation in Java.  An annotation is not part of the program and does not affect the bytecode generated.  Instead, it is a hint to the compiler.  Remember that the compiler is our friend who will do its best to help detect errors early, during compilation.  We must do our part to help the compiler help us.  Here, <code>@Override</code> is a hint to the compiler that the following method, <code>toString</code>, is intended to override the method in the parent class.  In case, there is a typo and overriding is not possible, the compiler will let us know.</p> <p>It is therefore recommended and expected that all overriding methods in your code are annotated with <code>@Override</code>.</p> <p>Using <code>super</code> To Access Overridden Methods</p> <p>After a subclass overrides a method in the superclass, the methods that have been overridden can still be called, with the <code>super</code> keyword. For instance, the following <code>Circle::toString</code> calls <code>Object::toString</code> to prefix the string representation of the circle with <code>Circle@1ce92674</code>. <pre><code>@Override\npublic String toString() {\nreturn super.toString() + \" { center: \" + this.c + \", radius: \" + this.r + \" }\";\n}\n</code></pre></p> <ol> <li> <p>Calling <code>toString</code> explicitly is not wrong, but we usually omit the call to keep the code readable and succinct.\u00a0\u21a9</p> </li> <li> <p>It is possible to override a method in some cases when the return type is different.  We will discuss this during recitations.\u00a0\u21a9</p> </li> </ol>"},{"location":"13-overloading.html","title":"Unit 13: Overloading","text":"<p>After reading this unit, students should</p> <ul> <li>understand what is overloading</li> <li>understand how to create overloaded methods</li> </ul>"},{"location":"13-overloading.html#method-overloading","title":"Method overloading","text":"<p>In the previous unit, we introduced method overriding. That is, when a subclass defines an instance method with the same method descriptor as an instance method in the parent class.</p> <p>In contrast, method overloading is when we have two or more methods in the same class with the same name but a differing method signature1. In other words, we create an overloaded method by changing the type, order, and number of parameters of the method but keeping the method name identical. </p> <p>Lets consider an <code>add</code> method which allows us to add two numbers, and returns the result. What if we would like to create an <code>add</code> method to sum up three numbers?</p> <pre><code>public int add(int x, int y) {\nreturn x + y;\n}\n\npublic int add(int x, int y, int z) {\nreturn x + y;\n}\n</code></pre> <p>In the example above, the methods <code>add(int, int)</code> and <code>add(int, int, int)</code> are overloaded. They have the same name but a different number of parameters. We can see that this allows us to write methods to handle differing inputs. </p> <p>Now lets consider our <code>Circle</code> class again. Our <code>Circle::contains(Point)</code> method allows us to check if a <code>Point</code> is within the radius of the current instance of the <code>Circle</code>. We would like to create a new method <code>Circle::contains(double, double)</code> which will allow us to check if an <code>x</code> and <code>y</code> co-ordinate (another valid representation of a point) is within our circle.</p> <p><pre><code>import java.lang.Math;\n\nclass Circle {\nprivate Point c;   private double r;  public Circle(Point c, double r) {\nthis.c = c;\nthis.r = r;\n}\n\npublic double getArea() {\nreturn Math.PI * this.r * this.r;\n}\n\npublic boolean contains(Point p) {\nreturn false;\n// TODO: Left as an exercise\n}\n\npublic boolean contains(double x, double y) {\nreturn false;\n// TODO: Left as an exercise\n}\n\n@Override\npublic String toString() {\nreturn \"{ center: \" + this.c + \", radius: \" + this.r + \" }\";\n}\n}\n</code></pre> In the above example, <code>Circle::contains(Point)</code> and <code>Circle::contains(double, double)</code> are overloaded methods. </p> <p>Recall that overloading requires changing the order, number, and/or type of parameters and says nothing about the names of the parameters. Consider the example below, where we have two <code>contains</code> methods in which we swap parameter names. </p> <pre><code>  public boolean contains(double x, double y) {\nreturn false;\n// TODO: Left as an exercise\n}\n\npublic boolean contains(double y, double x) {\nreturn false;\n// TODO: Left as an exercise\n}\n</code></pre> <p>These two methods have the same method signature, and therefore <code>contains(double, double)</code> and <code>contains(double, double)</code> are not distinct methods. They are not overloaded, and therefore this above example will not compile.</p> <p>As it is also a method, it is possible to overload the class constructor as well. As in the example below, we can see an overloaded constructor which gives us a handy way to instantiate a <code>Circle</code> object that is the unit circle.</p> <pre><code>class Circle {\nprivate Point c; private double r;\n\npublic Circle(Point c, double r) {\nthis.c = c;\nthis.r = r;\n}\n\n// Overloaded constructor\npublic Circle() {\nthis.c = new Point(0, 0);\nthis.r = 1;\n}\n:\n}\n</code></pre> <pre><code>// c1 points to a new Circle object with a centre (1, 1) and a radius of 2\nCircle c1 = new Circle(new Point(1, 1), 2); // c2 points to a new Circle object with a centre (0, 0) and a radius of 1\nCircle c2 = new Circle();\n</code></pre> <p>It is also possible to overload <code>static</code> class methods in the same way as instance methods. In the next unit, we will see how Java chooses which method implementation to execute when a method is invoked.</p> <ol> <li> <p>Note that this is not the same as the method descriptor. You can not overload a method by changing the return type.\u00a0\u21a9</p> </li> </ol>"},{"location":"14-polymorphism.html","title":"Unit 14: Polymorphism","text":"<p>After reading this unit, students should</p> <ul> <li>understand dynamic binding and polymorphism</li> <li>be aware of the <code>equals</code> method and the need to override it to customize the equality test</li> <li>understand when narrowing type conversion and type casting are allowed</li> </ul>"},{"location":"14-polymorphism.html#taking-on-many-forms","title":"Taking on Many Forms","text":"<p>Method overriding enables polymorphism, the fourth and the last pillar of OOP, and arguably the most powerful one.  It allows us to change how existing code behaves, without changing a single line of the existing code (or even having access to the code).</p> <p>Consider the function <code>say</code> below: <pre><code>void say(Object obj) {\nSystem.out.println(\"Hi, I am \" + obj.toString());\n}\n</code></pre></p> <p>Note that this method receives an <code>Object</code> instance.  Since both <code>Point</code> &lt;: <code>Object</code> and <code>Circle</code> &lt;: <code>Object</code>, we can do the following: <pre><code>Point p = new Point(0, 0);\nsay(p);\nCircle c = new Circle(p, 4);\nsay(c);\n</code></pre></p> <p>When executed, <code>say</code> will first print <code>Hi, I am (0.0, 0.0)</code>, followed by <code>Hi, I am { center: (0.0, 0.0), radius: 4.0 }</code>.  We are invoking the overriding <code>Point::toString</code> in the first call, and <code>Circle::toString</code> in the second call.  The same method invocation <code>obj.toString()</code> causes two different methods to be called in two separate invocations!</p> <p>In biology, polymorphism means that an organism can have many different forms.  Here, the variable <code>obj</code> can have many forms as well.  Which method is invoked is decided during run-time, depending on the run-time type of the <code>obj</code>.  This is called dynamic binding or late binding or dynamic dispatch.</p> <p>Before we get into this in more detail, let consider overriding <code>Object::equals</code>.</p>"},{"location":"14-polymorphism.html#the-equals-method","title":"The <code>equals</code> method","text":"<p><code>Object::equals</code> compares if two object references refer to the same object.  Suppose we have:</p> <pre><code>Circle c0 = new Circle(new Point(0, 0), 10);\nCircle c1 = new Circle(new Point(0, 0), 10);\nCircle c2 = c1;\n</code></pre> <p><code>c2.equals(c1)</code> returns <code>true</code>, but <code>c0.equals(c1)</code> returns <code>false</code>.  Even though <code>c0</code> and <code>c1</code> are semantically the same, they refer to the two different objects.</p> <p>To compare if two circles are semantically the same, we need to override this method1.  </p> <pre><code>// version 0.7\nimport java.lang.Math;\n\n/**\n * A Circle object encapsulates a circle on a 2D plane.  \n */\nclass Circle {\nprivate Point c;   // the center\nprivate double r;  // the length of the radius\n\n/**\n   * Create a circle centered on Point c with given radius r\n  */\npublic Circle(Point c, double r) {\nthis.c = c;\nthis.r = r;\n}\n\n/**\n   * Return the area of the circle.\n   */\npublic double getArea() {\nreturn Math.PI * this.r * this.r;\n}\n\n/**\n   * Return true if the given point p is within the circle.\n   */\npublic boolean contains(Point p) {\nreturn false;\n// TODO: Left as an exercise\n}\n\n/**\n   * Return the string representation of this circle.\n   */\n@Override\npublic String toString() {\nreturn \"{ center: \" + this.c + \", radius: \" + this.r + \" }\";\n}\n\n/**\n   * Return true the object is the same circle (i.e., same center, same radius).\n   */\n@Override\npublic boolean equals(Object obj) {\nif (obj instanceof Circle) {\nCircle circle = (Circle) obj;\nreturn (circle.c.equals(this.c) &amp;&amp; circle.r == this.r);\n}\nreturn false;\n}\n}\n</code></pre> <p>This is more complicated than <code>toString</code>.  There are a few new concepts involved here:</p> <ul> <li><code>equals</code> takes in a parameter of compile-time type <code>Object</code>.  It only makes sense if we compare (during run-time) a circle with another circle.  So, we first check if the run-time type of <code>obj</code> is a subtype of <code>Circle</code>.  This is done using the <code>instanceof</code> operator.  The operator returns <code>true</code> if <code>obj</code> has a run-time type that is a subtype of <code>Circle</code>.</li> <li>To compare <code>this</code> circle with the given circle, we have to access the center <code>c</code> and radius <code>r</code>.  But if we access <code>obj.c</code> or <code>obj.r</code>, the compiler will complain.  As far as the compiler is concerned, <code>obj</code> has the compile-time type <code>Object</code>, and there is no such fields <code>c</code> and <code>r</code> in the class <code>Object</code>!  This is why, after assuring that the run-time type of <code>obj</code> is a subtype of <code>Circle</code>, we assign <code>obj</code> to another variable <code>circle</code> that has the compile-time type <code>Circle</code>.  We finally check if the two centers are equal (again, <code>Point::equals</code> is left as an exercise) and the two radii are equal2.</li> <li>The statement that assigns <code>obj</code> to <code>circle</code> involves type casting.  We mentioned before that Java is strongly typed and so it is very strict about type conversion.  Here, Java allows type casting from type \\(T\\) to \\(S\\) if \\(S &lt;: T\\). 3: This is called narrowing type conversion.  Unlike widening type conversion, which is always allowed and always correct, a narrowing type conversion requires explicit typecasting and validation during run-time.  If we do not ensure that <code>obj</code> has the correct run-time type, casting can lead to a run-time error (which if you recall, is bad).</li> </ul> <p>All these complications would go away, however, if we define <code>Circle::equals</code> to take in a <code>Circle</code> as a parameter, like this:</p> <pre><code>class Circle {\n:\n/**\n   * Return true the object is the same circle (i.e., same center, same radius).\n   */\n@Override\npublic boolean equals(Circle circle) {\nreturn (circle.c.equals(this.c) &amp;&amp; circle.r == this.r);\n}\n}\n</code></pre> <p>This version of <code>equals</code> however, does not override <code>Object::equals</code>.  Since we hinted to the compiler that we meant this to be an overriding method, using <code>@Override</code>, the compiler will give us an error.  This is not treated as method overriding, since the signature for <code>Circle::equals</code> is different from <code>Object::equals</code>.</p> <p>Why then is overriding important?  Why not just leave out the line <code>@Override</code> and live with the non-overriding, one-line, <code>equals</code> method above?</p>"},{"location":"14-polymorphism.html#the-power-of-polymorphism","title":"The Power of Polymorphism","text":"<p>Let's consider the following example.  Suppose we have a general <code>contains</code> method that takes in an array of objects.  The array can store any type of objects: <code>Circle</code>, <code>Square</code>, <code>Rectangle</code>, <code>Point</code>, <code>String</code>, etc.  The method <code>contains</code> also takes in a target <code>obj</code> to search for, and returns true if there is an object in <code>array</code> that equals to <code>obj</code>.</p> <pre><code>// version 0.1 (with polymorphism)\nboolean contains(Object[] array, Object obj) {\nfor (Object curr : array) {\nif (curr.equals(obj)) {\nreturn true;\n}\n}\nreturn false;\n}\n</code></pre> <p>With overriding and polymorphism, the magic happens in Line 4 -- depending on the run-time type of <code>curr</code>, the corresponding, customized version of <code>equals</code> is called to compare against <code>obj</code>.  </p> <p>However, if <code>Circle::equals</code> takes in a <code>Circle</code> as the parameter, the call to <code>equals</code> inside the method <code>contains</code> would not invoke <code>Circle::equals</code>.  It would invoke <code>Object::equals</code> instead due to the matching method signature, and we can't search for <code>Circle</code> based on semantic equality.  </p> <p>To have a generic <code>contains</code> method without polymorphism and overriding, we will have to do something like this: <pre><code>// version 0.2 (without polymorphism)\nboolean contains(Object[] array, Object obj) {\nfor (Object curr : array) {\nif (obj instanceof Circle) {\nif (curr.equals((Circle)obj)) {\nreturn true;\n}\n} else if (obj instanceof Square) {\nif (curr.equals((Square)obj)) {\nreturn true;\n}\n} else if (obj instanceof Point) {\nif (curr.equals((Point)obj)) {\nreturn true;\n}\n}\n:\n}\nreturn false;\n}\n</code></pre></p> <p>which is not scalable since every time we add a new class, we have to come back to this method and add a new branch to the <code>if-else</code> statement!</p> <p>As this example has shown, polymorphism allows us to write succinct code that is future proof.  By dynamically deciding which method implementation to execute during run-time, the implementer can write short yet very general code that works for existing classes as well as new classes that might be added in the future by the client, without even the need to re-compile!</p> <ol> <li> <p>If we override <code>equals()</code>, we should generally override <code>hashCode()</code> as well, but let's leave that for another lesson on another day.\u00a0\u21a9</p> </li> <li> <p>The right way to compare two floating-point numbers is to take their absolute difference and check if the difference is small enough.  We are sloppy here to keep the already complicated code a bit simpler.  You shouldn't do this in your code.\u00a0\u21a9</p> </li> <li> <p>This is not the only condition where type casting is allowed. We will look at other conditions in later units.\u00a0\u21a9</p> </li> </ol>"},{"location":"15-dynamic-binding.html","title":"Unit 15: Method Invocation","text":"<p>After this unit, the student should:</p> <ul> <li>understand the two step process that Java uses to determine which method implementation will be executed when a method is invoked</li> <li>understand that Class Methods do not support dynamic binding</li> </ul>"},{"location":"15-dynamic-binding.html#how-does-dynamic-binding-work","title":"How does Dynamic Binding work?","text":"<p>We have seen that, with the power of dynamic binding and polymorphism, we can write succinct, future-proof code.  Recall that example below, where the magic happens in Line 4.  The method invocation <code>curr.equals(obj)</code> will call the corresponding implementation of the <code>equals</code> method depending on the run-time type of <code>curr</code>.</p> <pre><code>// version 0.1 (with polymorphism)\nboolean contains(Object[] array, Object obj) {\nfor (Object curr : array) {\nif (curr.equals(obj)) {\nreturn true;\n}\n}\nreturn false;\n}\n</code></pre> <p>How does dynamic binding work?  To be more precise, when the method <code>equals</code> is invoked on the target <code>curr</code>, how does Java decide which method implementation is this invocation bound to?  While we have alluded to the fact that the run-time type of the target <code>curr</code> plays a role, this is not the entire story.  Recall that we may have multiple versions of <code>equals</code> due to overloading.  So, Java also needs to decide, among the overloaded <code>equals</code>, which version of <code>equals</code> this particular invocation is bound to.</p> <p>This unit elaborates on Java's decision process to resolve which method implemented in which class should be executed when a method is invoked.  This process is a two-step process.  The first occurs during compilation; the second during run time.</p>"},{"location":"15-dynamic-binding.html#during-compile-time","title":"During Compile Time","text":"<p>During compilation, Java determines the method descriptor of the method invoked, using the compile-time type of the target.</p> <p>For example, in the line <pre><code>curr.equals(obj)\n</code></pre> above, the target <code>curr</code> has the compile-time type <code>Object</code>.</p> <p>Let's generalize the compile-time type of the target to \\(C\\).  To determine the method descriptor, the compiler searches for all methods that can be correctly invoked on the given argument.</p> <p>In the example above, we look at the class <code>Object</code>, and there is only one method called <code>equals</code>.  The method can be correctly invoked with one argument of type <code>Object</code>.</p> <p>What if there are multiple methods that can correctly accept the argument?  In this case, we choose the most specific one.  Intuitively, a method \\(M\\) is more specific than method \\(N\\) if the arguments to \\(M\\) can be passed to \\(N\\) without compilation error.  For example, let's say a class <code>Circle</code> implements: <pre><code>     boolean equals(Circle c) { .. }\n\n     @Override\n     boolean equals(Object c) { .. }\n</code></pre> Then, <code>equals(Circle)</code> is more specific than <code>equals(Object)</code>.  Every <code>Circle</code> is an <code>Object</code>, but not every <code>Object</code> is a <code>Circle</code>.</p> <p>Once the method is determined, the method's descriptor (return type and signature) is stored in the generated code.</p> <p>In the example above, the method descriptor <code>boolean equals(Object)</code> will be stored in the generated binaries.  Note that it does not include information about the class that implements this method.  The class to take this method implementation from will be determined in Step 2 during run-time.</p>"},{"location":"15-dynamic-binding.html#during-run-time","title":"During Run Time","text":"<p>During execution, when a method is invoked, the method descriptor from Step 1 is first retrieved.  Then, the run-time type of the target is determined.  Let the run-time type of the target be \\(R\\).  Java then looks for an accessible method with the matching descriptor in \\(R\\).  If no such method is found, the search will continue up the class hierarchy, first to the parent class of \\(R\\), then to the grand-parent class of \\(R\\), and so on, until we reach the root <code>Object</code>.  The first method implementation with a matching method descriptor found will be the one executed.</p> <p>For example, let's consider again the invocation in the highlighted line below again:</p> <pre><code>// version 0.1 (with polymorphism)\nboolean contains(Object[] array, Object obj) {\nfor (Object curr : array) {\nif (curr.equals(obj)) {\nreturn true;\n}\n}\nreturn false;\n}\n</code></pre> <p>Let's say that <code>curr</code> points to a <code>Circle</code> object during run-time.  Suppose that the <code>Circle</code> class does not override the method <code>equals</code> in <code>Object</code>.  As a result, Java can't find a matching method descriptor <code>boolean equals(Object)</code> in the method <code>Circle</code>.  It then looks for the method in the parent of <code>Circle</code>, which is the class <code>Object</code>.  It finds the method <code>Object::equals(Object)</code> with a matching descriptor.  Thus, the method <code>Object::equals(Object)</code> is executed.</p> <p>Now, suppose that <code>Circle</code> overrides the method <code>Object::equals(Object)</code> with its own <code>Circle::equals(Object)</code> method.  Since Java starts searching from the class <code>Circle</code>, it finds the method <code>Circle::equals(Object)</code> that matches the descriptor.  In this case, <code>curr.target(obj)</code> will invoke the method <code>Circle::equals(Object)</code> instead.</p>"},{"location":"15-dynamic-binding.html#invocation-of-class-methods","title":"Invocation of Class Methods","text":"<p>The description above applies to instance methods.  Class methods, on the other hand, do not support dynamic binding.  The method to invoke is resolved statically during compile time.  The same process in Step 1 is taken, but the corresponding method implementation in class \\(C\\) will always be executed during run-time, without considering the run-time type of the target.</p>"},{"location":"16-lsp.html","title":"Unit 16: Liskov Substitution Principle","text":"<p>After this unit, the student should:</p> <ul> <li>understand the type of bugs that reckless developers can introduce when using inheritance and polymorphism</li> <li>understand the Liskov Substitution Principle and thus be aware that not all IS-A relationships should be modeled with inheritance</li> <li>know how to explicitly disallow inheritance when writing a class or disallow overriding with the <code>final</code> keyword</li> </ul>"},{"location":"16-lsp.html#the-responsibility-when-using-inheritance","title":"The Responsibility When Using Inheritance","text":"<p>As you have seen in Unit 14, polymorphism is a powerful tool that allows a client to change the behavior of existing code written by the implementer, behind the abstraction barrier.</p> <p>As Ben Parker (aka Uncle Ben) said, \"With great power, comes great responsibility.\"   The client must use overriding and inheritance carefully.  Since they can affect how existing code behaves, they can easily break existing code and introduce bugs.  Since the client may not have access to the existing code behind the abstraction barrier, it is often tricky to trace and debug.  Furthermore, the implementer would not appreciate it if their code was working perfectly until one day, someone overriding a method causes their code to fail, even without the implementer changing anything in their code.</p> <p>Ensuring this responsibility cannot be done by the compiler, unfortunately. It thus becomes a developer's responsibility to ensure that any inheritance with method overriding does not introduce bugs to existing code.  This brings us to the Liskov Substitution Principle (LSP), which says: \"Let \\(\\phi(x)\\) be a property provable about objects \\(x\\) of type \\(T\\). Then \\(\\phi(y)\\) should be true for objects \\(y\\) of type \\(S\\) where \\(S &lt;: T\\).\"   </p> <p>This is consistent with the definition of subtyping, \\(S &lt;: T\\), but spelled out more formally.</p> <p>Let's consider the following example method, <code>Module::marksToGrade</code>, which takes in the marks of a student and returns the grade 'A', 'B', 'C', or 'F' as a <code>char</code>.  How <code>Module::marksToGrade</code> is implemented is not important.  Let's look at how it is used.</p> <pre><code>void displayGrade(Module m, double marks) {\nchar grade = m.marksToGrade(marks);\nif (grade == 'A')) {\nSystem.out.println(\"well done\");\nelse if (grade == 'B') {\nSystem.out.println(\"good\");\nelse if (grade == 'C') {\nSystem.out.println(\"ok\");\n} else {\nSystem.out.println(\"retake again\");\n}\n}\n</code></pre> <p>Now, suppose that one day, someone comes along and create a new class <code>CSCUModule</code> that inherits from <code>Module</code>, and overrides <code>marksToGrade</code> s that it now returns only 'S' and 'U'.  Since <code>CSCUModule</code> is a subclass of <code>Module</code>, we can pass an instance to <code>displayGrade</code>:</p> <pre><code>displayGrade(new CSCUModule(\"GEQ1000\", 100));\n</code></pre> <p>and suddenly <code>displayGrade</code> is displaying <code>retake again</code> even if the student is scoring 100 marks.</p> <p>We are violating the LSP here.  The object <code>m</code> has the following property: <code>m.marksToGrade</code> always returns something from the set { <code>'A'</code>, <code>'B'</code>, <code>'C'</code>, <code>'F'</code> }, that the method <code>displayGrade</code> depends on explicitly.  The subclass <code>CSCUModule</code> violated that and makes <code>m.marksToGrade</code> returns <code>'S'</code> or <code>'U'</code>, sabotaging <code>displayGrade</code> and causing it to fail.</p> <p>LSP cannot be enforced by the compiler1. The properties of an object have to be managed and agreed upon among programmers.  A common way is to document these properties as part of the code documentation.</p>"},{"location":"16-lsp.html#lsp-through-the-lens-of-testing","title":"LSP Through the Lens of Testing","text":"<p>Another way to develop an intuition of the LSP is through the lens of testing. When we write a method, we may want to introduce test cases to check that our method is working correctly. These test cases are designed based on the specification of our method and not its implementation details2. That is, we test based on the expected inputs and resultant outputs.</p> <p>Let's look at an example. We would like to model a restaurant booking system for a restaurant chain. Consider the following <code>Restaurant</code> class.  Every restaurant in the chain opens at 12 pm and closes at 10 pm, and has a singular method <code>canMakeReservation</code> which allows us to check if the restaurant is available for reservations at a certain <code>time</code>.  The requirement given is that, the system must be able to process a reservation during its opening hours.</p> <pre><code>public class Restaurant {\npublic static final int OPENING_HOUR = 1200;\npublic static final int CLOSING_HOUR = 2200;\n\npublic boolean canMakeReservation(int time) {\nif (time &lt;= CLOSING_HOUR &amp;&amp; time &gt;= OPENING_HOUR) {\nreturn true;\n}\nreturn false;\n}\n}\n</code></pre> <p>The method <code>canMakeReservation</code> returns <code>true</code> when the argument passed in to <code>time</code> is between 12 pm and 10 pm. Let's think about how we would test this method.  Two important edge cases to test is to check if the method returns true for the stated restaurant opening and closing hours.</p> <pre><code>Restaurant r = new Restaurant();\nr.canMakeReservation(1200) == true; // Is true, therefore test passes\nr.canMakeReservation(2200) == true; // Is true, therefore test passes\n</code></pre> <p>Note that these are simple <code>jshell</code> tests, in software engineering modules you will learn better ways to design and formalise these tests.</p> <p>We can now rephrase our LSP in terms of testing. A subclass should not break the expectations set by the superclass. If a class <code>B</code> is substitutable for a parent class <code>A</code> then it should be able to pass all test cases of the parent class <code>A</code>. If it does not, then it is not substitutable and the LSP is violated. </p> <p>Lets now consider two subclasses of <code>Restaurant</code>, <code>LunchRestaurant</code> and <code>DigitalReadyRestaurant</code>. Our <code>LunchRestaurant</code> does not take reservations during peak hours (12 to 2 pm).</p> <p><pre><code>public class LunchRestaurant extends Restaurant {\nprivate final int peakHourStart = 1200;\nprivate final int peakHourEnd = 1400;\n\n@Override\npublic boolean canMakeReservation(int time) {\nif (time &lt;= peakHourEnd &amp;&amp; time &gt;= peakHourStart) {\nreturn false;\n} else if (time &lt;= CLOSING_HOUR &amp;&amp; time &gt;= OPENING_HOUR) {\nreturn true;\n}\nreturn false;\n}\n}\n</code></pre> As <code>LunchRestaurant</code> \\(&lt;:\\) <code>Restaurant</code>, we can point our variable <code>r</code> to a new instance of <code>LunchRestaurant</code> and run the test cases of the parent class, as can be seen in the code below.</p> <pre><code>Restaurant r = new LunchRestaurant();\nr.canMakeReservation(1200) == true; // Is false, therefore test fails\nr.canMakeReservation(2200) == true; // Is true, therefore test passes\n</code></pre> <p>Whilst the second test passes, the first test does not since it falls within the peak lunch hour.  Therefore <code>LunchRestaurant</code> is not substitutable for <code>Restaurant</code> and the LSP is violated.  We have changed the expectation of the method in the child class.</p> <p>Let's suppose the restaurant chain starts to roll out online reservation system for a subset of its restaurants.  These restaurants can take reservations any time.   We create a subclass <code>DigitalReadyRestaurant</code>, as follows:</p> <p><pre><code>public class DigitalReadyRestaurant extends Restaurant {\n\n@Override\npublic boolean canMakeReservation(int time) {\nreturn true;\n}\n}\n</code></pre> Similarly, as <code>DigitalReadyRestaurant</code> \\(&lt;:\\) <code>Restaurant</code>, we can point our variable <code>r</code> to a new instance of <code>DigitalReadyRestaurant</code> and run the test cases of the parent class, as can be seen in the code below.</p> <pre><code>Restaurant r = new DigitalReadyRestaurant();\nr.canMakeReservation(1200) == true; // Is true, therefore test passes\nr.canMakeReservation(2200) == true; // Is true, therefore test passes\n</code></pre> <p>Both test cases pass.  In fact, all test cases that pass for <code>Restaurant</code> would pass for <code>DigitalReadyRestaurant</code>.  Therefore <code>DigitalReadyRestaurant</code> is substitutable for <code>Restaurant</code>. Anywhere we can use an object of type <code>Restaurant</code>, we can use <code>DigitalReadyRestaurant</code> without breaking any previously written code.</p>"},{"location":"16-lsp.html#preventing-inheritance-and-method-overriding","title":"Preventing Inheritance and Method Overriding","text":"<p>Sometimes, it is useful for a developer to explicitly prevent a class to be inherited.  Not allowing inheritance would make it much easier to argue for the correctness of programs, something that is important when it comes to writing secure programs.  Both the two java classes you have seen, <code>java.lang.Math</code> and <code>java.lang.String</code>, cannot be inherited from.  In Java, we use the keyword <code>final</code> when declaring a class to tell Java that we ban this class from being inherited.</p> <pre><code>final class Circle {\n:\n}\n</code></pre> <p>Alternatively, we can allow inheritance but still prevent a specific method from being overridden, by declaring a method as <code>final</code>.  Usually, we do this on methods that are critical for the correctness of the class.</p> <p>For instance, <pre><code>class Circle {\n:\npublic final boolean contains(Point p) {\n:\n}\n}\n</code></pre></p> <ol> <li> <p>We can use <code>assert</code> to check some of the properties though.\u00a0\u21a9</p> </li> <li> <p>The test cases we are describing here are known as black-box tests and you will encounter these in later modules at NUS. We will not go into any further details in this module.\u00a0\u21a9</p> </li> </ol>"},{"location":"17-abstract.html","title":"Unit 17: Abstract Class","text":"<p>After this lecture, students should:</p> <ul> <li>be familiar with the concept of an abstract class</li> <li>know the use of the Java keyword <code>abstract</code> and the constraints that come with it</li> <li>understand the usefulness of defining and using an abstract class</li> <li>understand what makes a class concrete</li> </ul>"},{"location":"17-abstract.html#high-level-abstraction","title":"High-Level Abstraction","text":"<p>Recall that the concept of abstraction involves hiding away unnecessary complexity and details so that programmers do not have to bogged down with the nitty-gritty.  </p> <p>When we code, we should, as much as possible, try to work with the higher-level abstraction, rather than the detailed version.  Following this principle would allow us to write code that is general and extensible, by taking full advantage of inheritance and polymorphism.</p> <p>Take the following example which you have seen, <pre><code>// version 0.1 (with polymorphism)\nboolean contains(Object[] array, Object obj) {\nfor (Object curr : array) {\nif (curr.equals(obj)) {\nreturn true;\n}\n}\nreturn false;\n}\n</code></pre></p> <p>The function above is very general.  We do not assume and do not need to know, about the details of the items being stored or search.  All we required is that the <code>equals</code> method compared if two objects are equal.</p> <p>In contrast, someone whose mind focuses on finding a circle, might write something like this: <pre><code>// version 0.3 (for Circle)\nboolean contains(Circle[] array, Circle circle) {\nfor (Circle curr : array) {\nif (curr.equals(circle)) {\nreturn true;\n}\n}\nreturn false;\n}\n</code></pre> which serves the purpose, but is not general enough.  The only method used is <code>equals</code>, which <code>Circle</code> inherits/overrides from <code>Object</code> so that using <code>Circle</code> for this function is too constraining.  We can reuse this for any other subclasses of Circle, but not other classes.</p>"},{"location":"17-abstract.html#abstracting-circles","title":"Abstracting Circles","text":"<p>Now, let's consider the following function, which finds the largest area among the circles in a given array:</p> <pre><code>// version 0.1\ndouble findLargest(Circle[] array) {\ndouble maxArea = 0;\nfor (Circle curr : array) {\ndouble area = curr.getArea();\nif (area &gt; maxArea) {\nmaxArea = area;\n}\n}\nreturn maxArea;\n}\n</code></pre> <p><code>findLargest</code> suffers from the same specificity as the version 0.3 of <code>contains</code>.  It only works for <code>Circle</code> and its subclasses only.  Can we make this more general?  We cannot replace <code>Circle</code> with <code>Object</code>, <pre><code>// version 0.2\ndouble findLargest(Object[] array) {\ndouble maxArea = 0;\nfor (Object curr : array) {\ndouble area = curr.getArea();\nif (area &gt; maxArea) {\nmaxArea = area;\n}\n}\nreturn maxArea;\n}\n</code></pre> since <code>getArea</code> is not defined for a generic object (e.g., what does <code>getArea</code> of a string mean?).  </p> <p>To allow us to apply <code>findLargest</code> to a more generic object, we have to create a new type -- something more specific than <code>Object</code> that supports <code>getArea()</code>, yet more general than <code>Circle</code>.</p>"},{"location":"17-abstract.html#shape","title":"Shape","text":"<p>Let's create a new class called <code>Shape</code>, and redefine our <code>Circle</code> class as a subclass of <code>Shape</code>. We can now create other shapes, <code>Square</code>, <code>Rectangle</code>, <code>Triangle</code>, etc, and define the <code>getArea</code> method for each of them.</p> <p>With the new <code>Shape</code> class, we can rewrite <code>findLargest</code> as: <pre><code>// version 0.3\ndouble findLargest(Shape[] array) {\ndouble maxArea = 0;\nfor (Shape curr : array) {\ndouble area = curr.getArea();\nif (area &gt; maxArea) {\nmaxArea = area;\n}\n}\nreturn maxShape;\n}\n</code></pre></p> <p>which now not only works for an array of <code>Square</code>, <code>Rectangle</code>, <code>Circle</code>, etc but also an array containing multiple shapes!</p> <p>Let's actually write out our new <code>Shape</code> class: <pre><code>class Shape {\npublic double getArea() {\n// ?\n}\n}\n</code></pre></p> <p>and rewrite our <code>Circle</code>: <pre><code>// version 0.8\nimport java.lang.Math;\n\n/**\n * A Circle object encapsulates a circle on a 2D plane.  \n */\nclass Circle extends Shape {\nprivate Point c;   // the center\nprivate double r;  // the length of the radius\n\n/**\n   * Create a circle centered on Point c with given radius r\n  */\npublic Circle(Point c, double r) {\nthis.c = c;\nthis.r = r;\n}\n\n/**\n   * Return the area of the circle.\n   */\n@Override\npublic double getArea() {\nreturn Math.PI * this.r * this.r;\n}\n\n/**\n   * Return true if the given point p is within the circle.\n   */\npublic boolean contains(Point p) {\n// TODO: Left as an exercise\nreturn false;\n}\n\n/**\n   * Return the string representation of this circle.\n   */\n@Override\npublic String toString() {\nreturn \"{ center: \" + this.c + \", radius: \" + this.r + \" }\";\n}\n\n/**\n   * Return true the object is the same circle (i.e., same center, same radius).\n   */\n@Override\npublic boolean equals(Object obj) {\nif (obj instanceof Circle) {\nCircle circle = (Circle) obj;\nreturn (circle.c.equals(this.c) &amp;&amp; circle.r == this.r);\n}\n}\n}\n</code></pre></p> <p>Notably, since our <code>Shape</code> is a highly abstract entity, it does not have any fields.  One question that arises is, how are we going to write <code>Shape::getArea()</code>?   We cannot compute the area of a shape unless we know what sort of shape it is.  </p> <p>One solution is make <code>Shape::getArea()</code> returns 0. <pre><code>class Shape {\npublic double getArea() {\nreturn 0;\n}\n}\n</code></pre></p> <p>This is not ideal.  It is easy for someone to inherit from <code>Shape</code>, but forget to override <code>getArea()</code>.  If this happens, then the subclass will have an area of 0.  Bugs ensue.</p> <p>As we usually do in CS2030S, we want to exploit programming language constructs and the compiler to check and catch such errors for us.</p>"},{"location":"17-abstract.html#abstract-methods-and-classes","title":"Abstract Methods and Classes","text":"<p>This brings us to the concept of abstract classes.  An abstract class in Java is a class that has been made into something so general that it cannot and should not be instantiated.  Usually, this means that one or more of its instance methods cannot be implemented without further details.</p> <p>The <code>Shape</code> class above makes a good abstract class since we do not have enough details to implement <code>Shape::getArea</code>.</p> <p>To declare an abstract class in Java, we add the <code>abstract</code> keyword to the <code>class</code> declaration.  To make a method abstract, we add the keyword <code>abstract</code> when we declare the method.  </p> <p>An <code>abstract</code> method cannot be implemented and therefore should not have any method body.</p> <p>This is how we implement <code>Shape</code> as an abstract class. <pre><code>abstract class Shape {\nabstract public double getArea();\n}\n</code></pre></p> <p>An abstract class cannot be instantiated.  Any attempt to do so, such as: <pre><code>Shape s = new Shape();\n</code></pre></p> <p>would result in an error.</p> <p>Note that our simple example of <code>Shape</code> only encapsulates one abstract method.  An abstract class can contain multiple fields and multiple methods.  Not all the methods have to be abstract.  As long as one of them is abstract, the class becomes abstract.  </p> <p>To illustrate this, consider <pre><code>abstract class Shape {\nprivate int numOfAxesOfSymmetry ;\n\npublic boolean isSymmetric() {\nreturn numOfAxesOfSymmetry &gt; 0;\n}\n\nabstract public double getArea();\n}\n</code></pre></p> <p><code>Shape::isSymmetric</code> is a concrete method but the class is still abstract since <code>Shape::getArea()</code> is abstract.</p>"},{"location":"17-abstract.html#concrete-classes","title":"Concrete Classes","text":"<p>We call a class that is not abstract as a concrete class.  A concrete class cannot have any abstract method.  Thus, any subclass of <code>Shape</code> must override <code>getArea()</code> to supply its own implementation.</p>"},{"location":"18-interface.html","title":"Unit 18: Interface","text":"<p>After taking this unit, students should:</p> <ul> <li>understand interface as a type for modeling \"can do\" behavior</li> <li>understand the subtype-supertype relationship between a class and its interfaces</li> </ul>"},{"location":"18-interface.html#modeling-behavior","title":"Modeling Behavior","text":"<p>We have seen how we can write our program using superclasses (including abstract ones) to make our code more general and flexible.  In this unit, we will kick this up one more notch and try to write something even more general, through another abstraction.</p> <p>Let's reexamine this method again: <pre><code>// version 0.3\ndouble findLargest(Shape[] array) {\ndouble maxArea = 0;\nfor (Shape curr : array) {\ndouble area = curr.getArea();\nif (area &gt; maxArea) {\nmaxArea = area;\n}\n}\nreturn maxArea;\n}\n</code></pre></p> <p>Note that all that is required for this method to work, is that the type of objects in <code>array</code> supports a <code>getArea</code> method.  While <code>Shape</code> that we defined in the previous unit meets this requirement, it does not have to be.  We could pass in an array of countries or an array of HDB flats.  It is unnatural to model a <code>Country</code> or a <code>Flat</code> as a subclass of <code>Shape</code> (recall inheritance models the IS-A relationship).</p> <p>To resolve this, we will look at an abstraction that models what can an entity do, possibly across different class hierarchies.</p>"},{"location":"18-interface.html#interface","title":"Interface","text":"<p>The abstraction to do this is called an interface.  An interface is also a type and is declared with the keyword <code>interface</code>.</p> <p>Since an interface models what an entity can do, the name usually ends with the -able suffix1 .</p> <p>Suppose we want to create a type that supports the<code>getArea()</code> method, be it a shape, a geographical region, or a real estate property.  Let's call it <code>GetAreable</code>: <pre><code>interface GetAreable {\npublic abstract double getArea();\n}\n</code></pre></p> <p>All methods declared in an interface are <code>public abstract</code> by default.  We could also just write: <pre><code>interface GetAreable {\ndouble getArea();\n}\n</code></pre></p> <p>Now, for every class that we wish to be able to call <code>getArea()</code> on, we tell Java that the class <code>implements</code> that particular interface.</p> <p>For instance, <pre><code>abstract class Shape implements GetAreable {\nprivate int numOfAxesOfSymmetry ;\n\npublic boolean isSymmetric() {\nreturn numOfAxesOfSymmetry &gt; 0;\n}\n}\n</code></pre></p> <p>The <code>Shape</code> class will now have a <code>public abstract double getArea()</code> thanks to it implementing the <code>GetAreable</code> interface.</p> <p>We can have a concrete class implementing an interface too.</p> <pre><code>class Flat extends RealEstate implements GetAreable {\nprivate int numOfRooms;\nprivate String block;\nprivate String street;\nprivate int floor;\nprivate int unit;\n\n@Override\npublic double getArea() {\n:\n}\n}\n</code></pre> <p>For a class to implement an interface and be concrete, it has to override all abstract methods from the interface and provide an implementation to each, just like the example above.  Otherwise, the class becomes abstract.</p> <p>With the <code>GetAreable</code> interface, we can now make our function <code>findLargest</code> even more general. <pre><code>// version 0.3\ndouble findLargest(GetAreable[] array) {\ndouble maxArea = 0;\nfor (GetAreable curr : array) {\ndouble area = curr.getArea();\nif (area &gt; maxArea) {\nmaxArea = area;\n}\n}\nreturn maxArea;\n}\n</code></pre></p> <p>Note:</p> <ul> <li>A class can only extend from one superclass, but it can implement multiple interfaces.</li> <li>An interface can extend from one or more other interfaces, but an interface cannot extend from another class.</li> </ul>"},{"location":"18-interface.html#interface-as-supertype","title":"Interface as Supertype","text":"<p>If a class \\(C\\) implements an interface \\(I\\), \\(C &lt;: I\\).   This definition implies that a type can have multiple supertypes.</p> <p>In the example above, <code>Flat</code> &lt;: <code>GetAreable</code> and <code>Flat</code> &lt;: <code>RealEstate</code>.</p>"},{"location":"18-interface.html#casting-using-an-interface","title":"Casting using an Interface","text":"<p>Like any type in Java, it is also possible cast using an Interface. Lets consider an interface <code>I</code> and two classes <code>A</code> and <code>B</code>. Note that <code>A</code> does not implement <code>I</code></p> <pre><code>interface I {\n:\n}\n\nclass A {\n:\n}\n\nclass B implements I {\n:\n}\n</code></pre> <p>Now lets, consider the following code excerpt:</p> <pre><code>I i1 = new B(); // Compiles, widening type conversion\nI i2 = (I) new A(); // Also compiles?\n</code></pre> <p>Note that even though <code>A</code> does not implement <code>I</code>, the Java compiler allows this code to compile. Constrast this with casting between classes which have no subtype relationship:</p> <pre><code>A a = (A) new B(); // Does not compile\nB a = (B) new A(); // Does not compile\n</code></pre> <p>How do we explain this? Well, the Java compiler will not let us cast, when it is provable that it won't work, i.e. casting between two classes which have no subtype relationship. However, for interfaces, there is the possibility that a subclass could implement the interface and therefore Java allows it to compile. Consider one such potential subclass <code>AI</code>:</p> <pre><code>class AI extends A implements I{\n:\n}\n</code></pre> <p>The lesson here is that when we are using typecasting, we are telling the compiler that we know best, and therefore it will not warn us or stop us from making bad decisions. It is important to always be sure when you use an explicit typecast.</p>"},{"location":"18-interface.html#impure-interfaces","title":"Impure Interfaces","text":"<p>As we mentioned at the beginning of this module, it is common for software requirements, and their design, to continuously evolve.  But once we define an interface, it is difficult to change.</p> <p>Suppose that, after we define that <code>GetAreable</code> interface, other developers in the team starts to write classes that implement this interface.  One fine day, we realize that we need to add more methods into the <code>getAreable</code>.  Perhaps we need methods <code>getSqFt()</code> and <code>getMeter2()</code> in the interface.  But, one cannot simply change the interface and add these abstract methods now.  The other developers will have to change their classes to add the implementation of two methods, or else their code would not compile!</p> <p>This is what happened to the Java language when they transitted from version 7 to version 8.  The language needed to add a bunch of useful methods to standard interfaces provided by the Java library, but doing so would break existing code in the 1990s that rely on these interfaces.</p> <p>The solution that Java came up with is the allow an interface to provide a default implementation of methods that all implementation subclasses will inherit (unless they override).  A method with default implementation is tagged with the <code>default</code> keyword.  This leads to a less elegant situation where an <code>interface</code> has some abstract methods and some non-abstract default methods.  In CS2030S, we refer to this as impure interfaces and it is a pain to explain since it breaks our clean distinction between a class and an interface.  We prefer not to talk about it -- but it is there in Java 8 and up.</p> <ol> <li> <p>Although in recent Java releases, this is less common.\u00a0\u21a9</p> </li> </ol>"},{"location":"19-wrapper.html","title":"Unit 19: Wrapper Class","text":"<p>After this unit, students should:</p> <ul> <li>be aware that Java provides wrapper classes around the primitive types</li> <li>be aware that Java will transparently and automatically box and unbox between primitive types and their corresponding wrapper classes</li> </ul>"},{"location":"19-wrapper.html#writing-general-code-for-primitive-types","title":"Writing General Code for Primitive Types","text":"<p>We have seen the following general code that takes in an array of <code>Object</code> objects, and searches if another object <code>obj</code> is in the given <code>array</code>.</p> <pre><code>// version 0.1 (with polymorphism)\nboolean contains(Object[] array, Object obj) {\nfor (Object curr : array) {\nif (curr.equals(obj)) {\nreturn true;\n}\n}\nreturn false;\n}\n</code></pre> <p>Through polymorphism and overriding of the <code>equals</code> method, we can make sure that it is general enough to work on any reference type.  But what about primitive types?  Do we need to write a separate function for each primitive type, like this? <pre><code>// version 0.4 (for int, a primitive type)\nboolean contains(int[] array, int obj) {\nfor (int curr : array) {\nif (curr == obj) {\nreturn true;\n}\n}\nreturn false;\n}\n</code></pre></p>"},{"location":"19-wrapper.html#making-primitive-types-less-primitive","title":"Making Primitive Types Less Primitive","text":"<p>Java provides wrapper classes for each of its primitive types.  A wrapper class is a class that encapsulates a type, rather than fields and methods.  The wrapper class for <code>int</code> is called <code>Integer</code>, for <code>double</code> is called <code>Double</code>, etc.  A wrapper class can be used just like every other class in Java and behave just like every other class in Java.  In particular, they are reference types and their instances can be created with <code>new</code>; instances are stored on the heap, etc.  </p> <p>For instance, <pre><code>Integer i = new Integer(4);\nint j = i.intValue();\n</code></pre></p> <p>The code snippet above shows how we can convert a primitive <code>int</code> value to a wrapper instance <code>i</code> of type <code>Integer</code>, and how the <code>intValue</code> method can retrieve the <code>int</code> value from an <code>Integer</code> instance.  </p> <p>With the wrapper type, we can reuse our <code>contains</code> method that takes in an <code>Object</code> array as a parameter to operate on an array of integers -- we just need to pass our integers into the method in an <code>Integer</code> array instead of an <code>int</code> array.</p> <p>All primitive wrapper class objects are immutable -- once you create an object, it cannot be changed.</p>"},{"location":"19-wrapper.html#auto-boxing-and-unboxing","title":"Auto-boxing and Unboxing","text":"<p>As conversion back-and-forth between a primitive type and its wrapper class is pretty common, Java provides a feature called auto-boxing/unboxing to perform type conversion between primitive type and its wrapper class.</p> <p>For instance, <pre><code>Integer i = 4;\nint j = i;\n</code></pre></p> <p>The first statement is an example of auto-boxing, where the primitive value <code>int</code> of 4 is converted into an instance of <code>Integer</code>.  The second statement converts an instance of <code>Integer</code> back to <code>int</code> (without affecting its value of 4).</p>"},{"location":"19-wrapper.html#performance","title":"Performance","text":"<p>Since the wrapper classes allow us to write flexible programs, why not use them all the time and forget about primitive types?</p> <p>The answer: performance. Because using an object comes with the cost of allocating memory for the object and collecting garbage afterward, it is less efficient than primitive types.   </p> <p>Consider the following two programs:</p> <pre><code>Double sum;\nfor (int i = 0; i &lt; Integer.MAX_VALUE; i++)\n{\nsum += i;\n}\n</code></pre> <p>vs.</p> <pre><code>double sum;\nfor (int i = 0; i &lt; Integer.MAX_VALUE; i++)\n{\nsum += i;\n}\n</code></pre> <p>The second one can be about 2 times faster.  All primitive wrapper class objects are immutable -- once you create an object, it cannot be changed. Thus, every time the sum in the first example above is updated, a new <code>Double</code> object gets created. Due to autoboxing and unboxing, the cost of creating objects becomes hidden and is often forgotten.</p> <p>The Java API in fact, provides multiple versions of the same method, one for all the reference types using <code>Object</code>, and one for each of the primitive types.  This decision leads to multiple versions of the same code, but with the benefits of better performance.  See the Arrays class for instance.</p>"},{"location":"20-casting.html","title":"Unit 20: Run-Time Class Mismatch","text":"<p>After taking this unit, students should:</p> <ul> <li>Understand the need for narrowing type conversion and type casting when writing code that depends on higher-level abstraction</li> <li>Understand the possibility of encountering run-time errors if typecasting is not done properly.</li> </ul> <p>We have seen in Unit 18 how we can write code that is reusable and general by making our code dependent on types at a higher-level of abstraction.  Our main example is the following <code>findLargest</code> method, which takes in an array of objects that support the <code>getArea</code> method, and returns the largest area among these objects.</p> <pre><code>// version 0.3\ndouble findLargest(GetAreable[] array) {\ndouble maxArea = 0;\nfor (GetAreable curr : array) {\ndouble area = curr.getArea();\nif (area &gt; maxArea) {\nmaxArea = area;\n}\n}\nreturn maxArea;\n}\n</code></pre> <p>The method served our purpose well, but it is NOT a very well-designed method.  Just returning the value of the largest area is not as useful as returning the object with the largest area.  Once the caller has a reference of the object, the caller can call <code>getArea</code> to find the value of the largest area.</p> <p>Let's write our <code>findLargest</code> method to find which object has the largest area instead.  </p> <pre><code>// version 0.4\nGetAreable findLargest(GetAreable[] array) {\ndouble maxArea = 0;\nGetAreable maxObj = null;\nfor (GetAreable curr : array) {\ndouble area = curr.getArea();\nif (area &gt; maxArea) {\nmaxArea = area;\nmaxObj = curr;\n}\n}\nreturn maxObj;\n}\n</code></pre> <p>Let's see how <code>findLargest</code> can be used:</p> <pre><code>GetAreable[] circles = new GetAreable[] {\nnew Circle(new Point(1, 1), 2),\nnew Circle(new Point(0, 0), 5)\n};\n\nGetAreable ga = findLargest(circles);  // ok\nCircle c1 = findLargest(circles); // error\nCircle c2 = (Circle) findLargest(circles); // ok\n</code></pre> <p>The return type of <code>findLargest</code> (version 0.4) is now <code>GetAreable</code>.  On Line 6 above, we assign the return object with a compile-time type of <code>GetAreable</code> to <code>ga</code>, which also has <code>GetAreable</code> as its compile-time type.  Since the variable <code>ga</code> is of type <code>GetAreable</code>, however, it is not very useful.  Recall that <code>GetAreable</code> is an interface with only one method <code>getArea</code>.  We cannot use it as a circle.</p> <p>On Line 7, we try to return the return object to a variable with compile-time type <code>Circle</code>.  This line, however, causes a compile-time error.  Since <code>Circle</code> &lt;: <code>GetAreable</code>, this is a narrowing type conversion and thus is not allowed (See Unit 14).  We will have to make an explicit cast of the result to <code>Circle</code> (on Line 8).  Only with casting, our code can compile and we get a reference with a compile-time type of <code>Circle</code>.</p>"},{"location":"20-casting.html#cast-carefully","title":"Cast Carefully","text":"<p>Typecasting, as we did in Line 8 above, is basically is a way for programmers to ask the compiler to trust that the object returned by <code>findLargest</code> has a run-time type of <code>Circle</code> (or its subtype).</p> <p>In the snippet above, we can be sure (even prove) that the returned object from <code>findLargest</code> must have a run-time type of <code>Circle</code> since the input variable <code>circles</code> contains only <code>Circle</code> objects.</p> <p>The need to cast our returned object, however, leads to fragile code.  Since the correctness of Line 8 depends on the run-time type, the compiler cannot help us.  It is then up to the programmers to not make mistakes.</p> <p>Consider the following two snippets, which will compile perfectly, but will lead to the program crashing at run-time.</p> <pre><code>GetAreable[] circles = new GetAreable[] {\nnew Circle(new Point(1, 1), 2),\nnew Square(new Point(1, 1), 5)\n};\n\nCircle c2 = (Circle) findLargest(circles);\n</code></pre> <p>Or</p> <pre><code>GetAreable[] circles = new GetAreable[] {\nnew Circle(new Point(1, 1), 2),\nnew Circle(new Point(1, 1), 5)\n};\n\nSquare sq = (Square) findLargest(circles);\n</code></pre> <p>We will see how to resolve this problem in later units.</p>"},{"location":"21-variance.html","title":"Unit 21: Variance","text":"<p>After this unit, students should:</p> <ul> <li>understand the definition of the variance of types: covariant, contravariant, and invariant.</li> <li>be aware that the Java array is covariant and how it could lead to run-time errors that cannot be caught during compile time.</li> </ul> <p>Both the methods <code>findLargest</code> and <code>contains</code> takes in an array of reference types as parameters: <pre><code>// version 0.4\nGetAreable findLargest(GetAreable[] array) {\ndouble maxArea = 0;\nGetAreable maxObj = null;\nfor (GetAreable curr : array) {\ndouble area = curr.getArea();\nif (area &gt; maxArea) {\nmaxArea = area;\nmaxObj = curr;\n}\n}\nreturn maxObj;\n}\n\n// version 0.1 (with polymorphism)\nboolean contains(Object[] array, Object obj) {\nfor (Object curr : array) {\nif (curr.equals(obj)) {\nreturn true;\n}\n}\nreturn false;\n}\n</code></pre></p> <p>What are some possible arrays that we can pass into these methods?  Let's try this: <pre><code>Object[] objArray = new Object[] { new Integer(1), new Integer(2) };\nInteger[] intArray = new Integer[] { new Integer(1), new Integer(2) };\n\ncontains(objArray, new Integer(1)); // ok\ncontains(intArray, new Integer(1)); // ok\n</code></pre></p> <p>Line 4 is not surprising since the type for <code>objArray</code> matches that of parameter <code>array</code>.  Line 5, however, shows that it is possible to assign an instance with run-time type <code>Integer[]</code> to a variable with compile-time type <code>Object[]</code>.</p>"},{"location":"21-variance.html#variance-of-types","title":"Variance of Types","text":"<p>So far, we have established the subtype relationship between classes and interfaces based on inheritance and implementation.  The subtype relationship between complex types such as arrays, however, is not so trivial.  Let's look at some definitions.</p> <p>The variance of types refers to how the subtype relationship between complex types relates to the subtype relationship between components.</p> <p>Let \\(C(S)\\) corresponds to some complex type based on type \\(S\\).  An array of type \\(S\\) is an example of a complex type.</p> <p>We say a complex type is:</p> <ul> <li>covariant if \\(S &lt;: T\\) implies \\(C(S) &lt;: C(T)\\)</li> <li>contravariant if \\(S &lt;: T\\) implies \\(C(T) &lt;: C(S)\\)</li> <li>invariant if it is neither covariant nor contravariant.</li> </ul>"},{"location":"21-variance.html#java-array-is-covariant","title":"Java Array is Covariant","text":"<p>Arrays of reference types are covariant in Java1.  This means that, if \\(S &lt;: T\\), then \\(S[] &lt;: T[]\\).  </p> <p>For example, because <code>Integer</code> &lt;: <code>Object</code>, we have <code>Integer[]</code> &lt;: <code>Object[]</code> and we can do the following:</p> <pre><code>Integer[] intArray;\nObject[] objArray;\nobjArray = intArray; // ok\n</code></pre> <p>By making array covariant, however, Java opens up the possibility of run-time errors, even without typecasting!</p> <p>Consider the following code: <pre><code>Integer[] intArray = new Integer[2] {\nnew Integer(10), new Integer(20)\n};\nObject[] objArray;\nobjArray = intArray;\nobjArray[0] = \"Hello!\"; // &lt;- compiles!\n</code></pre></p> <p>On Line 5 above, we set <code>objArray</code> (with a compile-time type of <code>Object[]</code>) to refer to an object with a run-time type of <code>Integer[]</code>.  This is allowed since the array is covariant.</p> <p>On Line 6, we try to put a <code>String</code> object into the <code>Object</code> array.  Since <code>String</code> &lt;: <code>Object</code>, the compiler allows this.  The compiler does not realize that at run-time, the <code>Object</code> array will refer to an array of <code>Integer</code>.  </p> <p>So we now have a perfectly compilable code, that will crash on us when it executes Line 6 -- only then would Java realize that we are trying to stuff a string into an array of integers!</p> <p>This is an example of a type system rule that is unsafe.  Since the array type is an essential part of the Java language, this rule cannot be changed without ruining existing code.  We will see later how Java avoids this pitfall for other complex types (such as a list).</p> <ol> <li> <p>Arrays of primitive types are invariant.\u00a0\u21a9</p> </li> </ol>"},{"location":"22-exception.html","title":"Unit 22: Exceptions","text":"<p>After this unit, students should:</p> <ul> <li>understand about handling java exceptions and how to use the <code>try</code>-<code>catch</code>-<code>finally</code> blocks</li> <li>understand the hierarchy of exception classes and the difference between checked and unchecked exceptions</li> <li>be able to create their own exceptions</li> <li>understand the control flow of exceptions</li> <li>be aware of good practices for exception handling</li> </ul> <p>One of the nuances of programming is having to write code to deal with exceptions and errors. Consider writing a method that reads in a single integer value from a file.  Here are some things that could go wrong:</p> <ul> <li>The file to read from may not exist</li> <li>The file to read from exists, but you may not have permission to read it</li> <li>You can open the file for reading, but it might contain non-numeric text where you expect numerical values</li> <li>The file might contain fewer values than expected</li> <li>The file might become unreadable as you are reading through it (e.g., someone unplugs the USB drive)</li> </ul> <p>In C, we usually have to write code like this:</p> <pre><code>fd = fopen(filename,\"r\");\nif (fd == NULL) {\nfprintf(stderr, \"Unable to open file. \");\nif (errno == ENFILE) {\nfprintf(stderr, \"Too many opened files.  Unable to open another\\n\");\n} else if (errno == ENOENT) {\nfprintf(stderr, \"No such file %s\\n\", filename);\n} else if (errno == EACCES) {\nfprintf(stderr, \"No read permission to %s\\n\", filename);\n}\nreturn -1;\n}\nscanned = fscanf(fd, \"%d\", &amp;value);\nif (scanned == 0) {\nfprintf(stderr, \"Unable to scan for an integer\\n\");\nfclose(fd);\nreturn -2;\n}\nif (scanned == EOF) {\nfprintf(stderr, \"No input found.\\n\");\nfclose(fd);\nreturn -3;\n}\n</code></pre> <p>Out of the lines above, only TWO lines correspond to the actual task of opening and reading in a file, the others are for exception checking/handling.  The actual tasks are interspersed between exception checking code, which makes reading and understanding the logic of the code difficult.</p> <p>The examples above also have to return different values to the calling method, because the calling method may have to do something to handle the errors. Note that the POSIX API has a global variable <code>errno</code> that signifies the detailed error. First, we have to check for different <code>errno</code> values and react accordingly (we can use <code>perror</code>, but that has its limits). Second, <code>errno</code> is global, and using a global variable is a bad practice.  In fact, the code above might not work because <code>fprintf</code> in Line 3 might have changed <code>errno</code>.</p> <p>Finally, there is the issue of having to repeatedly clean up after an error -- here we <code>fclose</code> the file if there is an error reading, twice. It is easy to forget to do so if we have to do this in multiple places.  Furthermore, if we need to perform a more complex clean up, then we would end up with lots of repeated code.</p> <p>Many modern programming languages support exceptions as a programming construct.  In Java, this is done with <code>try</code>, <code>catch</code>, <code>finally</code> keywords, and a hierarchy of <code>Exception</code> classes.  The <code>try</code>/<code>catch</code>/<code>finally</code> keywords group statements that check/handle errors together making code easier to read. The Java equivalent to the above is:</p> <pre><code>try {\nreader = new FileReader(filename);\nscanner = new Scanner(reader);\nvalue = scanner.nextInt();\n}\ncatch (FileNotFoundException e) {\nSystem.err.println(\"Unable to open \" + filename + \" \" + e);\n}\ncatch (InputMismatchException e) {\nSystem.err.println(\"Unable to scan for an integer\");\n}\ncatch (NoSuchElementException e) {\nSystem.err.println(\"No input found\");\n}\nfinally {\nif (scanner != null)\nscanner.close();\n}\n</code></pre> <p>Let's look at the example more carefully.  The general syntax for <code>try</code>-<code>catch</code>- <code>finally</code> is the following:</p> <pre><code>try {\n// do something\n} catch (an exception parameter) {\n// handle exception\n} finally {\n// clean up code\n// regardless of there is an exception or not\n}\n</code></pre> <p>In the example above, we have the <code>try</code> block: <pre><code>try {\nreader = new FileReader(filename);\nscanner = new Scanner(reader);\nvalue = scanner.nextInt();\n}\n:\n</code></pre></p> <p>which opens the file and reads an integer from it.  Thus the main task for the code is put together in one place, making it easier to read and understand (and thus less bug-prone).</p> <pre><code>  :\ncatch (FileNotFoundException e) {\nSystem.err.println(\"Unable to open \" + filename + \" \" + e);\n} catch (InputMismatchException e) {\nSystem.err.println(\"Unable to scan for an integer\");\n} catch (NoSuchElementException e) {\nSystem.err.println(\"No input found\");\n}\n</code></pre> <p>The error handling comes under the <code>catch</code> clauses, each handling a different type of exception.  In Java, exceptions are instances that are a subtype of the <code>Exception</code> class.  Information about an exception is encapsulated in an exception instance and is \"passed\" into the <code>catch</code> block.  In the example above, <code>e</code> is the variable containing an exception instance.</p> <p>With the exception, we no longer rely on a special return value from a function nor a global variable to indicate exceptions.</p> <pre><code>  :\nfinally {\nif (scanner != null)\nscanner.close();\n}\n</code></pre> <p>Finally, we have the optional <code>finally</code> clause for house-keeping tasks.  Here, we close the <code>scanner</code> if it is opened.</p> <p>In cases where the code to handle the exceptions is the same, you can avoid repetition by combining multiple exceptions into one catch statement: <pre><code>catch (FileNotFoundException | InputMismatchException | NoSuchElementException e) {\nSystem.err.println(e);\n}\n</code></pre></p>"},{"location":"22-exception.html#throwing-exceptions","title":"Throwing Exceptions","text":"<p>The <code>try</code>-<code>catch</code>-<code>finally</code> blocks above show you how to handle exceptions.  Let's see how we can throw an exception.  Let's revisit our <code>Circle</code> class.  A circle cannot have a negative radius.  Let's say that we wish our constructor to throw an <code>IllegalArgumentException</code> when a negative radius is passed in.  </p> <p>We need to do two things.  First, we need to declare that the construct is throwing an exception, with the <code>throws</code> keyword.  Second, we have to create a new <code>IllegalArgumentException</code> object and throw it to the caller with the <code>throw</code> keywords.</p> <pre><code>  public Circle(Point c, double r) throws IllegalArgumentException {\nif (r &lt; 0) {\nthrow new IllegalArgumentException(\"radius cannot be negative.\");\n}\nthis.c = c;\nthis.r = r;\n}\n}\n</code></pre> <p>Note that executing the <code>throw</code> statement causes the method to immediately return.  In the example above, the initialization of the center <code>c</code> and radius <code>r</code> does not happen.</p> <p>The caller then can catch and handle this exception: <pre><code>try {\nc = new Circle(point, radius);\n} catch (IllegalArgumentException e) {\nSystem.err.println(\"Illegal arguement:\" + e.getMessage());\n}\n</code></pre></p>"},{"location":"22-exception.html#checked-vs-unchecked-exceptions","title":"Checked vs Unchecked Exceptions","text":"<p>Java distinguishes between two types of exceptions: checked and unchecked.  </p> <p>An unchecked exception is an exception caused by a programmer's errors.  They should not happen if perfect code is written.  <code>IllegalArgumentException</code>, <code>NullPointerException</code>, <code>ClassCastException</code> are examples of unchecked exceptions.  Generally, unchecked exceptions are not explicitly caught or thrown.  They indicate that something is wrong with the program and cause run-time errors.</p> <p>A checked exception is an exception that a programmer has no control over.  Even if the code written is perfect, such an exception might still happen.  The programmer should thus actively anticipate the exception and handle them.  For instance, when we open a file, we should anticipate that in some cases, the file cannot be opened.  <code>FileNotFoundException</code> and <code>InputMismatchException</code> are two examples of is an example of a checked exception.  A checked exception must be either handled, or else the program will not compile.</p> <p>In Java, unchecked exceptions are subclasses of the class <code>RuntimeException</code>.</p>"},{"location":"22-exception.html#passing-the-buck","title":"Passing the Buck","text":"<p>The caller of the method that generates (i.e., <code>new</code> and <code>throws</code>) an exception need not catch the exception.  The caller can pass the exception to its caller, and so on if the programmer deems that it is not the right place to handle it.  </p> <p>An unchecked exception, if not caught, will propagate automatically down the stack until either, it is caught or if it is not caught at all, resulting in an error message displayed to the user.</p> <p>For instance, the following toy program would result in <code>IllegalArgumentException</code> being thrown out of <code>main</code> and displayed to the user.</p> <pre><code>class Toy {\nstatic void createCircles() {\nint radius = 10;\nfor (int i = 0; i &lt;= 11; i++) {\nnew Circle(new Point(1, 1), radius--);\n}\n}\npublic static void main(String[] args) {\ncreateCircles();\n}\n}\n</code></pre> <p>A checked exception, on the other hand, must be handled.  Consider the following example:</p> <pre><code>// version 0.1 (won't compile)\nclass Toy {\nstatic FileReader openFile(String filename) {\nreturn new FileReader(filename);\n}\npublic static void main(String[] args) {\nopenFile();\n}\n}\n</code></pre> <p>This program won't compile because the checked exception <code>FileNotFoundException</code> is not handled.  As the example we have seen, we could handle it in <code>openFile</code>.  In this case, <code>openFile</code> does not throw any exception. <pre><code>// version 0.2 (handle where exception occur)\nclass Toy {\nstatic FileReader openFile(String filename) {\ntry {\nreturn new FileReader(filename);\n} catch (FileNotFoundException e) {\nSystem.err.println(\"Unable to open \" + filename + \" \" + e);\n}\n}\npublic static void main(String[] args) {\nopenFile();\n}\n}\n</code></pre></p> <p>Alternatively, <code>openFile</code> can pass the buck to the caller instead of catching it. <pre><code>// version 0.3 (passing exception to caller)\nclass Toy {\nstatic FileReader openFile(String filename) throws FileNotFoundException {\nreturn new FileReader(filename);\n}\npublic static void main(String[] args) {\ntry {\nopenFile();\n} catch (FileNotFoundException e) {\n// warn user and pop up dialog box to select another file.\n}\n}\n}\n</code></pre></p> <p>Sometimes the caller is a better place to handle the exception.  Where an exception should be handled is a design decision.  We will see some considerations for this later in this unit.</p> <p>What should not happen is the following: <pre><code>// version 0.4 (pass exception to user)\nclass Toy {\nstatic FileReader openFile(String filename) throws FileNotFoundException {\nreturn new FileReader(filename);\n}\npublic static void main(String[] args) throws FileNotFoundException {\nopenFile();\n}\n}\n</code></pre></p> <p>In the code above, every method passes the buck around.  No one takes the responsibility to handle it and the user ends up with the exception.  The ugly internals of the program (such as the call stack) is then revealed to the user.</p> <p>A good program always handle checked exception gracefully and hide the details from the users.  </p>"},{"location":"22-exception.html#control-flow-of-exceptions","title":"Control Flow of Exceptions","text":"<p>Here is a more detailed description of the control flow of exceptions. Consider we have a <code>try</code>-<code>catch</code>-<code>finally</code> block that catches two exceptions <code>E1</code> and <code>E2</code>. Inside the try block, we call a method <code>m1()</code>; <code>m1()</code> calls <code>m2()</code>; <code>m2()</code> calls <code>m3()</code>, and <code>m3()</code> calls <code>m4()</code>.</p> <p></p> <pre><code>try {\nm1();\n} catch (E1 e) {\n:\n} catch (E2 e) {\n:\n} finally {\n:\n}\n</code></pre> <pre><code>void m1() {\n:\nm2();\n:\n}\n\nvoid m2() {\n:\nm3();\n:\n}\n\nvoid m3() {\n:\nm4();\n:\n}\n\nvoid m4() {\n:\nthrow new E2();\n:\n}\n</code></pre> <p>In a normal (no exception) situation, the control flow looks like this:</p> <p></p> <p>The statements in the try block are executed, followed by the statements in the <code>finally</code> block.</p> <p>Now, let's suppose something went wrong deep inside the nested call, in <code>m4()</code>. One of the statement executes <code>throw new E2();</code>, which causes the execution in <code>m4()</code> to stop. JVM now looks for the block of code that catches <code>E2</code>, going down the call stack, until it can find a place where the exception is handled. In this example, we suppose that none of <code>m1()</code>-<code>m4()</code> handles (i.e., <code>catch</code>) the exception. Thus, JVM then jumps to the code that handles <code>E2</code>. Finally, JVM executes the <code>finally</code> block.</p> <p>Note that the <code>finally</code> block is always executed even when return or throw is called in a catch block.</p> <p></p>"},{"location":"22-exception.html#creating-our-own-exceptions","title":"Creating Our Own Exceptions","text":"<p>If you find that none of the exceptions provided by Java meet your needs, you can create your own exceptions, by simply inheriting from one of the existing ones. But, you should only do so if there is a good reason, for instance, to provide additional useful information to the exception handler.</p> <p>Here is an example:</p> <pre><code>class IllegalCircleException extends IllegalArgumentException {\nPoint center;\nIllegalCircleException(String message) {\nsuper(message);\n}\nIllegalCircleException(Point c, String message) {\nsuper(message);\nthis.center = c;\n}\n@Override\npublic String toString() {\nreturn \"The circle centered at \" + this.center + \" cannot be created:\" + getMessage();\n}\n}\n</code></pre>"},{"location":"22-exception.html#overriding-method-that-throws-exceptions","title":"Overriding Method that Throws Exceptions","text":"<p>When you override a method that throws a checked exception, the overriding method must throw only the same, or a more specific checked exception, than the overridden method. This rule follows the Liskov Substitution Principle. The caller of the overridden method cannot expect any new checked exception beyond what has already been \"promised\" in the method specification.</p>"},{"location":"22-exception.html#good-practices-for-exception-handling","title":"Good Practices for Exception Handling","text":""},{"location":"22-exception.html#catch-exceptions-to-clean-up","title":"Catch Exceptions to Clean Up","text":"<p>While it is convenient to just pass the buck and let the calling method deals with exceptions (\"Hey! Not my problem!\"), it is not always responsible to do so. Consider the example earlier, where <code>m1()</code>, <code>m2()</code>, and <code>m3()</code> do not handle exception <code>E2</code>. Let's say that <code>E2</code> is a checked exception, and it is possible to react to this and let the program continues properly. Also, suppose that <code>m2()</code> allocated some system resources (e.g., temporary files, network connections) at the beginning of the method, and deallocated the resources at the end of the method. By not handling the exception, the code that deallocates these resources does not get called when an exception occurs.  It is better for <code>m2()</code> to catch the exception, handle the resource deallocation in a <code>finally</code> block. If there is a need for the calling methods to be aware of the exception, <code>m2()</code> can always re-throw the exception:</p> <pre><code>public void m2() throws E2 {\ntry {\n// setup resources\nm3();\n}\ncatch (E2 e) {\nthrow e;\n}\nfinally {\n// clean up resources\n}\n}\n</code></pre>"},{"location":"22-exception.html#do-not-catch-them-all","title":"Do not catch-them-all!","text":"<p>Sometimes, you just want to focus on the main logic of the program and get it working instead of dealing with the exceptions. Since Java uses checked exceptions, it forces you to handle the exceptions, or else your code will not compile. One way to quickly get around this is to write:</p> <pre><code>try {\n// your code\n}\ncatch (Exception e) {\n// do nothing\n}\n</code></pre> <p>to stop the compiler from complaining.  DO NOT DO THIS.  Since <code>Exception</code> is the superclass of all exceptions, every exception that is thrown, checked or unchecked, is now silently ignored!  You will not be able to figure out if something is wrong with your program.  This practice is such a bad practice that there is a name for it -- this is called Pokemon Exception Handling.</p>"},{"location":"22-exception.html#overreacting","title":"Overreacting","text":"<p>Do not exit a program just because of an exception. This would prevent the calling function from cleaning up their resources. Worse, do not exit a program silently.</p> <pre><code>try {\n// your code\n}\ncatch (Exception e) {\nSystem.exit(0);\n}\n</code></pre>"},{"location":"22-exception.html#do-not-break-abstraction-barrier","title":"Do Not Break Abstraction Barrier","text":"<p>Sometimes, letting the calling method handle the exception causes the implementation details to be leaked, and make it harder to change the implementation later.</p> <p>For instance, suppose we design a class <code>ClassRoster</code> with a method <code>getStudents()</code>, which reads the list of students from a text file.</p> <pre><code>class ClassRoster {\n:\npublic Students[] getStudents() throws FileNotFoundException {\n:\n}\n}\n</code></pre> <p>Here, the fact that a <code>FileNotFoundException</code> is thrown leaks the information that the information is read from a file.  </p> <p>Suppose that, later, we change the implementation to reading the list from an SQL database.  We may have to change the exception thrown to something else:</p> <pre><code>class ClassRoster {\n:\npublic Students[] getStudents() throws SQLException {\n:\n}\n}\n</code></pre> <p>The caller will have to change their exception handling code accordingly.</p> <p>We should, as much as possible, handle the implementation-specific exceptions within the abstraction barrier.</p>"},{"location":"22-exception.html#do-not-use-exception-as-a-control-flow-mechanism","title":"Do NOT Use Exception As a Control Flow Mechanism","text":"<p>This is probably the most commonly seen mistakes among new programmers.  Exceptions are meant to handle unexpected errors, not to handle the logic of your program.  Consider the following snippet:</p> <pre><code>if (obj != null) {\nobj.doSomething();\n} else {\ndoTheOtherThing();\n}\n</code></pre> <p>We use an <code>if</code> condition to handle the logic.  Some programmers wrote this: <pre><code>   try {\nobj.doSomething();\n} catch (NullPointerException e) {\ndoTheOtherThing();\n}\n</code></pre></p> <p>Not only is this less efficient, but it also might not be correct, since a <code>NullPointerException</code> might be triggered by something else other than <code>obj</code> being null.</p>"},{"location":"22-exception.html#the-error-class","title":"The <code>Error</code> class","text":"<p>Java has another class called <code>Error</code> for situations where the program should terminate as generally there is no way to recover from the error. For instance, when the heap is full (<code>OutOfMemoryError</code>) or the stack is full (<code>StackOverflowError</code>).  Typically we don't need to create or handle such errors.  </p>"},{"location":"23-generics.html","title":"Unit 23: Generics","text":"<p>After taking this unit, students should:</p> <ul> <li>know how to define and instantiate a generic type and a generic method</li> <li>be familiar with the term parameterized types, type arguments, type parameters</li> <li>appreciate how generics can reduce duplication of code and improve type safety</li> </ul>"},{"location":"23-generics.html#the-pair-class","title":"The <code>Pair</code> class","text":"<p>Sometimes it is useful to have a lightweight class to bundle a pair of variables together.  One could, for instance, write a method that returns two values.  The example defines a class <code>IntPair</code> that bundles two <code>int</code> variables together. This is a utility class with no semantics nor methods associated with it and so, we did not attempt to hide the implementation details.</p> <pre><code>class IntPair {\nprivate int first;\nprivate int second;\n\npublic IntPair(int first, int second) {\nthis.first = first;\nthis.second = second;\n}\n\nint getFirst() {\nreturn this.first;\n}\n\nint getSecond() {\nreturn this.second;\n}\n}\n</code></pre> <p>This class can be used, for instance, in a function that returns two <code>int</code> values.</p> <pre><code>IntPair findMinMax(int[] array) {\nint min = Integer.MAX_VALUE;  // stores the min\nint max = Integer.MIN.VALUE; // stores the max\nfor (int i : array) {\nif (i &lt; min)  {\nmin = i;\n}\nif (i &gt; max) {\nmax = i;\n}\n}\nreturn new IntPair(min, max);\n}\n</code></pre> <p>We could similarly define a pair class for two doubles (<code>DoublePair</code>), two booleans (<code>BooleanPair</code>), etc.  In other situations, it is useful to define a pair class that bundles two variables of two different types, say, a <code>Customer</code> and a <code>ServiceCounter</code>; a <code>String</code> and an <code>int</code>; etc.  </p> <p>We should not, however, create one class for each possible combination of types.  A better idea is to define a class that stores two <code>Object</code> references: <pre><code>class Pair {\nprivate Object first;\nprivate Object second;\n\npublic Pair(Object first, Object second) {\nthis.first = first;\nthis.second = second;\n}\n\nObject getFirst() {\nreturn this.first;\n}\n\nObject getSecond() {\nreturn this.second;\n}\n}\n</code></pre></p> <p>At the cost of using a wrapper class in place of primitive types, we get a single class that can be used to store any type of values.  </p> <p>You might recall that we used a similar approach for our <code>contains</code> method to implement a general method that works for any type of object.  Here, we are using this approach for a general class that encapsulates any type of object.</p> <p>Unfortunately, the issues we faced with narrowing type conversion and potential run-time errors apply to the <code>Pair</code> class as well.  Suppose that a function returns a <code>Pair</code> containing a <code>String</code> and an <code>Integer</code>, and we accidentally treat this as an <code>Integer</code> and a <code>String</code> instead, the compiler will not be able to detect the type mismatch and stop the program from crashing during run-time.</p> <pre><code>Pair foo() {\nreturn new Pair(\"hello\", 4);\n}\n\nPair p = foo();\nInteger i = (Integer) p.getFirst(); // run-time ClassCastException\n</code></pre> <p>To reduce the risk of human error, what we need is a way to specify the following: suppose the type of <code>first</code> is \\(S\\) and type of <code>second</code> is \\(T\\), then we want the return type of <code>getFirst</code> to be \\(S\\) and of <code>getSecond</code> to be \\(T\\).</p>"},{"location":"23-generics.html#generic-types","title":"Generic Types","text":"<p>In Java and many other programming languages, the mechanism to do this is called generics or templates.  Java allows us to define a generic type that takes other types as type parameters, just like how we can write methods that take in variables as parameters.  </p>"},{"location":"23-generics.html#declaring-a-generic-type","title":"Declaring a Generic Type","text":"<p>Let's see how we can do this for <code>Pair</code>:</p> <pre><code>class Pair&lt;S,T&gt; {\nprivate S first;\nprivate T second;\n\npublic Pair(S first, T second) {\nthis.first = first;\nthis.second = second;\n}\n\nS getFirst() {\nreturn this.first;\n}\n\nT getSecond() {\nreturn this.second;\n}\n}\n</code></pre> <p>We declare a generic type by specifying its type parameters between <code>&lt;</code> and <code>&gt;</code> when we declare the type.  By convention, we use a single capital letter to name each type parameter.  These type parameters are scoped within the definition of the type.  In the example above, we have a generic class <code>Pair&lt;S,T&gt;</code> (read \"pair of S and T\")  with <code>S</code> and <code>T</code> as type parameters.  We use <code>S</code> and <code>T</code> as the type of the fields <code>first</code> and <code>second</code>.  We ensure that <code>getFirst()</code> returns type <code>S</code> and <code>getSecond()</code> returns type <code>T</code>, so that the compiler will give an error if we mix up the types.</p> <p>Note that the constructor is still declared as <code>Pair</code> (without the type parameters).</p>"},{"location":"23-generics.html#usinginstanting-a-generic-type","title":"Using/Instanting a Generic Type","text":"<p>To use a generic type, we have to pass in type arguments, which itself can be a non-generic type, a generic type, or another type parameter that has been declared.  Once a generic type is instantiated, it is called a parameterized type.</p> <p>To avoid potential human errors leading to <code>ClassCastException</code> in the example above, we can use the generic version of <code>Pair</code> as follows, taking in two non-generic types:</p> <pre><code>Pair&lt;String,Integer&gt; foo() {\nreturn new Pair&lt;String,Integer&gt;(\"hello\", 4);\n}\n\nPair&lt;String,Integer&gt; p = foo();\nInteger i = (Integer) p.getFirst(); // compile-time error\n</code></pre> <p>With the parameterized type <code>Pair&lt;String,Integer&gt;</code>, the return type of <code>getFirst</code> is bound to <code>String</code>, and the compiler now have enough type information to check and give us an error since we try to cast a <code>String</code> to an <code>Integer</code>.</p> <p>Note that we use <code>Integer</code> instead of <code>int</code>, since only reference types can be used as type arguments.</p> <p>Just like you can pass a parameter of a method to another method, we can pass the type parameter of a generic type to another:</p> <pre><code>class DictEntry&lt;T&gt; extends Pair&lt;String,T&gt; {\n:\n}\n</code></pre> <p>We define a generic class called <code>DictEntry&lt;T&gt;</code> with a single type parameter <code>T</code> that extends from <code>Pair&lt;String,T&gt;</code>, where <code>String</code> is the first type argument (in place of <code>S</code>), while the type parameter <code>T</code> from <code>DictEntry&lt;T&gt;</code> is passed as the type argument for <code>T</code> of <code>Pair&lt;String,T&gt;</code>.</p>"},{"location":"23-generics.html#generic-methods","title":"Generic Methods","text":"<p>Methods can be parameterized with a type parameter as well.  Consider the <code>contains</code> method, which we now put within a class for clarity.</p> <pre><code>class A {\n// version 0.1 (with polymorphism)\npublic static boolean contains(Object[] array, Object obj) {\nfor (Object curr : array) {\nif (curr.equals(obj)) {\nreturn true;\n}\n}\nreturn false;\n}\n}\n</code></pre> <p>While using this method does not involve narrowing type conversion and type casting, it is a little to general -- it allows us to call <code>contains</code> in a nonsensical way, like this: <pre><code>String[] strArray = new String[] { \"hello\", \"world\" };\nA.contains(strArray, 123);\n</code></pre></p> <p>Searching for an integer within an array of strings is a futile attempt!  Let's constrain the type of the object to search for to be the same as the type of the array.  We can make this type the parameter to this method:</p> <pre><code>class A {\n// version 0.4 (with generics)\npublic static &lt;T&gt; boolean contains(T[] array, T obj) {\nfor (T curr : array) {\nif (curr.equals(obj)) {\nreturn true;\n}\n}\nreturn false;\n}\n}\n</code></pre> <p>The above shows an example of a generic method.  The type parameter <code>T</code> is declared within <code>&lt;</code> and <code>&gt;</code> and is added before the return type of the method.  This parameter <code>T</code> is then scoped within the whole method.</p> <p>To call a generic method, we need to pass in the type argument placed before the name of the method1.  For instance, <pre><code>String[] strArray = new String[] { \"hello\", \"world\" };\nA.&lt;String&gt;contains(strArray, 123); // type mismatch error\n</code></pre></p> <p>The code above won't compile since the compiler expects the second argument to also be a <code>String</code>.</p>"},{"location":"23-generics.html#bounded-type-parameters","title":"Bounded Type Parameters","text":"<p>Let's now try to apply our newly acquired trick to fix the issue with <code>findLargest</code>.  Recall that we have the following <code>findLargest</code> method (which we now put into an ad hoc class just for clarity), which requires us to perform a narrowing type conversion to cast from <code>GetAreable</code> and possibly leading to a run-time error.</p> <pre><code>class A {\n// version 0.4\npublic static GetAreable findLargest(GetAreable[] array) {\ndouble maxArea = 0;\nGetAreable maxObj = null;\nfor (GetAreable curr : array) {\ndouble area = curr.getArea();\nif (area &gt; maxArea) {\nmaxArea = area;\nmaxObj = curr;\n}\n}\nreturn maxObj;\n}\n}\n</code></pre> <p>Let's try to make this method generic, by forcing the return type to be the same as the type of the elements in the input array,</p> <pre><code>class A {\n// version 0.4\npublic static &lt;T&gt; T findLargest(T[] array) {\ndouble maxArea = 0;\nT maxObj = null;\nfor (T curr : array) {\ndouble area = curr.getArea();\nif (area &gt; maxArea) {\nmaxArea = area;\nmaxObj = curr;\n}\n}\nreturn maxObj;\n}\n}\n</code></pre> <p>The code above won't compile, since the compiler cannot be sure that it can find the method <code>getArea()</code> in type <code>T</code>.  In contrast, when we run <code>contains</code>, we had no issue since we are invoking the method <code>equals</code>, which exists in any reference type in Java.</p> <p>Since we intend to use <code>findLargest</code> only in classes that implement the <code>GetAreable</code> interface and supports the <code>getArea()</code> method, we can put a constraint on <code>T</code>.  We can say that <code>T</code> must be a subtype of <code>GetAreable</code> when we specify the type parameter:</p> <pre><code>class A {\n// version 0.5\npublic static &lt;T extends GetAreable&gt; T findLargest(T[] array) {\ndouble maxArea = 0;\nT maxObj = null;\nfor (T curr : array) {\ndouble area = curr.getArea();\nif (area &gt; maxArea) {\nmaxArea = area;\nmaxObj = curr;\n}\n}\nreturn maxObj;\n}\n}\n</code></pre> <p>We use the keyword <code>extends</code> here to indicate that <code>T</code> must be a subtype of <code>GetAreable</code>.  It is unfortunate that Java decides to use the term <code>extends</code> for any type of subtyping when declaring a bounded type parameter, even if the supertype (such as <code>GetAreable</code>) is an interface.</p> <p>We can use bounded type parameters for declaring generic classes as well.  For instance, Java has a generic interface <code>Comparable&lt;T&gt;</code>, which dictates the implementation of the following <code>int compareTo(T t)</code> for any concrete class that implements the interface.   Any class that implements the <code>Comparable&lt;T&gt;</code> interface can be compared with an instance of type <code>T</code> to establish an ordering.  Such ordering can be useful for sorting objects, for instance.</p> <p>Suppose we want to compare two <code>Pair</code> instances, by comparing the first element in the pair, we could do the following:</p> <pre><code>class Pair&lt;S extends Comparable&lt;S&gt;,T&gt; implements Comparable&lt;Pair&lt;S,T&gt;&gt; {\nprivate S first;\nprivate T second;\n\npublic Pair(S first, T second) {\nthis.first = first;\nthis.second = second;\n}\n\nS getFirst() {\nreturn this.first;\n}\n\nT getSecond() {\nreturn this.second;\n}\n\n@Override\npublic int compareTo(Pair&lt;S,T&gt; s1) {\nreturn this.first.compareTo(s1.first);\n}\n\n@Override\npublic String toString() {\nreturn this.first + \" \" + this.second;\n}\n}\n</code></pre> <p>Let's look at what it means:</p> <ul> <li>We declared <code>Pair</code> to be a generic type of two type parameters: the first one <code>S</code> is bounded and must be a subtype of <code>Comparable&lt;S&gt;</code>.  This bound is self-referential, but it is intuitive -- we say that <code>S</code> must be comparable to itself, which is common in many use cases.</li> <li>Since we want to compare two <code>Pair</code> instances, we make <code>Pair</code> implements the <code>Comparable</code> interface too, passing in <code>Pair&lt;S,T&gt;</code> as the type argument to <code>Comparable</code>.</li> </ul> <p>Let's see this in action with <code>Arrays::sort</code> method, which sorts an array based on the ordering defined by <code>compareTo</code>.</p> <pre><code>    Object[] array = new Object[] {\nnew Pair&lt;String,Integer&gt;(\"Alice\", 1),\nnew Pair&lt;String,Integer&gt;(\"Carol\", 2),\nnew Pair&lt;String,Integer&gt;(\"Bob\", 3),\nnew Pair&lt;String,Integer&gt;(\"Dave\", 4),\n};\n\njava.util.Arrays.sort(array);\n\nfor (Object o : array) {\nSystem.out.println(o);\n}\n</code></pre> <p>You will see the pairs are sorted by the first element.</p> <ol> <li> <p>Java actually can infer the type using the type inference mechanism and allows us to skip the type argument, but for clarity, we insist on specifying the type explicitly until students get used to the generic types and reasoning about types.\u00a0\u21a9</p> </li> </ol>"},{"location":"24-erasure.html","title":"Unit 24: Type Erasure","text":"<p>After taking this unit, students are expected to:</p> <ul> <li>understand that generics are implemented with type erasure in Java</li> <li>understand that type information is not fully available during run-time when generics are used, and problems that this could cause</li> <li>be aware that arrays and generics don't mix well in Java</li> <li>know the terms reifiable type and heap pollution.</li> </ul>"},{"location":"24-erasure.html#implementing-generics","title":"Implementing Generics","text":"<p>There are several ways one could implement generics in a programming language.</p> <p>For instance, in C#, every instantiation of a generic type causes new code to be generated for that instantiated type.  For instance, instantiating <code>Pair&lt;S,T&gt;</code> into <code>Pair&lt;String,Integer&gt;</code> causes a new type to be generated during run-time.  In C++ and in Rust, instantiating <code>Pair&lt;String,Integer&gt;</code> causes new code to be generated during compile-time.  This approach is sometimes called code specialization.</p> <p>Java takes a code sharing approach, instead of creating a new type for every instantiation, it chooses to erase the type parameters and type arguments during compilation (after type checking, of course).  Thus, there is only one representation of the generic type in the generated code, representing all the instantiated generic types, regardless of the type arguments.  </p> <p>Part of the reason to do this is for compatibility with the older version of Java.  Java introduces generics only from version 5 onwards.  Prior to version 5, one has to use <code>Object</code> to implement classes that are general enough to works on multiple types, similar to what we did with <code>Pair</code> here:</p> <pre><code>class Pair {\nprivate Object first;\nprivate Object second;\n\npublic Pair(Object first, Object second) {\nthis.first = first;\nthis.second = second;\n}\n\nObject getFirst() {\nreturn this.first;\n}\n\nObject getSecond() {\nreturn this.second;\n}\n}\n</code></pre> <p>The Java type erasure process transforms: <pre><code>class Pair&lt;S,T&gt; {\nprivate S first;\nprivate T second;\n\npublic Pair(S first, T second) {\nthis.first = first;\nthis.second = second;\n}\n\nS getFirst() {\nreturn this.first;\n}\n\nT getSecond() {\nreturn this.second;\n}\n}\n</code></pre></p> <p>to the version above.  Note that each type parameter <code>S</code> and <code>T</code> are replaced with <code>Object</code>.  If the type parameter is bounded, it is replaced by the bounds instead (e.g., If <code>T extends GetAreable</code>, then <code>T</code> is replaced with <code>GetAreable</code>).</p> <p>Where a generic type is instantiated and used, the code <pre><code>Integer i = new Pair&lt;String,Integer&gt;(\"hello\", 4).getSecond();\n</code></pre></p> <p>is transformed into <pre><code>Integer i = (Integer) new Pair(\"hello\", 4).getSecond();\n</code></pre></p> <p>The generated code is similar to what we would write earlier, but this is generated by the compiler after type checking, it ensures that the casting will not lead to <code>ClassCastException</code> during run-time.</p> <p>Type erasures have several important implications.  We will explore some of them below, and a few others during recitation.  </p>"},{"location":"24-erasure.html#generics-and-arrays-cant-mix","title":"Generics and Arrays Can't Mix","text":"<p>Let's consider the hypothetical code below:</p> <pre><code>// create a new array of pairs\nPair&lt;String,Integer&gt;[] pairArray = new Pair&lt;String,Integer&gt;[2];\n\n// pass around the array of pairs as an array of object\nObject[] objArray = pairArray;\n\n// put a pair into the array -- no ArrayStoreException!\nobjArray[0] = new Pair&lt;Double,Boolean&gt;(3.14, true);\n</code></pre> <p>This is similar to what we have in Unit 21, where we showed we could get an <code>ArrayStoreException</code> due to Java arrays being covariant.  We would not, however, get an exception when we try to put a pair of double and boolean, into an array meant to store a pair of string and integer!  This type checking is done during run-time, and due to type erasure, the run-time has no information about what is the type arguments to <code>Pair</code>.  The run-time sees:</p> <pre><code>// create a new array of pairs\nPair[] pairArray = new Pair[2];\n\n// pass around the array of pairs as an array of object\nObject[] objArray = pairArray;\n\n// put a pair into the array -- no ArrayStoreException!\nobjArray[0] = new Pair(3.14, true);\n</code></pre> <p>It checks that we have an array of pairs and we are putting another pair inside.   Everything checks out.  This would have caused a heap pollution, a term that refers to the situation where a variable of a parameterized type refers to an object that is not of that parameterized type.</p> <p>Heap pollution is dangerous, as now, we will get a <code>ClassCastException</code> when we do: <pre><code>// getting back a string?  -- now we get ClassCastException\nString str = pairArray[0].getFirst();\n</code></pre></p> <p>The example above shows why generics and arrays don't mix well together.  An array is what is called reifiable type -- a type where full type information is available during run-time.  It is because Java array is reifiable that the Java run-time can check what we store into the array matches the type of the array and throw an <code>ArrayStoreException</code> at us if there is a mismatch.  Java generics, however, is not reifiable due to type erasure.  Java designers have decided not to mix the two.</p> <p>The hypothetical code above actually is not a valid Java syntax.  We can't compile this line: <pre><code>Pair&lt;String,Integer&gt;[] pairArray = new Pair&lt;String,Integer&gt;[2];\n</code></pre></p> <p>The following is illegal as well: <pre><code>new Pair&lt;S,T&gt;[2];\nnew T[2];\n</code></pre></p>"},{"location":"25-unchecked.html","title":"Unit 25: Unchecked Warnings","text":"<p>After this unit, students should:</p> <ul> <li>be aware of how to use generics with an array</li> <li>be aware of unchecked warnings that compilers can give when we are using generics</li> <li>be able to make arguments why a piece of code is type-safe for simple cases</li> <li>know how to suppress warnings from compilers</li> <li>be aware of the ethics when using the @SuppressWarnings(\"unchecked\") annotation</li> <li>know what is a raw type</li> <li>be aware that raw types should never never be used in modern Java</li> </ul>"},{"location":"25-unchecked.html#creating-arrays-with-type-parameters","title":"Creating Arrays with Type Parameters","text":"<p>We have seen how arrays and generics do not mix well.  One way to get around this is to use Java Collections, a library of data structures provided by Java, instead of arrays, to store our items.  The <code>ArrayList</code> class provides similar functionality to an array, with some performance overhead.  </p> <pre><code>ArrayList&lt;Pair&lt;String,Integer&gt;&gt; pairList;\npairList = new ArrayList&lt;Pair&lt;String,Integer&gt;&gt;(); // ok\n\npairList.add(0, new Pair&lt;Double,Boolean&gt;(3.14, true));  // error\n\nArrayList&lt;Object&gt; objList = pairList;  // error\n</code></pre> <p><code>ArrayList</code> itself is a generic class, and when parameterized, it ensures type-safety by checking for appropriate types during compile time.  We can't add a <code>Pair&lt;Double,Boolean&gt;</code> object to a list of <code>Pair&lt;String,Integer&gt;</code>.  Furthermore, unlike Java array, which is covariant, generics are invariant.  There is no subtyping relationship between <code>ArrayList&lt;Object&gt;</code> and <code>ArrayList&lt;Pair&lt;String,Integer&gt;&gt;</code> so we can't alias one with another, preventing the possibility of heap pollution.</p> <p>Using <code>ArrayList</code> instead of arrays only gets around the problem of mixing arrays and generics, as a user.  <code>ArrayList</code> is implemented with an array internally after all.  As computing students, especially computer science students, it is important to know how to implement your own data structures instead of using ones provided by Java or other libraries.  </p> <p>Let's try to build one: <pre><code>// version 0.1\nclass Array&lt;T&gt; {\nprivate T[] array;\n\nArray(int size) {\nthis.array = (T[]) new Object[size];\n}\n\npublic void set(int index, T item) {\nthis.array[index] = item;\n}\n\npublic T get(int index) {\nreturn this.array[index];\n}\n\npublic T[] getArray() {\nreturn this.array;\n}\n}\n</code></pre></p> <p>This generic class is a wrapper around an array of type <code>T</code>.  Recall that we can't <code>new T[]</code> directly.  On Line 6, to get around this restriction, we <code>new</code> an <code>Object</code> array instead, and cast it to an array of <code>T[]</code> instead.</p> <p>The code now compiles, but we receive the following message: <pre><code>$ javac Array.java\nNote: Array.java uses unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked for details.\n</code></pre></p> <p>Let's do what the compiler tells us, and compile with the `-Xlint:unchecked\" flags. <pre><code>$ javac -Xlint:unchecked Array.java\nArray.java:6: warning: [unchecked] unchecked cast\n    array = (T[]) new Object[size];\n                  ^\n  required: T[]\n  found:    Object[]\n  where T is a type-variable:\n    T extends Object declared in class Array\n1 warning\n</code></pre></p> <p>We get a warning that our Line 6 is doing an unchecked cast.  </p>"},{"location":"25-unchecked.html#unchecked-warnings","title":"Unchecked Warnings","text":"<p>An unchecked warning is basically a message from the compiler that it has done what it can, and because of type erasures, there could be a run-time error that it cannot prevent. Recall that type erasure generates the following code: <pre><code>(String) array.get(0);\n</code></pre></p> <p>Since <code>array</code> is an array of <code>Object</code> instances and Java array is covariant, the compiler can't guarantee that the code it generated is safe anymore.</p> <p>Consider the following: <pre><code>Array&lt;String&gt; array = new Array&lt;String&gt;(4);\nObject[] objArray = array.getArray();\nobjArray[0] = 4;\narray.get(0);  // ClassCastException\n</code></pre></p> <p>The last line would generate a <code>ClassCastException</code>, exactly a scenario that the compiler has warned us.</p> <p>It is now up to us humans to change our code so that the code is safe.  Suppose we remove the <code>getArray</code> method from the <code>Array</code> class,</p> <pre><code>// version 0.2\nclass Array&lt;T&gt; {\nprivate T[] array;\n\nArray(int size) {\nthis.array = (T[]) new Object[size];\n}\n\npublic void set(int index, T item) {\nthis.array[index] = item;\n}\n\npublic T get(int index) {\nreturn this.array[index];\n}\n}\n</code></pre> <p>Can we prove that our code is type-safe?  In this case, yes.  Since <code>array</code> is declared as <code>private</code>, the only way someone can put something into the <code>array</code> is through the <code>Array::set</code> method1.  <code>Array::set</code> only put items of type <code>T</code> into <code>array</code>.  So the only type of objects we can get out of <code>array</code> must be of type <code>T</code>.  So we, as humans, can see that casting <code>Object[]</code> to <code>T[]</code> is type-safe.</p> <p>If we are sure (and only if we are sure) that the line <pre><code>    array = (T[]) new Object[size];\n</code></pre> is safe, we can thank the compiler for its warning and assure the compiler that everything is going to be fine.  We can do so with the <code>@SuppressWarning(\"unchecked\")</code> annotation.</p> <pre><code>// version 0.3\nclass Array&lt;T&gt; {\nprivate T[] array;\n\nArray(int size) {\n// The only way we can put an object into array is through\n// the method set() and we only put object of type T inside.\n// So it is safe to cast `Object[]` to `T[]`.\n@SuppressWarnings(\"unchecked\")\nT[] a = (T[]) new Object[size];\nthis.array = a;\n}\n\npublic void set(int index, T item) {\nthis.array[index] = item;\n}\n\npublic T get(int index) {\nreturn this.array[index];\n}\n}\n</code></pre> <p><code>@SuppressWarning</code> is a powerful annotation that suppresses warning messages from compilers.  Like everything that is powerful, we have the responsibility to use it properly:</p> <ul> <li><code>@SuppressWarning</code> can apply to declaration at a different scope: a local variable, a method, a type, etc.  We must always use <code>@SuppressWarning</code> to the most limited scope to avoid unintentionally suppressing warnings that are valid concerns from the compiler.</li> <li>We must suppress a warning only if we are sure that it will not cause a type error later.  </li> <li>We must always add a note (as a comment) to fellow programmers explaining why a warning can be safely suppressed.</li> </ul> <p>Note that since <code>@SuppressWarnings</code> cannot apply to an assignment but only to declaration, we declare a local variable <code>a</code> in the example above before assigning <code>this.array</code> to <code>a</code>.</p>"},{"location":"25-unchecked.html#raw-types","title":"Raw Types","text":"<p>Another common scenario where we can get an unchecked warning is the use of raw types.  A raw type is a generic type used without type arguments.  Suppose we do: <pre><code>Array a = new Array(4);\n</code></pre></p> <p>The code would compile perfectly.  We are using the generic <code>Array&lt;T&gt;</code> as a raw type <code>Array</code>.  Java allows this code to compile for backward compatibility.  This is anyway what the code looks like after type erasure and how we would write the code in Java before version 5.   Without a type argument, the compiler can't do any type checking at all.  We are back to the uncertainty that our code could bomb with <code>ClassCastException</code> after it ships.</p> <p>Mixing raw types with paramterized types can also lead to errors.  Consider: <pre><code>Array&lt;String&gt; a = new Array&lt;String&gt;(4);\npopulateArray(a);\nString s = a.get(0);\n</code></pre></p> <p>where the method <code>populateArray</code> uses raw types: <pre><code>void populateArray(Array a) {\na.set(0, 1234);\n}\n</code></pre></p> <p>Since we use raw types in this method, the compiler can't help us.  It will warn us: <pre><code>Array.java:24: warning: [unchecked] unchecked call to set(int,T) as a member of the raw type Array\n    a.set(0, 1234);\n         ^\n  where T is a type-variable:\n    T extends Object declared in class Array\n1 warning\n</code></pre></p> <p>If we ignore this warning or worse, suppress this warning, we will get a run-time error when we execute <code>a.get(0)</code>.</p> <p>Raw types must not be used in your code, ever.  The only exception to this rule is using it as an operand of the <code>instanceof</code> operator.  Since <code>instanceof</code> checks for run-time type and type arguments have been erased, we can only use the <code>instanceof</code> operator on raw types.</p> <ol> <li> <p>Another win for information hiding!\u00a0\u21a9</p> </li> </ol>"},{"location":"26-wildcard.html","title":"Unit 26: Wildcards","text":"<p>After going through this unit, students should:</p> <ul> <li>be aware of the meaning of wildcard <code>?</code> and bounded wildcards</li> <li>know how to use wildcards to write methods that are more flexible in accepting a range of types</li> <li>know that upper-bounded wildcard is covariant and lower-bounded wildcard is contravariant</li> <li>know the PECS principle and how to apply it</li> <li>be aware that the unbounded wildcard allows us to not use raw types in our programs</li> </ul>"},{"location":"26-wildcard.html#contains-with-arrayt","title":"<code>contains</code> with <code>Array&lt;T&gt;</code>","text":"<p>Now that we have our <code>Array&lt;T&gt;</code> class, let's modify our generic <code>contains</code> method and replace the type of the argument <code>T[]</code> with <code>Array&lt;T&gt;</code>.</p> <pre><code>class A {\n// version 0.5 (with generic array)\npublic static &lt;T&gt; boolean contains(Array&lt;T&gt; array, T obj) {\nfor (int i = 0; i &lt; array.getLength(); i++) {\nT curr = array.get(i);\nif (curr.equals(obj)) {\nreturn true;\n}\n}\nreturn false;\n}\n}\n</code></pre> <p>Similar to the version that takes in <code>T[]</code>, using generics allows us to constrain the type of the elements of the array and the object to search for to be the same.  This allows the following code to type-check correctly: <pre><code>Array&lt;String&gt; stringArray;\nArray&lt;Circle&gt; circleArray;\nCircle circle;\n:\nA.&lt;String&gt;contains(stringArray, \"hello\"); // ok\nA.&lt;Circle&gt;contains(circleArray, circle); // ok\n</code></pre></p> <p>But trying to search for a circle in an array of strings would lead to a type error: <pre><code>A.&lt;String&gt;contains(stringArray, circle); // error\n</code></pre></p> <p>Consider now having an array of shapes. <pre><code>Array&lt;Shape&gt; shapeArray;\nArray&lt;Circle&gt; circleArray;\nShape shape;\nCircle circle;\n:\nA.&lt;Shape&gt;contains(shapeArray, shape); // ok\nA.&lt;Circle&gt;contains(circleArray, circle); // ok\n</code></pre></p> <p>As expected, we can pass <code>Shape</code> as the argument for <code>T</code>, and search for a <code>Shape</code> in an instance of <code>Array&lt;Shape&gt;</code>. Similarly, we can pass <code>Circle</code> as the argument for <code>T</code> and search for a <code>Circle</code> in an instance of <code>Array&lt;Circle&gt;</code>.</p> <p>We could also look for a <code>Circle</code> instance from <code>Array&lt;Shape&gt;</code> if we pass <code>Shape</code> as the argument for <code>T</code>. <pre><code>A.&lt;Shape&gt;contains(shapeArray, circle); // ok\n</code></pre></p> <p>Note that we can pass in a <code>Circle</code> instance as a <code>Shape</code>, since <code>Circle</code> &lt;: <code>Shape</code>.</p> <p>Recall that generics are invariant in Java, i.e, there is no subtyping relationship between <code>Array&lt;Shape&gt;</code> and <code>Array&lt;Circle&gt;</code>.  <code>Array&lt;Circle&gt;</code> is not a subtype of <code>Array&lt;Shape&gt;</code>.  Otherwise, it would violate the Liskov Substitution Principle, we can put a square into an <code>Array&lt;Shape&gt;</code> instance, but we can't put a square into an <code>Array&lt;Circle&gt;</code> instance.</p> <p>So, we can't call: <pre><code>A.&lt;Circle&gt;contains(shapeArray, circle); // compilation error\n</code></pre></p> <p>The following would result in compilation errors as well: <pre><code>A.&lt;Shape&gt;contains(circleArray, shape); // compilation error\nA.&lt;Circle&gt;contains(circleArray, shape); // compilation error\n</code></pre></p> <p>Thus, with our current implementation, we can't look for a shape (which may be a circle) in an array of circles, even though this is something reasonable that a programmer might want to do.  This constraint is due to the invariance of generics -- while we avoided the possibility of run-time errors by avoiding covariance arrays, our methods have become less general.</p> <p>Let's see how we can fix this with bounded type parameters first.  We can introduce another type parameter, say <code>S</code>, to remove the constraints that the type of the array must be the same as the type of the object to search for.  I.e., we change from <pre><code>  public static &lt;T&gt; boolean contains(Array&lt;T&gt; array, T obj) { .. }\n</code></pre></p> <p>to: <pre><code>  public static &lt;S,T&gt; boolean contains(Array&lt;T&gt; array, S obj) { .. }\n</code></pre></p> <p>But we don't want to completely decouple <code>T</code> and <code>S</code>, as we want <code>T</code> to be a subtype of <code>S</code>.  We can thus make <code>T</code> a bounded type parameter, and write: <pre><code>  public static &lt;S, T extends S&gt; boolean contains(Array&lt;T&gt; array, S obj) { .. }\n</code></pre></p> <p>Now, we can search for a shape in an array of circles. <pre><code>     A.&lt;Shape,Circle&gt;contains(circleArray, shape);\n</code></pre></p>"},{"location":"26-wildcard.html#copying-to-and-from-arrayt","title":"Copying to and from <code>Array&lt;T&gt;</code>","text":"<p>Let's consider another example.  Let's add two methods <code>copyFrom</code> and <code>copyTo</code>, to <code>Array&lt;T&gt;</code> so that we can copy to and from one array to another.</p> <pre><code>// version 0.4 (with copy)\nclass Array&lt;T&gt; {\nprivate T[] array;\n\nArray(int size) {\n// The only way we can put an object into the array is through\n// the method set() and we only put an object of type T inside.\n// So it is safe to cast `Object[]` to `T[]`.\n@SuppressWarnings(\"unchecked\")\nT[] a = (T[]) new Object[size];\nthis.array = a;\n}\n\npublic void set(int index, T item) {\nthis.array[index] = item;\n}\n\npublic T get(int index) {\nreturn this.array[index];\n}\n\npublic void copyFrom(Array&lt;T&gt; src) {\nint len = Math.min(this.array.length, src.array.length);\nfor (int i = 0; i &lt; len; i++) {\nthis.set(i, src.get(i));\n}\n}\n\npublic void copyTo(Array&lt;T&gt; dest) {\nint len = Math.min(this.array.length, dest.array.length);\nfor (int i = 0; i &lt; len; i++) {\ndest.set(i, this.get(i));\n}\n}\n}\n</code></pre> <p>With this implementation, we can copy, say, an <code>Array&lt;Circle&gt;</code> to another <code>Array&lt;Circle&gt;</code>, an <code>Array&lt;Shape&gt;</code> to another <code>Array&lt;Shape&gt;</code>, but not an <code>Array&lt;Circle&gt;</code> into an <code>Array&lt;Shape&gt;</code>, even though each circle is a shape!</p> <pre><code>Array&lt;Circle&gt; circleArray;\nArray&lt;Shape&gt; shapeArray;\n:\nshapeArray.copyFrom(circleArray); // error\ncircleArray.copyTo(shapeArray); // error\n</code></pre>"},{"location":"26-wildcard.html#upper-bounded-wildcards","title":"Upper-Bounded Wildcards","text":"<p>Let's consider the method <code>copyFrom</code>.  We should be able to copy from an array of shapes, an array of circles, an array of squares, etc, into an array of shapes.  In other words, we should be able to copy from an array of any subtype of shapes into an array of shapes.  Is there such a type in Java?</p> <p>The type that we are looking for is <code>Array&lt;? extends Shape&gt;</code>.  This generic type uses the wildcard <code>?</code>.  Just like a wild card in card games, it is a substitute for any type.   A wildcard can be bounded.  Here, this wildcard is upper-bounded by <code>Shape</code>, i.e., it can be substituted with either <code>Shape</code> or any subtype of <code>Shape</code>.</p> <p>The upper-bounded wildcard is an example of covariance. The upper-bounded wildcard has the following subtyping relations:</p> <ul> <li>If <code>S</code> &lt;: <code>T</code>, then <code>A&lt;? extends S&gt;</code> &lt;: <code>A&lt;? extends T&gt;</code> (covariance)</li> <li>For any type <code>S</code>, <code>A&lt;S&gt;</code> &lt;: <code>A&lt;? extends S&gt;</code></li> </ul> <p>For instance, we have:</p> <ul> <li><code>Array&lt;Circle&gt;</code> &lt;: <code>Array&lt;? extends Circle&gt;</code></li> <li>Since <code>Circle</code> &lt;: <code>Shape</code>, <code>Array&lt;? extends Circle&gt;</code> &lt;: <code>Array&lt;? extends Shape&gt;</code></li> <li>Since subtyping is transitive, we have <code>Array&lt;Circle&gt;</code> &lt;: <code>Array&lt;? extends Shape&gt;</code></li> </ul> <p>Because <code>Array&lt;Circle&gt;</code> &lt;: <code>Array&lt;? extends Shape&gt;</code>, if we change the type of the parameter to <code>copyFrom</code> to <code>Array&lt;? extends T&gt;</code>,  <pre><code>  public void copyFrom(Array&lt;? extends T&gt; src) {\nint len = Math.min(this.array.length, src.array.length);\nfor (int i = 0; i &lt; len; i++) {\nthis.set(i, src.get(i));\n}\n}\n</code></pre></p> <p>We can now call: <pre><code>shapeArray.copyFrom(circleArray); // ok\n</code></pre></p> <p>without error.</p>"},{"location":"26-wildcard.html#lower-bounded-wildcards","title":"Lower-Bounded Wildcards","text":"<p>Let's now try to allow copying of an <code>Array&lt;Circle&gt;</code> to <code>Array&lt;Shape&gt;</code>. <pre><code>circleArray.copyTo(shapeArray); </code></pre></p> <p>by doing the same thing: <pre><code>  public void copyTo(Array&lt;? extends T&gt; dest) {\nint len = Math.min(this.array.length, dest.array.length);\nfor (int i = 0; i &lt; len; i++) {\ndest.set(i, this.get(i));\n}\n}\n</code></pre></p> <p>The code above would not compile.  We will get the following somewhat cryptic message when we compile with the <code>-Xdiags:verbose</code> flag: <pre><code>Array.java:32: error: method set in class Array&lt;T&gt; cannot be applied to given types;\ndest.set(i, this.get(i));\n^\nrequired: int,CAP#1\nfound: int,T\nreason: argument mismatch; T cannot be converted to CAP#1\nwhere T is a type-variable:\nT extends Object declared in class Array\nwhere CAP#1 is a fresh type-variable:\nCAP#1 extends T from capture of ? extends T\n1 error\n</code></pre></p> <p>Let's try not to understand what the error message means first, and think about what could go wrong if the compiler allows: <pre><code>        dest.set(i, this.get(i));\n</code></pre></p> <p>Here, we are trying to put an instance with compile-time type <code>T</code> into an array that contains elements with the compile-time type of <code>T</code> or subtype of <code>T</code>.  </p> <p>The <code>copyTo</code> method of <code>Array&lt;Shape&gt;</code> would allow an <code>Array&lt;Circle&gt;</code> as an argument, and we would end up putting instance with compile-time type <code>Shape</code> into <code>Array&lt;Circle&gt;</code>.  If all the shapes are circles, we are fine, but there might be other shapes (rectangles, squares) in <code>this</code> instance of <code>Array&lt;Shape&gt;</code>, and we can't fit them into <code>Array&lt;Circle&gt;</code>!  Thus, the line  <pre><code>        dest.set(i, this.get(i));\n</code></pre></p> <p>is not type-safe and could lead to <code>ClassCastException</code> during run-time.  </p> <p>Where can we copy our shapes into?  We can only copy them safely into an <code>Array&lt;Shape&gt;</code>, <code>Array&lt;Object&gt;</code>, <code>Array&lt;GetAreable&gt;</code>, for instance.  In other words, into arrays containing <code>Shape</code> or supertype of <code>Shape</code>.  </p> <p>We need a wildcard lower-bounded by <code>Shape</code>, and Java's syntax for this is <code>? super Shape</code>.  Using this new notation, we can replace the type for <code>dest</code> with:</p> <pre><code>  public void copyTo(Array&lt;? super T&gt; dest) {\nint len = Math.min(this.array.length, dest.array.length);\nfor (int i = 0; i &lt; len; i++) {\ndest.set(i, this.get(i));\n}\n}\n</code></pre> <p>The code would now type-check and compile.</p> <p>The lower-bounded wildcard is an example of contravariance.  We have the following subtyping relations:</p> <ul> <li>If <code>S</code> &lt;: <code>T</code>, then <code>A&lt;? super T&gt;</code> &lt;: <code>A&lt;? super S&gt;</code> (contravariance)</li> <li>For any type <code>S</code>, <code>A&lt;S&gt;</code> &lt;: <code>A&lt;? super S&gt;</code></li> </ul> <p>For instance, we have:</p> <ul> <li><code>Array&lt;Shape&gt;</code> &lt;: <code>Array&lt;? super Shape&gt;</code></li> <li>Since <code>Circle</code> &lt;: <code>Shape</code>, <code>Array&lt;? super Shape&gt;</code> &lt;: <code>Array&lt;? super Circle&gt;</code></li> <li>Since subtyping is transitive, we have <code>Array&lt;Shape&gt;</code> &lt;: <code>Array&lt;? super Circle&gt;</code></li> </ul> <p>The line of code below now compiles: <pre><code>circleArray.copyTo(shapeArray); </code></pre></p> <p>Our new <code>Array&lt;T&gt;</code> is now <pre><code>// version 0.5 (with flexible copy using wildcards)\nclass Array&lt;T&gt; {\nprivate T[] array;\n\nArray(int size) {\n// The only way we can put an object into the array is through\n// the method set() and we only put an object of type T inside.\n// So it is safe to cast `Object[]` to `T[]`.\n@SuppressWarnings(\"unchecked\")\nT[] a = (T[]) new Object[size];\nthis.array = a;\n}\n\npublic void set(int index, T item) {\nthis.array[index] = item;\n}\n\npublic T get(int index) {\nreturn this.array[index];\n}\n\npublic void copyFrom(Array&lt;? extends T&gt; src) {\nint len = Math.min(this.array.length, src.array.length);\nfor (int i = 0; i &lt; len; i++) {\nthis.set(i, src.get(i));\n}\n}\n\npublic void copyTo(Array&lt;? super T&gt; dest) {\nint len = Math.min(this.array.length, dest.array.length);\nfor (int i = 0; i &lt; len; i++) {\ndest.set(i, this.get(i));\n}\n}\n}\n</code></pre></p>"},{"location":"26-wildcard.html#pecs","title":"PECS","text":"<p>Now we will introduce the rule that governs when we should use the upper-bounded wildcard <code>? extends T</code> and a lower-bounded wildcard <code>? super T</code>.  It depends on the role of the variable.   If the variable is a producer that returns a variable of type <code>T</code>, it should be declared with the wildcard <code>? extends T</code>.  Otherwise, if it is a consumer that accepts a variable of type <code>T</code>, it should be declared with the wildcard <code>? super T</code>.</p> <p>As an example, the variable <code>src</code> in <code>copyFrom</code> above acts as a producer.  It produces a variable of type <code>T</code>.  The type parameter for <code>src</code> must be either <code>T</code> or a subtype of <code>T</code> to ensure type safety.  So the type for <code>src</code> is <code>Array&lt;? extends T&gt;</code>.    </p> <p>On the other hand, the variable <code>dest</code> in <code>copyTo</code> above acts as a consumer.  It consumes a variable of type <code>T</code>.  The type parameter of <code>dest</code> must be either <code>T</code> or supertype of <code>T</code> for it to be type-safe.  As such, the type for <code>dest</code> is <code>Array&lt;? super T&gt;</code>.  </p> <p>This rule can be remembered with the mnemonic PECS, or \"Producer Extends; Consumer Super\".</p>"},{"location":"26-wildcard.html#unbounded-wildcards","title":"Unbounded Wildcards","text":"<p>It is also possible to have unbounded wildcards, such as <code>Array&lt;?&gt;</code>.  <code>Array&lt;?&gt;</code> is the supertype of every parameterized type of <code>Array&lt;T&gt;</code>.  Recall that <code>Object</code> is the supertype of all reference types.  When we want to write a method that takes in a reference type, but we want the method to be flexible enough, we can make the method accept a parameter of type <code>Object</code>.  Similarly, <code>Array&lt;?&gt;</code> is useful when you want to write a method that takes in an array of some specific type, and you want the method to be flexible enough to take in an array of any type.  For instance, if we have:</p> <pre><code>void foo(Array&lt;?&gt; array) {\n}\n</code></pre> <p>We could call it with: <pre><code>Array&lt;Circle&gt; ac;\nArray&lt;String&gt; as;\nfoo(ac); // ok\nfoo(as); // ok\n</code></pre></p> <p>A method that takes in generic type with unbounded wildcard would be pretty restrictive, however.  Consider this: <pre><code>void foo(Array&lt;?&gt; array) {\n:\nx = array.get(0);\narray.set(0, y);\n\n}\n</code></pre></p> <p>What should the type of the returned element <code>x</code> be?  Since <code>Array&lt;?&gt;</code> is the supertype of all possible <code>Array&lt;T&gt;</code>, the method <code>foo</code> can receive an instance of <code>Array&lt;Circle&gt;</code>, <code>Array&lt;String&gt;</code>, etc. as an argument.  The only safe choice for the type of <code>x</code> is <code>Object</code>.</p> <p>The type for <code>y</code> is every more restrictive.  Since there are many possibilities of what type of array it is receiving, we can only put <code>null</code> into <code>array</code>! </p> <p>There is an important distinction to be made between <code>Array</code>, <code>Array&lt;?&gt;</code> and <code>Array&lt;Object&gt;</code>.  Whilst <code>Object</code> is the supertype of all <code>T</code>, it does not follow that <code>Array&lt;Object&gt;</code> is the supertype of all <code>Array&lt;T&gt;</code> due to generics being invariant. Therefore, the following statements will fail to compile:</p> <pre><code>Array&lt;Object&gt; a1 = new Array&lt;String&gt;(0); Array&lt;Object&gt; a2 = new Array&lt;Integer&gt;(0);\n</code></pre> <p>Whereas the following statements will compile:</p> <pre><code>Array&lt;?&gt; a1 = new Array&lt;String&gt;(0); // Does compile\nArray&lt;?&gt; a2 = new Array&lt;Integer&gt;(0); // Does compile\n</code></pre> <p>If we have a function <pre><code>void bar(Array&lt;Object&gt; array) {\n}\n</code></pre></p> <p>Then, the method <code>bar</code> is restricted to only takes in an <code>Array&lt;Object&gt;</code> instance as argument. <pre><code>Array&lt;Circle&gt; ac;\nArray&lt;String&gt; as;\nbar(ac); // compilation error\nbar(as); // compilation error\n</code></pre></p> <p>What about raw types?  Suppose we write the method below that accepts a raw type <pre><code>void qux(Array array) {\n}\n</code></pre></p> <p>Then, the method <code>qux</code> is also flexible enough to take in any <code>Array&lt;T&gt;</code> as argument. <pre><code>Array&lt;Circle&gt; ac;\nArray&lt;String&gt; as;\nqux(ac); qux(as); </code></pre></p> <p>Unlike <code>Array&lt;?&gt;</code>, however, the compiler does not have the information about the type of the component of the array, and cannot type check for us.  It is up to the programmer to ensure type safety.  For this reason, we must not use raw types.</p> <p>Intuitively, we can think of <code>Array&lt;?&gt;</code>, <code>Array&lt;Object&gt;</code>, and <code>Array</code> as follows:</p> <ul> <li><code>Array&lt;?&gt;</code> is an array of objects of some specific, but unknown type;</li> <li><code>Array&lt;Object&gt;</code> is an array of <code>Object</code> instances, with type checking by the compiler;</li> <li><code>Array</code> is an array of <code>Object</code> instances, without type checking.</li> </ul>"},{"location":"26-wildcard.html#back-to-contains","title":"Back to <code>contains</code>","text":"<p>Now, let's simplify our <code>contains</code> methods with the help of wildcards.  Recall that to add flexibility into the method parameter and allow us to search for a shape in an array of circles, we have modified our method into the following:</p> <pre><code>class A {\n// version 0.6 (with generic array)\npublic static &lt;S,T extends S&gt; boolean contains(Array&lt;T&gt; array, S obj) {\nfor (int i = 0; i &lt; array.getLength(); i++) {\nT curr = array.get(i);\nif (curr.equals(obj)) {\nreturn true;\n}\n}\nreturn false;\n}\n}\n</code></pre> <p>Can we make this simpler using wildcards?  Since we want to search for an object of type <code>S</code> in an array of its subtype, we can remove the second parameter type <code>T</code> and change the type of array to <code>Array&lt;? extends S&gt;</code>:</p> <pre><code>class A {\n// version 0.7 (with wild cards array)\npublic static &lt;S&gt; boolean contains(Array&lt;? extends S&gt; array, S obj) {\nfor (int i = 0; i &lt; array.getLength(); i++) {\nS curr = array.get(i);\nif (curr.equals(obj)) {\nreturn true;\n}\n}\nreturn false;\n}\n}\n</code></pre> <p>We can double-check that <code>array</code> is a producer (it produces <code>curr</code> on Line 5) and this follows the PECS rules. Now, we can search for a shape in an array of circles. <pre><code>     A.&lt;Shape&gt;contains(circleArray, shape);\n</code></pre></p>"},{"location":"26-wildcard.html#revisiting-raw-types","title":"Revisiting Raw Types","text":"<p>In previous units, we said that you may use raw types only in two scenarios. Namely, when using generics and <code>instanceof</code> together, and when creating arrays. However, with unbounded wildcards, we can now see it is possible to remove both of these exceptions. We can now use <code>instanceof</code> in the following way:</p> <pre><code>a instanceof A&lt;?&gt; </code></pre> <p>Recall that in the example above, <code>instanceof</code> checks of the run-time type of <code>a</code>.  Previously, we said that we can't check for, say, <pre><code>a instanceof A&lt;String&gt; </code></pre></p> <p>since the type argument <code>String</code> is not available during run-time due to erasure.  Using <code>&lt;?&gt;</code> fits the purpose here because it explicitly communicates to the reader of the code that we are checking that <code>a</code> is an instance of <code>A</code> with some unknown (erased) type parameter.</p> <p>Similarly, we can create arrays in the following way: <pre><code>new Comparable&lt;?&gt;[10];\n</code></pre></p> <p>Previously, we said that we could not create an array using the expression <code>new Comparable&lt;String&gt;[10]</code> because generics and arrays do not mix well.  Java insists that the array creation expression uses a reifiable type, i.e., a type where no type information is lost during compilation.  Unlike <code>Comparable&lt;String&gt;</code>, however, <code>Comparible&lt;?&gt;</code> is reifiable.  Since we don't know what is the type of <code>?</code>, no type information is lost during erasure!</p> <p>Going forward now in the module, we will not permit the use of raw types in any scenario.</p>"},{"location":"27-inference.html","title":"Unit 27: Type Inference","text":"<p>After this unit, students should:</p> <ul> <li>be familiar how Java infers missing type arguments</li> </ul> <p>We have seen in the past units the importance of types in preventing run-time errors.  Utilizing types properly can help programmers catch type mismatch errors that could have caused a program to fail during run-time, possibly after it is released and shipped.</p> <p>By including type information everywhere in the code, we make the code explicit in communicating the intention of the programmers to the readers.  Although it makes the code more verbose and cluttered -- it is a small price to pay for ensuring the type correctness of the code and reducing the likelihood of bugs as the code complexity increases.</p> <p>Java, however, allows the programmer to skip some of the type annotations and try to infer the type argument of a generic method and a generic type, through the type inference process.</p> <p>The basic idea of type inference is simple: Java will looking among the matching types that would lead to successful type checks, and pick the most specific ones.</p>"},{"location":"27-inference.html#diamond-operator","title":"Diamond Operator","text":"<p>One example of type inference is the diamond operator <code>&lt;&gt;</code> when we <code>new</code> an instance of a generic type: <pre><code>Pair&lt;String,Integer&gt; p = new Pair&lt;&gt;();\n</code></pre></p> <p>Java can infer that <code>p</code> should be an instance of <code>Pair&lt;String,Integer&gt;</code> since the compile-time type of <code>p</code> is <code>Pair&lt;String,Integer&gt;</code>.  The line above is equivalent to: <pre><code>Pair&lt;String,Integer&gt; p = new Pair&lt;String,Integer&gt;();\n</code></pre></p>"},{"location":"27-inference.html#type-inferencing","title":"Type Inferencing","text":"<p>We have been invoking  <pre><code>class A {\n// version 0.7 (with wild cards array)\npublic static &lt;S&gt; boolean contains(Array&lt;? extends S&gt; array, S obj) {\nfor (int i = 0; i &lt; array.getLength(); i++) {\nS curr = array.get(i);\nif (curr.equals(obj)) {\nreturn true;\n}\n}\nreturn false;\n}\n}\n</code></pre></p> <p>by explicitly passing in the type argument <code>Shape</code> (also called type witness in the context of type inference). <pre><code>     A.&lt;Shape&gt;contains(circleArray, shape);\n</code></pre></p> <p>We could remove the type argument <code>&lt;Shape&gt;</code> so that we can call <code>contains</code> just like a non-generic method: <pre><code>     A.contains(circleArray, shape);\n</code></pre></p> <p>and Java could still infer that <code>S</code> should be <code>Shape</code>.  The type inference process looks for all possible types that match.  In this example, the type of the two parameters must match.  Let's consider each individually first:</p> <ul> <li>An object of type <code>Shape</code> is passed as an argument to the parameter <code>obj</code>.  So <code>S</code> might be <code>Shape</code> or, if widening type conversion has occurred, one of the other supertypes of <code>Shape</code>. Therefore, we can say that <code>Shape &lt;: S &lt;: Object</code>.</li> <li>An <code>Array&lt;Circle&gt;</code> has been passed into <code>Array&lt;? extends S&gt;</code>.  A widening type conversion occurred here, so we need to find all possible <code>S</code> such that <code>Array&lt;Circle&gt;</code> &lt;: <code>Array&lt;? extends S&gt;</code>.  This is true only if <code>S</code> is <code>Circle</code>, or another supertype of <code>Circle</code>. Therefore, we can say that <code>Circle &lt;: S &lt;: Object</code>.</li> </ul> <p>Solving for these two constraints on <code>S</code>, we get the following: <pre><code>Shape &lt;: S &lt;: Object \n</code></pre></p> <p>We therefore know that <code>S</code> could be <code>Shape</code> or one of its supertypes: <code>GetAreable</code> and <code>Object</code>.   We choose the lower bound, so <code>S</code> is inferred to be <code>Shape</code>.</p> <p>Type inferencing can have unexpected consequences.  Let's consider an older version of <code>contains</code> that we wrote:</p> <pre><code>class A {\n// version 0.4 (with generics)\npublic static &lt;T&gt; boolean contains(T[] array, T obj) {\nfor (T curr : array) {\nif (curr.equals(obj)) {\nreturn true;\n}\n}\nreturn false;\n}\n}\n</code></pre> <p>Recall that we want to prevent nonsensical calls where we are searching for an integer in an array of strings. <pre><code>String[] strArray = new String[] { \"hello\", \"world\" };\nA.&lt;String&gt;contains(strArray, 123); // type mismatch error\n</code></pre></p> <p>But, if we write: <pre><code>A.contains(strArray, 123); // ok!  (huh?)\n</code></pre></p> <p>The code compiles!  Let's go through the type inferencing steps to understand what happened.  Again, we have two parameters:</p> <ul> <li><code>strArray</code> has the type <code>String[]</code> and is passed to <code>T[]</code>.  So <code>T</code> must be <code>String</code> or its superclass <code>Object</code> (i.e. <code>String &lt;: T &lt;: Object</code>).  The latter is possible since Java array is covariant.</li> <li><code>123</code> is passed as type <code>T</code>.  The value is treated as <code>Integer</code> and, therefore, <code>T</code> must be either <code>Integer</code>,  or its superclasses <code>Number</code>, and <code>Object</code> (i.e. <code>Integer &lt;: T &lt;: Object</code>). </li> </ul> <p>Solving for these two constraints: <pre><code>T &lt;: Object\n</code></pre> Therefore <code>T</code> can only have the type <code>Object</code>, so Java infers <code>T</code> to be <code>Object</code>.  The code above is equivalent to:</p> <pre><code>A.&lt;Object&gt;contains(strArray, 123);\n</code></pre> <p>And our version 0.4 of <code>contains</code> actually is quite fragile and does not work as intended.  We were bitten by the fact that the Java array is covariant, again.</p>"},{"location":"27-inference.html#target-typing","title":"Target Typing","text":"<p>The example above performs type inferencing on the parameters of the generic methods.  Type inferencing can involve the type of the expression as well.  This is known as target typing.  Take the following upgraded version of <code>findLargest</code>:</p> <pre><code>// version 0.6 (with Array&lt;T&gt;)\npublic static &lt;T extends GetAreable&gt; T findLargest(Array&lt;? extends T&gt; array) {\ndouble maxArea = 0;\nT maxObj = null;\nfor (int i = 0; i &lt; array.getLength(); i++) {\nT curr = array.get(i);\ndouble area = curr.getArea();\nif (area &gt; maxArea) {\nmaxArea = area;\nmaxObj = curr;\n}\n}\nreturn maxObj;\n}\n</code></pre> <p>and we call <pre><code>Shape o = A.findLargest(new Array&lt;Circle&gt;(0));\n</code></pre></p> <p>We have a few more constraints to check:</p> <ul> <li>Due to target typing, the returning type of <code>T</code> must be a subtype of <code>Shape</code> (i.e. <code>T &lt;: Shape</code>)</li> <li>Due to the bound of the type parameter, <code>T</code> must be a subtype of <code>GetAreable</code> (i.e. <code>T &lt;: GetAreable</code>)</li> <li><code>Array&lt;Circle&gt;</code> must be a subtype of <code>Array&lt;? extends T&gt;</code>, so <code>T</code> must be a supertype of <code>Circle</code> (i.e. <code>Circle &lt;: T &lt;: Object</code>)</li> </ul> <p>Solving for all three of these constraints: <pre><code>Circle &lt;: T &lt;: Shape\n</code></pre></p> <p>The lower bound is <code>Circle</code>, so the call above is equivalent to: <pre><code>Shape o = A.&lt;Circle&gt;findLargest(new Array&lt;Circle&gt;(0));\n</code></pre></p>"},{"location":"27-inference.html#further-type-inference-examples","title":"Further Type Inference Examples","text":"<p>We now return to our <code>Circle</code> and <code>ColoredCircle</code> classes and the <code>GetAreable</code> interface. Recall that <code>Circle</code> implements <code>GetAreable</code> and <code>ColoredCircle</code> inherits from <code>Circle</code>.</p> <p>Now lets consider the following method signature of a generic method <code>foo</code>:</p> <pre><code>public &lt;T extends Circle&gt; T foo(Array&lt;? extends T&gt; array)\n</code></pre> <p>Then we consider the following code excerpt:</p> <pre><code>ColoredCircle c = foo(new Array&lt;GetAreable&gt;());\n</code></pre> <p>What does the java compiler infer <code>T</code> to be? Lets look at all of the constraints on <code>T</code>.</p> <ul> <li> <p>First we can say that the return type of <code>foo</code> must be a subtype of <code>ColoredCircle</code>, therefore we can say <code>T &lt;: ColoredCircle</code>.</p> </li> <li> <p><code>T</code> is also a bounded type parameter, and therefore we also know <code>T &lt;: Circle</code>.</p> </li> <li> <p>Our method argument is of type <code>Array&lt;GetAreable&gt;</code> and must be a subtype of <code>Array&lt;? extends T&gt;</code>, so <code>T</code> must be a supertype of <code>GetAreable</code> (i.e. <code>GetAreable &lt;: T &lt;: Object</code>).</p> </li> </ul> <p>We can see that there no solution to our contraints, <code>T</code> can not be both a subtype of <code>ColoredCircle</code> and a supertype of <code>GetAreable</code> and therefore the Java compiler can not find a type <code>T</code>. The Java compiler will throw an error stating the inference variable <code>T</code> has incompatible bounds.</p> <p>Lets consider, one final example using the following method signature of a generic method <code>bar</code>:</p> <pre><code>public &lt;T extends Circle&gt; T bar(Array&lt;? super T&gt; array)\n</code></pre> <p>Then we consider the following code excerpt:</p> <pre><code>GetAreable c = bar(new Array&lt;Circle&gt;());\n</code></pre> <p>What does the java compiler infer <code>T</code> to be? Again, lets look at all of the constraints on <code>T</code>.</p> <ul> <li> <p>We can say that the return type of <code>bar</code> must be a subtype of <code>GetAreable</code>, therefore we can say <code>T &lt;: GetAreable</code>.</p> </li> <li> <p>Our method argument is of type <code>Array&lt;Circle&gt;</code> and must be a subtype of <code>Array&lt;? super T&gt;</code>, so <code>T</code> must be a subtype of <code>Circle</code> (i.e. <code>T &lt;: Circle</code>).</p> </li> </ul> <p>Solving for these two constraints: <pre><code>T &lt;: Circle\n</code></pre></p> <p>Whilst <code>ColoredCircle</code> is also a subtype of <code>Circle</code> it is not included in the above statement and therefore the compiler does not consider this class during type inference. Indeed, the compiler cannot be aware1 of all subtypes of <code>Circle</code> and there could be more than one subtype. Therefore <code>T</code> can only have the type <code>Circle</code>, so Java infers <code>T</code> to be <code>Circle</code>. </p>"},{"location":"27-inference.html#rules-for-type-inference","title":"Rules for Type Inference","text":"<p>We now summarize the steps for type inference. First, we figure out all of the type constraints on our type parameters, and then we solve these constraints. If no type can satisfy all the constraints, we know that Java will fail to compile. If in resolving the type constraints for a given type parameter <code>T</code> we are left with:</p> <ul> <li><code>Type1 &lt;: T &lt;: Type2</code>, then <code>T</code> is inferred as <code>Type1</code></li> <li><code>Type1 &lt;: T</code>2, then <code>T</code> is inferred as <code>Type1</code></li> <li><code>T &lt;: Type2</code>, then <code>T</code> is inferred as <code>Type2</code></li> </ul> <p>where <code>Type1</code> and <code>Type2</code> are arbitrary types.</p> <ol> <li> <p>Due to evolving specifications of software, at the time of compilation, a subtype may not have even been conceived of or written yet!\u00a0\u21a9</p> </li> <li> <p>Note that <code>T &lt;: Object</code> is implicit here. We can see that this case could also be written as <code>Type1 &lt;: T &lt;: Object</code>, and would therefore also be explained by the previous case (<code>Type1 &lt;: T &lt;: Type2</code>).\u00a0\u21a9</p> </li> </ol>"},{"location":"28-immutability.html","title":"Unit 28: Immutability","text":"<p>After this unit, students should:</p> <ul> <li>be able to create an immutable class</li> </ul> <p>So far in this course, we have been focusing on three ways of dealing with software complexity: by encapsulating and hiding the complexity behind abstraction barriers, by using a language with a strong type system and adhering to the subtyping substitution principle, and applying the abstraction principles and reusing code written as functions, classes, and generics types.</p> <p>Another useful strategy to reduce bugs when code complexity increases is to avoid change altogether.  This can be done by making our classes immutable. We create an instance of an immutable class, the instance cannot have any visible changes outside its abstraction barrier.  This means that every call of the instance's method must behave the same way throughout the lifetime of the instance.</p> <p>There are many advantages of why we want to make our class immutable when possible.  To start, let's revisit a common bug due to aliasing.  Recall the following example from Unit 9,  where we create two circles <code>c1</code> and <code>c2</code> centered at the origin (0, 0). <pre><code>Point p = new Point(0, 0);\nCircle c1 = new Circle(p, 1);\nCircle c2 = new Circle(p, 4);\n</code></pre></p> <p>Let's say that we have the <code>moveTo</code> method in both <code>Circle</code> and <code>Point</code>, to move the circle and point respectively.</p> <pre><code>class Point {\nprivate double x;\nprivate double y;\n:\npublic void moveTo(double x, double y) {\nthis.x = x;\nthis.y = y;\n}\n}\n\nclass Circle {\nprivate Point c;\nprivate double r;\n\npublic Circle (Point c, double r) {\nthis.c = c;\nthis.r = r;\n}\n:\n\npublic void moveTo(double x, double y) {\nc.moveTo(x, y);\n}\n}\n</code></pre> <p>Suppose we want to move <code>c1</code> and only <code>c1</code> to be centered at (1,1).</p> <pre><code>c1.moveTo(1, 1);\n</code></pre> <p>The line of code above surprisingly moved the center of both <code>c1</code> and <code>c2</code>, due to both circles <code>c1</code> and <code>c2</code> sharing the same point.  We have explored a solution below:</p> <pre><code>Point p1 = new Point(0, 0);\nCircle c1 = new Circle(p1, 1);\n\nPoint p2 = new Point(0, 0);\nCircle c2 = new Circle(p2, 4);\n\nc1.moveTo(1, 1);\n</code></pre> <p>This approach avoids sharing references by creating copies of our points so that no two references point to the same instance, avoiding aliasing altogether.  This partial fix, however, comes with extra costs in computational resources as the number of objects may proliferate.</p> <p>This is also not a complete solution because surprisingly, we can move <code>c2</code> without calling <code>c2.moveTo(1, 1)</code> but by calling the code below.</p> <pre><code>p2.moveTo(1, 1);\n</code></pre> <p>Let's now see how immutability can help us resolve our problem.</p>"},{"location":"28-immutability.html#immutable-points-and-circles","title":"Immutable Points and Circles","text":"<p>Let's start by making our <code>Point</code> class immutable.  We start by making the fields <code>final</code> to signal our intention that we do not intend to assign another value to them.  Now that the <code>x</code> and <code>y</code> cannot be re-assigned (a new value or even the same value), to move a point, we shouldn't re-assign to the fields <code>x</code> and <code>y</code> anymore.  Instead, we return a new <code>Point</code> instance to prevent mutating the current instance, as follows:</p> <pre><code>final class Point {\nprivate final double x;\nprivate final double y;\n\npublic Point(double x, double y) {\nthis.x = x;\nthis.y = y;\n}\n\npublic Point moveTo(double x, double y) {\nreturn new Point(x, y);\n}\n:\n\n@Override\npublic String toString() {\nreturn \"(\" + this.x + \",\" + this.y + \")\";\n}\n}\n</code></pre> <p>Note that, to avoid (likely malicious or ignorant) subclasses of <code>Point</code> overriding the methods to make it appears that the point has mutated, it is recommended that we declare immutable classes as <code>final</code> to disallow inheritance.</p> <p>Now, let's make <code>Circle</code> immutable:</p> <pre><code>final class Circle {\nprivate final Point c;\nprivate final double r;\n\npublic Circle (Point c, double r) {\nthis.c = c;\nthis.r = r;\n}\n:\n\npublic Circle moveTo(double x, double y) {\nreturn new Circle(c.moveTo(x, y), r);\n}\n}\n</code></pre> <p>With both <code>Point</code> and <code>Circle</code> immutable, we can be sure that once an instance is created, it remains unchanged (outside the abstraction barrier):</p> <pre><code>Point p = new Point(0, 0);\nCircle c1 = new Circle(p, 1);\nCircle c2 = new Circle(p, 4);\nc1.moveTo(1, 1); // c1 remains unchanged\n</code></pre> <p>To update the variable <code>c1</code>, we need to explicitly reassign it.</p> <pre><code>c1 = c1.moveTo(1, 1);\n</code></pre> <p>Now, <code>c1</code> moves to a new location, but <code>c2</code> remains unchanged.</p> <p>Compare our new immutable approach to the two approaches above. The first shares all the references and is bug-prone.  The second creates a new copy of the instance every time and is resource-intensive.  Our third approach, using immutable classes, allows us to share all the references until we need to modify the instance, in which case we make a copy.  Such a copy-on-write semantic allows us to avoid aliasing bugs without creating excessive copies of objects.</p> <p>Note that the <code>final</code> keyword prevents assigning new value to the field.  Unfortunately, it does not prevent the field from being mutated.  So, to ensure that the classes we create are immutable, we have to ensure that the fields are themselves immutable.</p>"},{"location":"28-immutability.html#advantages-of-being-immutable","title":"Advantages of Being Immutable","text":"<p>We have seen how making our classes immutable helps us remove the risk of potential bugs when we use composition and aliasing.  Immutability has other advantages as well.  </p>"},{"location":"28-immutability.html#ease-of-understanding","title":"Ease of Understanding","text":"<p>Code written with immutable objects is easier to reason with and easier to understand.  Suppose we create a <code>Circle</code> and assign it to a local variable:</p> <pre><code>Circle c = new Circle(new Point(0, 0), 8);\n</code></pre> <p>We pass <code>c</code> around to many other methods.  These other methods may invoke <code>c</code>'s methods; we may invoke <code>c</code>'s methods locally as well.  But, despite putting <code>c</code> through so much, unless we have explicitly re-assigned <code>c</code>, we can guarantee that <code>c</code> is still a circle centered at (0,0) with a radius of 8.  This immutable property makes it significantly easier to read, understand, and debug our code.</p> <p>Without this property, we have to trace through all the methods that we pass <code>c</code> to, and each call of <code>c</code>'s methods to make sure that none of these codes modifies <code>c</code>.</p>"},{"location":"28-immutability.html#enabling-safe-sharing-of-objects","title":"Enabling Safe Sharing of Objects","text":"<p>Making a class immutable allows us to safely share instances of the class and therefore reducing the need to create multiple copies of the same object.  For instance, the origin (0, 0) is commonly used.  If the instance is immutable, we can just create and cache a single copy of the origin, and always return this copy when the origin is required.</p> <p>Let modify our <code>Point</code> class so that it creates a single copy of the origin and returns the same copy every time the origin is required.</p> <pre><code>final class Point {\nprivate final double x;\nprivate final double y;\n\nprivate Point(double x, double y) {\nthis.x = x;\nthis.y = y;\n}\n\nprivate final static Point ORIGIN = new Point(0, 0);\n\npublic static Point of(double x, double y) {\nif (x == 0 &amp;&amp; y == 0) {\nreturn ORIGIN;\n}\nreturn new Point(x, y);\n}\n:\n}\n</code></pre> <p>We made a few changes in the above:</p> <ul> <li>We made the constructor for <code>Point</code> private so that one cannot call the constructor directly.</li> <li>We provide a class factory method named <code>of</code> for the client to create a <code>Point</code> instance.  The <code>of</code> method returns the same instance <code>ORIGIN</code> every time <code>Point.of(0, 0)</code> is called.</li> </ul> <p>Such a design pattern is only safe when the class is immutable.  Consider the mutable version of <code>Point</code> -- calling <code>Point.of(0, 0).moveTo(1, 1)</code> would change every reference to the origin to (1, 1), causing chaos in the code!</p>"},{"location":"28-immutability.html#enabling-safe-sharing-of-internals","title":"Enabling Safe Sharing of Internals","text":"<p>Immutable instances can also share their internals freely.  Consider an immutable implementation of our <code>Array&lt;T&gt;</code>, called <code>ImmutableArray&lt;T&gt;</code>.  Let's start with a simple version first.</p> <pre><code>// version 0.1\nfinal class ImmutableArray&lt;T&gt; {\nprivate final T[] array;\n\n// Only items of type T goes into the array.\n@SafeVarargs\npublic static &lt;T&gt; ImmutableArray&lt;T&gt; of(T... items) {\n// We need to copy to ensure that it is truly immutable\n@SuppressWarnings(\"unchecked\");\nT[] arr = (T[]) new Object[items.length];\nfor (int i=0; i&lt;items.length; i++) {\narr[i] = items[i];\n}\nreturn new ImmutableArray&lt;&gt;(arr);\n}\n\nprivate ImmutableArray(T[] a) {\nthis.array = a;\n}\n\npublic T get(int index) {\nreturn this.array[index];\n}\n}\n</code></pre> <p>There are a few things to note here.</p> <p>Varargs The parameter to the class factory method <code>of</code> has the form <code>T... items</code>.  The triple <code>.</code> notation is a Java syntax for a variable number of arguments of the same type (<code>T</code>).  Often called varargs, this is just syntactic sugar for passing in an array of items to a method.  The method is called variadic method.  We can then call <code>of</code> with a variable number of arguments, such as:</p> <pre><code>ImmutableArray&lt;Integer&gt; a;\na = ImmutableArray.of();\na = ImmutableArray.of(1, 2, 3);\na = ImmutableArray.of(1, 2, 3, 4, 5);\n</code></pre> <p>@SafeVarargs. \u00a0 Since the varargs is just an array, and array and generics do not mix well in Java, the compiler would throw us an unchecked warning.  In this instance, however, we know that our code is safe because we never put anything other than items of type <code>T</code> into the array.  We can use the <code>@SafeVarargs</code> annotation to tell the compiler that we know what we are doing and this varargs is safe.</p> <p>Notice that we removed the <code>set</code> method and there is no other way an external client can modify the array once it is created.  This, of course, assumes that we will only be inserting an immutable object into our immutable array.  Unfortunately, this cannot be enforced by the compiler as the generic type <code>T</code> can be anything.</p> <p>Now, suppose that we wish to support a <code>subarray</code> method, that returns a new array containing only a range of elements in the original array.  It behaves as follows:</p> <pre><code>ImmutableArray&lt;Integer&gt; a = ImmutableArray.of(10, 20, 30, 40, 50, 60);\nImmutableArray&lt;Integer&gt; b = a.subarray(2, 4); // b is [30, 40, 50]\nb.get(0) // returns 30\nImmutableArray&lt;Integer&gt; c = b.subarray(1, 2); // c is [40, 50]\nc.get(1) // returns 50\n</code></pre> <p>A typical way to implement <code>subarray</code> is to allocate a new <code>T[]</code> and copy the elements over.  This operation can be expensive if our <code>ImmutableArray</code> has millions of elements.  But, since our class is immutable and the internal field <code>array</code> is guaranteed not to mutate, we can safely let <code>b</code> and <code>c</code> refer to the same <code>array</code> from <code>a</code>, and only store the starting and ending index.</p> <pre><code>class ImmutableArray&lt;T&gt; {\nprivate final int start;\nprivate final int end;\nprivate final T[] array;\n\n@SafeVarargs\npublic static &lt;T&gt; ImmutableArray&lt;T&gt; of(T... items) {\n// We need to copy to ensure that it is truly immutable\n@SuppressWarnings(\"unchecked\");\nT[] arr = (T[]) new Object[items.length];\nfor (int i=0; i&lt;items.length; i++) {\narr[i] = items[i];\n}\nreturn new ImmutableArray&lt;&gt;(arr, 0, items.length-1);\n}\n\nprivate ImmutableArray(T[] a, int start, int end) {\nthis.start = start;\nthis.end = end;\nthis.array = a;\n}\n\npublic T get(int index) {\nif (index &lt; 0 || this.start + index &gt; this.end) {\nthrow new IllegalArgumentException(\"Index out of bound\");\n}\nreturn this.array[this.start + index];\n}\n\npublic ImmutableArray&lt;T&gt; subarray(int start, int end) {\nreturn new ImmutableArray&lt;&gt;(this.array, this.start + start, this.start + end);\n}\n}\n</code></pre>"},{"location":"28-immutability.html#enabling-safe-concurrent-execution","title":"Enabling Safe Concurrent Execution","text":"<p>We will explore concurrent execution of code towards the end of the module, but making our classes immutable goes a long way in reducing bugs related to concurrent execution.  Without going into details here (you will learn the details later), concurrent programming allows multiple threads of code to run in an interleaved fashion, in an arbitrary interleaving order.   If we have complex code that is difficult to debug to begin with, imagine having code where we have to ensure its correctness regardless of how the execution interleaves!  Immutability helps us ensure that regardless of how the code interleaves, our objects remain unchanged.</p>"},{"location":"28-immutability.html#final-immutable","title":"Final \u2260 Immutable","text":"<p>When creating an immutable class, we need to be careful to distinguish between the keywords that helps us avoid accidentally making things easily mutable and the actual concept of immutable class.  For instance, it is insufficient to simply declare all fields with <code>final</code> keywords.  Just because we cannot accidentally update the field, does not mean that the field is immutable.  Consider the same <code>Circle</code> above but with a getter for the center point and now imagine that the <code>Point</code> is mutable.</p> <pre><code>final class Circle {\nprivate final Point c;\nprivate final double r;\n\npublic Circle (Point c, double r) {\nthis.c = c;\nthis.r = r;\n}\n:\n\npublic Point getCenter() {\nreturn this.c;\n}\n\npublic Circle moveTo(double x, double y) {\nreturn new Circle(c.moveTo(x, y), r);\n}\n}\n</code></pre> <p>We can then simply retrieve the center point and mutate it externally.</p> <pre><code>Circle c = new Circle(new Point(0, 0), 1);\nc.getCenter().moveTo(1, 1); // assume mutable Point\n</code></pre> <p>On the other hand, it is not even necessary to use the <code>final</code> keyword to make an immutable class.  We simply have to have a class that prevents any and all kinds of sharing by copying all the parameters before assigning them into the fields and copying all return value.  Assume that all classes has a correctly implemented <code>clone()</code> method.  Then the following <code>Circle</code> is immutable even with getter and no <code>final</code> keyword on the fields.  We still need the <code>final</code> keyword on the class to disallow inheritance.</p> <pre><code>final class Circle {\nprivate Point c;\nprivate double r;\n\npublic Circle (Point c, double r) {\nthis.c = c.clone();\nthis.r = r; // primitive, no need cloning\n}\n:\n\npublic Point getCenter() {\nreturn this.c.clone();\n}\n\npublic Circle moveTo(double x, double y) {\nreturn new Circle(c.moveTo(x, y), r);\n}\n}\n</code></pre> <p>That is not to say that the <code>final</code> keyword is not important.  It helps accidental re-assignment and in some cases that is sufficient especially if the fields are of primitive type.  Once we have created one immutable class, we can then create other larger immutable classes by only using immutable classes as fields.</p>"},{"location":"29-nested-classes.html","title":"Unit 29: Nested Class","text":"<p>After this unit, students should:</p> <ul> <li>understand the need for nested class</li> <li>understand the behavior of the different kinds of nested class</li> <li>be able to write nested classes</li> </ul> <p>So far, we have defined a class only at the \"top-level\" of our program.  Java allows us to define a class within another class, or within a method.  </p>"},{"location":"29-nested-classes.html#nested-class","title":"Nested Class","text":"<p>A nested class is a class defined within another containing class.  For example, the following declaration declares a private nested class named <code>B</code> within the class <code>A</code>.</p> <pre><code>class A {\nprivate class B {\n:\n}\n}\n</code></pre> <p>Nested classes are used to group logically relevant classes together.  Typically, a nested class is tightly coupled with the container class and would have no use outside of the container class.  Nested classes can be used to encapsulate information within a container class, for instance, when the implementation of the container class becomes too complex.  As such, it is useful for \"helper\" classes that serve specific purposes.</p> <p>A nested class is a field of the containing class and can access fields and methods of the container class, including those declared as <code>private</code>.  We can keep the nested class within the abstraction barrier by declaring the nested class as <code>private</code> if there is no need for it to be exposed to the client outside the barrier.  </p> <p>Since the nested class can access the private fields of the container class, we should introduce a nested class only if the nested class belongs to the same encapsulation as the container class.  Otherwise, the container class would leak its implementation details to the nested class.</p> <p>Take the <code>HashMap&lt;K,V&gt;</code> class for instance.  The implementation of <code>HashMap&lt;K,V&gt;</code> contains several nested classes, including <code>HashIterator</code>, which implement an <code>Iterator&lt;E&gt;</code> interface for iterating through the key and value pairs in the map, and an <code>Entry&lt;K,V&gt;</code> class, which encapsulates a key-value pair in the map.  Some of these classes are declared <code>private</code> if they are only used within the <code>HashMap&lt;K,V&gt;</code> class.</p> <p>Example from CS2030S This Semester</p> <p>We can take another example from your labs on bank simulation.  In one of many possible designs, the subclasses of <code>Event</code>: <code>ArrivalEvent</code>, <code>DepartureEvent</code>, etc. are not used anywhere outside of <code>BankSimulation</code>.  They can be safely encapsulated within <code>BankSimulation</code> as inner classes, so that these classes can access the fields within the <code>BankSimulation</code> class, simplifying their implementation.</p> <p>A nested class can be either static or non-static.  Just like static fields and static methods, a static nested class is associated with the containing class, NOT an instance.  So, it can only access static fields and static methods of the containing class.  A non-static nested class, on the other hand, can access all fields and methods of the containing class.  A non-static nested class is also known as an inner class.</p> <p>The example below shows a container class <code>A</code> with two nested classes, a non-static inner class <code>B</code>, and a static nested class <code>C</code>.  <code>B</code> can access instance fields, instance methods, class fields, and class methods in <code>A</code>.  <code>C</code> can only access the class fields and class methods in <code>A</code>.</p> <pre><code>class A {\nprivate int x;\nstatic int y;\n\nclass B {\nvoid foo() {\nx = 1; // accessing x from A is OK\ny = 1; // accessing y from A is OK\n}\n}\n\nstatic class C {\nvoid bar() {\nx = 1; // accessing x from A is not OK since C is static\ny = 1; // accessing y is OK\n}\n}\n}\n</code></pre> <p>Recall that we recommend that all access to instance fields be done through the <code>this</code> reference.  In the example above, however, we can't access <code>this.x</code> from within <code>B</code>.</p> <pre><code>class A {\nprivate int x;\n\nclass B {\nvoid foo() {\nthis.x = 1; // error\n}\n}\n}\n</code></pre> <p>Since <code>this.x</code> is called within a method of <code>B</code>, <code>this</code> would refer to the instance of <code>B</code>, rather than the instance of <code>A</code>.  Java has a piece of syntax called qualified <code>this</code> to resolve this.  A qualified <code>this</code> reference is prefixed with the enclosing class name, to differentiate between the <code>this</code> of the inner class and the <code>this</code> of the enclosing class.  In the example above, we can access <code>x</code> from <code>A</code> through the <code>A.this</code> reference.</p> <pre><code>class A {\nprivate int x;\n\nclass B {\nvoid foo() {\nA.this.x = 1; // ok\n}\n}\n}\n</code></pre>"},{"location":"29-nested-classes.html#local-class","title":"Local Class","text":"<p>We can also declare a class within a function, just like a local variable.  </p> <p>To motivate this, let's consider how one would use the <code>java.util.Comparator</code> interface.   The <code>Comparator</code> interface allows us to specify how to compare two elements, by implementing this interface with a customized <code>compare()</code> method.  <code>compare(o1,o2)</code> should return 0 if the two elements are equals, a negative integer if o1 is \"less than\" o2, and a positive integer otherwise.</p> <p>Suppose we have a list of strings, and we want to sort them in the order of their length, we can write the following method:</p> <pre><code>void sortNames(List&lt;String&gt; names) {\n\nclass NameComparator implements Comparator&lt;String&gt; {\npublic int compare(String s1, String s2) {\nreturn s1.length() - s2.length();\n}\n}\n\nnames.sort(new NameComparator());\n}\n</code></pre> <p>This makes the code easier to read since we keep the definition of the class and its usage closer together.</p> <p>Classes like <code>NameComparator</code> that are declared inside a method (or to be more precise, inside a block of code between <code>{</code> and <code>}</code>) is called a local class.  Just like a local variable, a local class is scoped within the method.  Like a nested class, a local class has access to the variables of the enclosing class through the qualified <code>this</code> reference.  Further, it can access the local variables of the enclosing method.</p> <p>For example,</p> <pre><code>class A {\nint x = 1;\n\nvoid f() {\nint y = 1;\n\nclass B {\nvoid g() {\nx = y; // accessing x and y is OK.\n}\n}\n\nnew B().g();\n}\n}\n</code></pre> <p>Here, <code>B</code> is a local class defined in method <code>f()</code>.  It has access to all the local variables accessible from within <code>f</code>, as well as the fields of its enclosing class.</p>"},{"location":"29-nested-classes.html#variable-capture","title":"Variable Capture","text":"<p>Recall that when a method returns, all local variables of the methods are removed from the stack.  But, an instance of that local class might still exist.  Consider the following example:</p> <pre><code>interface C {\nvoid g();\n}\n\nclass A {\nint x = 1;\n\nC f() {\nint y = 1;\n\nclass B implements C {\nvoid g() {\nx = y; // accessing x and y is OK.\n}\n}\n\nB b = new B();\nreturn b;\n}\n}\n</code></pre> <p>Calling <pre><code>A a = new A();\nC b = a.f();\nb.g();\n</code></pre></p> <p>will give us a reference to an object of type <code>B</code> now.  But, if we call <code>b.g()</code>, what is the value of <code>y</code>?</p> <p>For this reason, even though a local class can access the local variables in the enclosing method, the local class makes a copy of local variables inside itself.  We say that a local class captures the local variables.   </p>"},{"location":"29-nested-classes.html#effectively-final","title":"Effectively <code>final</code>","text":"<p>Variable captures can be confusing.  Consider the following code:</p> <pre><code>void sortNames(List&lt;String&gt; names) {\nboolean ascendingOrder = true;\nclass NameComparator implements Comparator&lt;String&gt; {\npublic int compare(String s1, String s2) {\nif (ascendingOrder)\nreturn s1.length() - s2.length();\nelse\nreturn s2.length() - s1.length();\n}\n}\n\nascendingOrder = false;\nnames.sort(new NameComparator());\n}\n</code></pre> <p>Will <code>sort</code> sorts in ascending order or descending order?</p> <p>To avoid confusing code like this, Java only allows a local class to access variables that are explicitly declared <code>final</code> or implicitly final (or effectively final).  An implicitly final variable cannot be re-assigned after initialization.  Therefore, Java saves us from such a hair-pulling situation and disallows such code -- <code>ascendingOrder</code> is not effectively final so the code above does not compile.</p> <p>Breaking the Limitation of Effectively <code>final</code>. \u00a0\u00a0 The limitation of effectively final only happen because the value is of a primitive type.  So, if we captures the value and forbids re-assigning the value, there is nothing we can do to change primitive value.</p> <p>On the other hand, reference type can be mutated. So if we use our own implementation of <code>Bool</code> class below instead of <code>boolean</code> primitive type, we can modify the code above to allow the \"value\" in variable <code>ascendingOrder</code> to be changed. However, this change is via mutation and not re-assignment to the variable.</p> <pre><code>void sortNames(List&lt;String&gt; names) {\nBool ascendingOrder = new Bool(true);\nclass NameComparator implements Comparator&lt;String&gt; {\npublic int compare(String s1, String s2) {\nif (ascendingOrder.val)\nreturn s1.length() - s2.length();\nelse\nreturn s2.length() - s1.length();\n}\n}\n\nascendingOrder.val = false;\nnames.sort(new NameComparator());\n}\nclass Bool {\nboolean val;\n}\n</code></pre> <p>The code above does compile but now we are no longer save from such a hair-pulling situation.  So please exercise this with extreme caution.</p> <p>Variable Capture in Javascript</p> <p>Those of you who did CS1101S or otherwise familiar with Javascript might want to note that this is different from Javascript, which does not enforce the final/effectively final restriction in variable captures.  This is because there is no concept of primitive value in Javascript.</p> <p>Every single primitive type is automatically boxed in Javascript. The unboxed variant is not available to the programmer directly.  So, if we write <code>x = 1</code> in Javascript, the value <code>1</code> is boxed and put into the heap.  Then, the variable <code>x</code> in the stack points to this box in the heap unlike Java primitive type.</p>"},{"location":"29-nested-classes.html#anonymous-class","title":"Anonymous Class","text":"<p>An anonymous class is one where you declare a class and instantiate it in a single statement.  It's anonymous since we do not even have to give the class a name.</p> <pre><code>names.sort(new Comparator&lt;String&gt;() {\npublic int compare(String s1, String s2) {\nreturn s1.length() - s2.length();\n}\n});\n</code></pre> <p>The example above removes the need to declare a class just to compare two strings.  </p> <p>An anonymous class has the following format: <code>new X (arguments) { body }</code>, where:</p> <ul> <li>X is a class that the anonymous class extends or an interface that the anonymous class implements.  X cannot be empty.  This syntax also implies an anonymous class cannot extend another class and implement an interface at the same time.  Furthermore, an anonymous class cannot implement more than one interface.<ul> <li>Put it simply, you cannot have <code>extends</code> and <code>implements</code> keyword in between <code>X</code> and <code>(arguments)</code>.</li> </ul> </li> <li>arguments are the arguments that you want to pass into the constructor of the anonymous class.  If the anonymous class is extending an interface, then there is no constructor, but we still need <code>()</code>.</li> <li>body is the body of the class as per normal, except that we cannot have a constructor for an anonymous class.</li> </ul> <p>The syntax might look overwhelming at the beginning, but we can also write it as:</p> <pre><code>Comparator&lt;String&gt; cmp = new Comparator&lt;String&gt;() {\npublic int compare(String s1, String s2) {\nreturn s1.length() - s2.length();\n}\n};\nnames.sort(cmp);\n</code></pre> <p>Line 1 above looks just like what we do when we instantiate a class, except that we are instantiating an interface with a <code>{ .. }</code> body.</p> <p>An anonymous class is just like a local class, it captures the variables of the enclosing scope as well -- the same rules to variable access as local classes applies.</p>"},{"location":"30-functions.html","title":"Unit 30: Side Effect-Free Programming","text":"<p>After this unit, students should be familiar with:</p> <ul> <li>the concept of functions as side-effect-free programming constructs and its relation to functions in mathematics.</li> <li>understand the importance of writing code that is free of side effects</li> <li>how functions can be first-class citizens in Java through using local anonymous class</li> <li>how we can succinctly use a lambda expression or a method reference in place of using local anonymous class</li> <li>how we can use currying to generalize to functions with higher arity</li> <li>how we can create a closure with lambda and environment capture</li> </ul>"},{"location":"30-functions.html#functions","title":"Functions","text":"<p>Recall that, a function, in mathematics, refers to a mapping from a set of inputs (domain) \\(X\\) to a set of output values (codomain) \\(Y\\).  We write \\(f: X \\rightarrow Y\\).  Every input in the domain must map to exactly one output but multiple inputs can map to the same output.  Not all values in the codomain need to be mapped.  </p> <p>We know how to deal with mathematical functions very well.  There are certain rules that we follow when we reason about functions.  For instance, suppose we have an unknown \\(x\\) and a function \\(f\\), we know that applying \\(f\\) on \\(x\\), i.e., \\(f(x)\\) does not change the value of \\(x\\), or any other unknowns \\(y\\), \\(z\\), etc.  We say that mathematical functions have no side effects.  It simply computes and returns the value.</p> <p>Another property of mathematical function is referential transparency.  Let \\(f(x) = a\\).  Then in every formula that \\(f(x)\\) appears in, we can safely replace occurances of \\(f(x)\\) with \\(a\\).  Conversely, everywhere \\(a\\) appears, we can replace it with \\(f(x)\\).  We can be guarantee that the resulting formulas are still equivalent.</p> <p>These two fundamental properties of mathematical functions allow us to solve equations, prove theorems, and reason about mathematical objects rigorously.</p> <p>Unfortunately, we can't always reason about our program the same way as we reason about mathematical functions.  For instance, consider the line:</p> <pre><code>a.get(0)\n</code></pre> <p>where <code>a</code> is an instance of <code>Array&lt;T&gt;</code>.  Suppose we know that <code>a.get(0)</code> is 5 for some <code>a</code>.  When we reason about the behavior of our code, we cannot replace (mentally) every invocation of <code>a.get(0)</code> with the value 5.  This is because the array <code>a</code> may not be immutable and therefore <code>a.get(0)</code> cannot be guaranteed to be the same.  </p> <p>The reverse should be true as well.  Suppose we have a variable</p> <pre><code>T t = a.get(0);\n</code></pre> <p>Then everywhere in our code where we use <code>t</code>, we should be able to replace it with <code>a.get(0)</code>, and the behavior of the code should still be the same. This behavior is only guaranteed if <code>a.get(0)</code> has no side effects (such as modifying a field or print something to the standard output).</p> <p>To be able to reason about our code using the mathematical reasoning techniques we are familiar with, it is important to write our code as if we are writing mathematical functions -- our methods should be free of side effects and our code should be referentially transparent.  Our program is then just a sequence of functions, chained and composed together.  To achieve this, functions need to be a first class citizen in our program, so that we can assign functions to a variable, pass it as parameters, return a function from another function, etc, just like any other variable.</p>"},{"location":"30-functions.html#pure-functions","title":"Pure Functions","text":"<p>Ideally, methods in our programs should behave the same as functions in mathematics.  Given an input, the function computes and returns an output.  A pure function does nothing else -- it does not print to the screen, write to files, throw exceptions, change other variables, modify the values of the arguments, etc.  That is, a pure function does not cause any side effect.  </p> <p>Here are two examples of pure functions:</p> <pre><code>int square(int i) {\nreturn i * i;\n}\n\nint add(int i, int j) {\nreturn i + j;  // believe it or not, an overflow is\n// not an error in Java\n}\n</code></pre> <p>and some examples of non-pure functions: <pre><code>int div(int i, int j) {\nreturn i / j;  // may throw an exception\n}\n\nint incrCount(int i) {\nreturn this.count + i; // assume that count is not final.\n// this may give diff results for the same i.\n}\n\nvoid incrCount(int i) {\nthis.count += i; // does not return a value\n// and has side effects on count\n}\n\nint addToQueue(Queue&lt;Integer&gt; queue, int i) {\nqueue.enq(i);  // has side effects on queue\n}\n</code></pre></p> <p>A pure function must also be deterministic.  Given the same input, the function must produce the same output, every single time.  This deterministic property ensures referential transparency.</p> <p>In the OO paradigm, we commonly need to write methods that update the fields of an instance or compute values using the fields of an instance.  Such methods are not pure functions.  On the other hand, if our class is immutable, then its methods must not have side effects and thus is pure.</p> <p>In computer science, we refer to the style of programming where we build a program from pure functions as functional programming (FP). Examples of functional programming languages include Haskell, OCaml, Erlang, Clojure, F#, and Elixir.</p> <p>Many modern programming languages including Java, C++, Python, Rust, and Swift support this style of programming.  As these languages are not designed to be functional, we cannot build a program from only pure functions.  Java, for instance, is still an OO language at its core.  As such, we will refer to this style as functional-style programming.  We won't be able to write code consists of only pure functions in Java, but we can write methods that has no side effects and objects that are immutable, as much as possible.</p>"},{"location":"30-functions.html#function-as-first-class-citizen-in-java","title":"Function as First-Class Citizen in Java","text":"<p>Let's explore functions as a first-class citizen in Java.  We have seen some examples of this when we use the <code>Comparator</code> interface.</p> <pre><code>void sortNames(List&lt;String&gt; names) {\nComparator&lt;String&gt; cmp = new Comparator&lt;String&gt;() {\npublic int compare(String s1, String s2) {\nreturn s1.length() - s2.length();\n}\n};\nnames.sort(cmp);\n}\n</code></pre> <p>First, let's take a moment to appreciate the beauty of the <code>List::sort</code> method.  We can use this method to sort items of any type, in any defined order.  We achieve the generality of types with generics, and the generality of sorting order through passing in the comparison function as a parameter.  The latter is needed to write one sorting method for every possible sorting order for a list of strings, (<code>sortAlphabeticallyIncreasing</code>, <code>sortByLengthDecreasing</code>, etc..)</p> <p>The comparison function here is implemented as a method in an anonymous class that implements an interface.  We can think of an instance of this anonymous class as the function.  Since a function is now just an instance of an object in Java, we can pass it around, return it from a function, and assign it to a variable, just like any other reference type.</p> <p>Let's look at another example.  Consider the following interface: <pre><code>interface Transformer&lt;T, R&gt; {\nR transform(T t);\n}\n</code></pre></p> <p><code>Transformer&lt;T, R&gt;</code> is a generic interface with two type parameters: <code>T</code> is the type of the input, <code>R</code> is the type of the result.  It has one abstract method <code>R transform(T t)</code> that applies the function to a given argument.</p> <p>We can use this interface to write any function that takes in a value and return another value.  (Java has a similar interface called, unsurprisingly, <code>java.util.function.Function&lt;T, R&gt;</code>). For instance, a function that computes the square of an integer can be written as: <pre><code>new Transformer&lt;Integer, Integer&gt;() {\n@Override\npublic Integer transform(Integer x) {\nreturn x * x;\n}\n};\n</code></pre></p> <p>We can write a method <code>chain</code> that composes two given computations together and return the new computation: <pre><code>// Use of PECS left as an exercise to the reader\n&lt;T, R, S&gt; Transformer&lt;T,R&gt; chain(Transformer&lt;T,S&gt; t1, Transformer&lt;S,R&gt; t2) {\nreturn new Transformer&lt;T,R&gt;() {\npublic R transform(T value) {\nreturn t2.transform(t1.transform(value));\n// in mathematical notation, this is t2(t1(v))\n}\n}\n}\n</code></pre></p>"},{"location":"30-functions.html#lambda-expression","title":"Lambda Expression","text":"<p>While we have achieved functions as first-class citizens in Java, the code is verbose and ugly.  Fortunately, there is a much cleaner syntax to write functions that applies to interfaces with a single abstract method.</p> <p>An interface in Java with only one abstract method is called a functional interface.  Both <code>Comparator</code> and <code>Transformer</code> are functional interfaces.  It is recommended that, if a programmer intends an interface to be a functional interface, they should annotate the interface with the <code>@FunctionalInterface</code> annotation.</p> <pre><code>@FunctionalInterface\ninterface Transformer&lt;T, R&gt; {\nR transform(T t);\n}\n</code></pre> <p>A key advantage of a functional interface is that there is no ambiguity about which method is being overridden by an implementing subclass.</p> <p>For instance, consider: <pre><code>Transformer&lt;Integer, Integer&gt; square = new Transformer&lt;&gt;() {\n@Override\npublic Integer transform(Integer x) {\nreturn x * x;\n}\n};\nTransformer&lt;Integer, Integer&gt; incr = new Transformer&lt;&gt;() {\n@Override\npublic Integer transform(Integer x) {\nreturn x + 1;\n}\n};\n</code></pre></p> <p>You can see that there is much boilerplate code in the two functions above that we can remove.  Since we are assigning it to a variable of type <code>Transformer</code> interface, we don't have to write <code>new Transformer&lt;&gt;() { .. }</code>.  And since <code>Transformer</code> is an interface, there is no constructor.  Since there is only one abstract method to overwrite, we don't have to write <code>@Override public Integer transform(..) { .. }</code>.</p> <p>What remain after we eliminate the obvious boilerplate code are (i) the parameter <code>Integer x</code> and (ii) the body of <code>transform</code>, which is <code>{ return x * x; }</code>.    We can use the Java arrow notation <code>-&gt;</code> to now link the parameter and the body:</p> <pre><code>Transformer&lt;Integer, Integer&gt; square = (Integer x) -&gt; { return x * x; };\nTransformer&lt;Integer, Integer&gt; incr = (Integer x) -&gt; { return x + 1; };\n</code></pre> <p>You might notice that the type of the parameter is redundant as well since the type argument to <code>Transformer</code> already tells us this function takes in an <code>Integer</code>. We can further simplify it to: <pre><code>Transformer&lt;Integer, Integer&gt; square = (x) -&gt; { return x * x; };\nTransformer&lt;Integer, Integer&gt; incr = (x) -&gt; { return x + 1; };\n</code></pre></p> <p>or simply: <pre><code>Transformer&lt;Integer, Integer&gt; square = x -&gt; { return x * x; };\nTransformer&lt;Integer, Integer&gt; incr = x -&gt; { return x + 1; };\n</code></pre></p> <p>where there is only one parameter.</p> <p>Since the body has only a single return statement, we can simplify it further: <pre><code>Transformer&lt;Integer, Integer&gt; square = x -&gt; x * x;\nTransformer&lt;Integer, Integer&gt; incr = x -&gt; x + 1;\n</code></pre></p> <p>Now, that's much better!</p> <p>The expressions above, including <code>x -&gt; x * x</code>, are called lambda expressions.  You can recognize one by the use of <code>-&gt;</code>.   The left-hand side lists the parameters (use <code>()</code> if there is no parameter), while the right-hand side is the computation.  We do not need the type in cases where Java can infer the type, nor need the return keyword and the curly brackets when there is only a single return statement.</p> <p>lambda</p> <p>Alonzo Church invented lambda calculus (\\(\\lambda\\)-calculus) in 1936, before electronic computers, as a way to express computation.  In \\(\\lambda\\)-calculus, all functions are anonymous.  The term lambda expression originated from there.</p>"},{"location":"30-functions.html#method-reference","title":"Method Reference","text":"<p>Lambda expression is useful for specifying a new anonymous method.  Sometimes, we want to use an existing method as a first-class citizen instead.</p> <p>Recall the <code>distanceTo</code> method in <code>Point</code>, which takes in another point as a parameter and returns the distance between this point and the given point.</p> <pre><code>class Point {\n:\n\npublic double distanceTo(Point p) {\n:\n}\n}\n</code></pre> <p>We can write our <code>Transformer</code> like this using an anonymous class: <pre><code>Point origin = new Point(0, 0);\nTransformer&lt;Point, Double&gt; dist = new Transformer&lt;&gt;() {\n@Override\npublic Double transform(Point p) {\nreturn origin.distanceTo(p);\n}\n}\n</code></pre></p> <p>or using a lambda expression: <pre><code>Point origin = new Point(0, 0);\nTransformer&lt;Point, Double&gt; dist = p -&gt; origin.distanceTo(p);\n</code></pre></p> <p>but since <code>distanceTo</code> takes in one parameter and returns a value, it already fits as a transformer, and we can write it as: <pre><code>Point origin = new Point(0, 0);\nTransformer&lt;Point, Double&gt; dist = origin::distanceTo;\n</code></pre></p> <p>The double-colon notation <code>::</code> is used to specify a method reference.  We can use method references to refer to a (i) static method in a class, (ii) instance method of a class or interface, (iii) constructor of a class.  Here are some examples (and their equivalent lambda expression)</p> <pre><code>Box::of            // x -&gt; Box.of(x)\nBox::new           // x -&gt; new Box(x)\nx::compareTo       // y -&gt; x.compareTo(y)\nA::foo             // (x, y) -&gt; x.foo(y) or (x, y) -&gt; A.foo(x,y)\n</code></pre> <p>The last example shows that the same method reference expression can be interpreted in two different ways.  The actual interpretation depends on how many parameters <code>foo</code> takes and whether <code>foo</code> is a class method or an instance method.  When compiling, Java searches for the matching method, performing type inferences to find the method that matches the given method reference.  A compilation error will be thrown if there are multiple matches or if there is ambiguity in which method matches.</p>"},{"location":"30-functions.html#curried-functions","title":"Curried Functions","text":"<p>Mathematically, a function takes in only one value and returns one value (e.g., <code>square</code> above).  In programming, we often need to write functions that take in more than one argument (e.g., <code>add</code> above). Even though <code>Transformer</code> only supports function with a single parameter, we can build functions that take in multiple arguments.  Let's look at this mathematically first.  Consider a binary function \\(f: (X, Y) \\rightarrow Z\\).  We can introduce \\(F\\) as a set of all functions \\(f': Y \\rightarrow Z\\), and rewrite \\(f\\) as \\(f: X \\rightarrow F\\), or \\(f: X \\rightarrow Y \\rightarrow Z\\).</p> <p>The arrow \\(\\rightarrow\\) is to be read from right-to-left.  So \\(f: X \\rightarrow Y \\rightarrow Z\\) is equivalent to \\(f: X \\rightarrow (Y \\rightarrow Z)\\).  But what does it actually mean?  It means that instead of having a function that takes in two arguments, we can instead have a function that takes in one argument (typically the first argument) and return another function to accept the second argument.</p> <p>A trivial example of this is the <code>add</code> method that adds two <code>int</code> values. <pre><code>int add(int x, int y) {\nreturn x + y;\n}\n</code></pre></p> <p>This can be written as <pre><code>Transformer&lt;Integer, Transformer&lt;Integer, Integer&gt;&gt; add = x -&gt; y -&gt; (x + y);\n</code></pre></p> <p>To calculate 1 + 1, we call <pre><code>add.transform(1).transform(1);\n</code></pre></p> <p>Let's break it down a little, <code>add</code> is a function that takes in an <code>Integer</code> object and returns a unary <code>Function</code> over <code>Integer</code>.  So <code>add.transform(1)</code> returns the function <code>y -&gt; 1 + y</code>.  We could assign this to a variable: <pre><code>Transformer&lt;Integer,Integer&gt; incr = add.transform(1);\n</code></pre></p> <p>Note that <code>add</code> is no longer a function that takes two arguments and returns a value.  It is a higher-order function that takes in a single argument and returns another function.</p> <p>The technique that translates a general \\(n\\)-ary function to a sequence of \\(n\\) unary functions is called currying.  After currying, we have a sequence of curried functions.  </p> <p>Curry</p> <p>Currying is not related to food but rather is named after computer scientist Haskell Curry, who popularized the technique.</p> <p>How is currying useful?  Consider <code>add(1, 1)</code> -- we have to have both arguments available at the same time to compute the function.  With currying, we no longer have to.  We can evaluate the different arguments at a different time (as <code>incr</code> example above).  This feature is useful in cases where some arguments are not available until later.  We can partially apply a function first.  This is also useful if one of the arguments does not change often, or is expensive to compute.  We can save the partial results as a function and continue applying later.  We can dynamically create functions as needed, save them, and invoke them later.</p>"},{"location":"30-functions.html#lambda-as-closure","title":"Lambda as Closure","text":"<p>In the example, we showed earlier, <pre><code>Point origin = new Point(0, 0);\nTransformer&lt;Point, Double&gt; dist = origin::distanceTo;\n</code></pre></p> <p>the variable <code>origin</code> is captured by the lambda expression <code>dist</code>.  Just like in local and anonymous classes, a captured variable must be either explicitly declared as <code>final</code> or is effectively final.</p> <p>A lambda expression stores more than just the function to invoke -- it also stores the data from the environment where it is defined.  We call such a construct that stores a function together with the enclosing environment a closure.</p> <p>Being able to save the current execution environment, and then continue to compute it later, adds new power to how we can write our program.  We can make our code cleaner with fewer parameters to pass around and less duplicated code.  We can separate the logic to do different tasks in a different part of our program easier.</p> <p>We will see more examples of this later.</p>"},{"location":"31-box-maybe.html","title":"Unit 31: Box and Maybe","text":"<p>After this unit, students should appreciate:</p> <ul> <li>the generality of the class <code>Box&lt;T&gt;</code> and <code>Maybe&lt;T&gt;</code></li> <li>how passing in functions as parameter can lead to highly general abstractions</li> <li>how <code>Maybe&lt;T&gt;</code> preserves the \"maybe null\" semantics over a reference type by internalizing checks for <code>null</code></li> </ul>"},{"location":"31-box-maybe.html#lambda-as-a-cross-barrier-state-manipulator","title":"Lambda as a Cross-Barrier State Manipulator","text":"<p>Recall that every class has an abstraction barrier between the client and the implementer.  The internal states of the class are heavily protected and hidden.   The implementer selectively provides a set of methods to access and manipulate the internal states of instances.  This approach allows the implementer to control what the client can and cannot do to the internal states.  This is good if we want to build abstractions over specific entities such as shapes or data structures such as a stack, but it is not flexible enough to build general abstraction.</p> <p>Let's consider the following class:</p> <pre><code>class Box&lt;T&gt; {\nprivate T item;\n}\n</code></pre> <p>It is a box containing a single item of type <code>T</code>.  Suppose that we want to keep the <code>item</code> hidden and we want to have certain rules and maintain some semantics about the use of the <code>item</code>.  As such, we don't want to provide any setter or getter, so that the client may not break our rules.  What are some ways we can still operate on this <code>item</code>?</p> <p>The only way we can do this is to provide methods that accept a lambda expression, apply the lambda expression on the item, and return the new box with the new value.  For instance,</p> <pre><code>class Box&lt;T&gt; {\nprivate T item;\n:\n\npublic &lt;U&gt; Box&lt;U&gt; map(Transformer&lt;? super T, ? extends U&gt; transformer) {\nif (!isPresent()) {\nreturn empty();\n}\nreturn Box.ofNullable(transformer.transform(this.item));\n}\n:\n\npublic Box&lt;T&gt; filter(BooleanCondition&lt;? super T&gt; condition) {\nif (!isPresent() || !(condition.test(this.item)) {\nreturn empty();\n}\nreturn this;\n}\n:\n}\n</code></pre> <p>The method <code>map</code> takes in a lambda expression and allows us to arbitrarily apply a function to the item, while the method <code>filter</code> allows us to perform an arbitrary check on the property of the item.</p> <p>Methods such as these, which accept a function as a parameter, allows the client to manipulate the data behind the abstraction barrier without knowing the internals of the object.  Here, we are treating lambda expressions as \"manipulators\" that we can pass in behind the abstraction barrier and modify the internals arbitrarily for us, while the container or the box tries to maintain the semantics for us.</p>"},{"location":"31-box-maybe.html#maybe","title":"Maybe","text":"<p>Let's now look at <code>Box&lt;T&gt;</code> in a slightly different light.  Let's rename it to <code>Maybe&lt;T&gt;</code>.  <code>Maybe&lt;T&gt;</code> is an option type, a common abstraction in programming languages (<code>java.util.Optional</code> in Java, <code>option</code> in Scala, <code>Maybe</code> in Haskell, <code>Nullable&lt;T&gt;</code> in C#, etc) that is a wrapper around a value that is either there or is <code>null</code>.  The <code>Maybe&lt;T&gt;</code> abstraction allows us to write code without mostly not worrying about the possibility that our value is missing.  When we call <code>map</code> on a value that is missing, nothing happens.</p> <p>Recall that we wish to write a program that is as close to pure mathematical functions as possible, a mathematical function always has a well-defined domain and codomain.  If we have a method that looks this like this: <pre><code>Counter c = bank.findCounter();\n</code></pre></p> <p>Then <code>findCounter</code> is mapping from the domain on banks or counters.  However, if we implement <code>findCounter</code> such that it returns <code>null</code> if no counter is available, then <code>findCounter</code> is not a function anymore.  The return value <code>null</code> is not a counter, as we cannot do things that we can normally do on counters to it.  So <code>findCounter</code> now maps to a value outside its codomain!  This violation of the purity of function adds complications to our code, as we now have to specifically filter out <code>null</code> value, and is a common source of bugs.</p> <p>One way to fix this is to have a special counter (say, <code>class NullCounter extends Counter</code>) that is returned whenever no counter is available.  This way, our <code>findCounter</code> remains a pure function.  But this is not a general solution.  If we adopt this solution, everywhere we return <code>null</code> in place of a non-null instance we have to create a special subclass.</p> <p>Another way, that is more general, is to expand the codomain of the function to include <code>null</code>, and wrap both <code>null</code> and <code>Counter</code> under a type called <code>Maybe&lt;Counter&gt;</code>.  We make <code>findCounter</code> returns a <code>Maybe&lt;Counter&gt;</code> instead <pre><code>Maybe&lt;Counter&gt; c = bank.findCounter();\n</code></pre></p> <p>With this design, <code>findCounter</code> is now a function with the domain <code>Bank</code> mapped to the codomain <code>Maybe&lt;Counter&gt;</code>, and it is pure.</p> <p>Another way to view the <code>Maybe&lt;T&gt;</code> class is that it internalizes all the checks for <code>null</code> on the client's behalf.  <code>Maybe&lt;T&gt;</code> ensures that if <code>null</code> represents a missing value, then the semantics of this missing value is preserved throughout the chain of <code>map</code> and <code>filter</code> operations.  Within its implementation, <code>Maybe&lt;T&gt;</code> do the right thing when the value is missing to prevent us from encountering <code>NullPointerException</code>.  There is a check for <code>null</code> when needed, internally, within <code>Maybe&lt;T&gt;</code>.  This internalization removes the burden of checking for <code>null</code> on the programmer and removes the possibility of run-time crashes due to missing <code>null</code> checks.</p>"},{"location":"32-lazy.html","title":"Unit 32: Lazy Evaluation","text":"<p>After this unit, students should understand:</p> <ul> <li>what is lazy evaluation and how lambda expression allows us to delay the execution of a computation</li> <li>how memoization and the <code>Lazy&lt;T&gt;</code> abstraction allows us to evaluate an expression exactly once.</li> </ul>"},{"location":"32-lazy.html#lambda-as-delayed-data","title":"Lambda as Delayed Data","text":"<p>When we write a lambda expression like this: <pre><code>Transformer&lt;Integer, Integer&gt; f = x -&gt; x + 1;\n</code></pre></p> <p>we are just defining an expression.  We are not invoking the function <code>x + 1</code>.  This is perhaps clear to most students since to invoke the function, we need an argument for <code>x</code>, and no argument is supplied when we define <code>f</code>.</p> <p>Consider the following functional interfaces instead: <pre><code>@FunctionalInterface\ninterface Producer&lt;T&gt; {\nT produce();\n}\n\n@FunctionalInterface\ninterface Task {\nvoid run();\n}\n</code></pre></p> <p>These functional interfaces have a method that does not take in a parameter.  So, we would be using them like such:</p> <pre><code>i = 4;\nTask print = () -&gt; System.out.println(i);\nProducer&lt;String&gt; toStr = () -&gt; Integer.toString(i);\n</code></pre> <p>Keep in mind that these are still lambda expressions and nothing is executed by simply declaring them.  We are just saving them to be executed later.</p> <p>Lambda expression, therefore, allows us to delay the execution of code, saving them until we need it later.  This enables another powerful mechanism called lazy evaluation.  We can build up a sequence of complex computations, without actually executing them, until we need to.  Expressions are evaluated on demand when needed.</p> <p>Consider the following class:</p> <pre><code>// Version 0.1 (eager evaluation)\n\nclass Logger {\nenum LogLevel { INFO, WARNING, ERROR };\n\npublic static LogLevel currLogLevel = LogLevel.WARNING;\n\nstatic void log(LogLevel level, String msg) {\nif (level.compareTo(Logger.currLogLevel) &gt;= 0) {\nSystem.out.println(\" [\" + level + \"] \" + msg);\n}\n}\n}\n</code></pre> <p>The <code>log</code> method checks the seriousness level of the message against the current log level, and only prints the message if the level of the message is the same or higher.  For instance, if the current log level is <code>WARNING</code>, then</p> <pre><code>Logger.log(Logger.LogLevel.INFO, \"User \" + System.getProperty(\"user.name\") + \" has logged in\");\n</code></pre> <p>will not get printed.</p> <p>However, regardless of whether the log message will be printed, the method <code>System.getProperty(\"user.name\")</code> will be evaluated, which is wasteful.</p> <p>A better design for this case is to wrap the message <code>msg</code> within a lambda expression, so that it does not get evaluated eagerly when we pass it in as a parameter.  We can wrap the message with a <code>Producer&lt;String&gt;</code>.  The new <code>lazyLog</code> method would look like this:</p> <pre><code>// Version 0.2 (with Producer)\n\nclass Logger {\nenum LogLevel { INFO, WARNING, ERROR };\n\npublic static LogLevel currLogLevel = LogLevel.WARNING;\n\nstatic void lazyLog(LogLevel level, Producer&lt;String&gt; msg) {\nif (level.compareTo(Logger.currLogLevel) &gt;= 0) {\nSystem.out.println(\" [\" + level + \"] \" + msg.produce());\n}\n}\n}\n</code></pre> <p>and is invoked like this: <pre><code>Logger.lazyLog(Logger.LogLevel.INFO, () -&gt; \"User \" + System.getProperty(\"user.name\") + \" has logged in\");\n</code></pre></p> <p>The method <code>System.getProperty(\"user.name\")</code> is now lazily called, only if the message is going to be printed.</p>"},{"location":"32-lazy.html#memoization","title":"Memoization","text":"<p>We have so far seen one way of being lazy, i.e., procrastinating our computation until we really need the data.  Another way of being lazy is not to repeat ourselves.  If we have computed the value of a function before, we can cache (or memoize) the value, keep it somewhere, so that we don't need to compute it again.  This is useful, of course, only if the function is pure -- regardless of how many times we invoke the function, it always returns the same value, and invoking it has no side effects on the execution of the program.  Here, we see another important advantage of keeping our code pure and free of side effects -- so that we can be lazy!</p> <p>While other languages such as Scala as native support for lazy variables, Java does not.  So let's build a simple one here.  (You will build a more sophisticated one in Lab 6) </p> <pre><code>class Lazy&lt;T&gt; {\nprivate T value;\nprivate boolean evaluated;\nprivate Producer&lt;T&gt; producer;\n\npublic Lazy(Producer&lt;T&gt; producer) {\nevaluated = false;\nvalue = null;\nthis.producer = producer;\n}\n\npublic T get() {\nif (!evaluated) {\nvalue = producer.produce();\nevaluated = true;\n}\nreturn value;\n}\n}\n</code></pre> <p>We can now rewrite our <code>Logger</code> as</p> <pre><code>// version 0.3 (with Lazy)\n\nclass Logger {\nenum LogLevel { INFO, WARNING, ERROR };\n\npublic static LogLevel currLogLevel = LogLevel.WARNING;\n\nstatic void lazyLog(LogLevel level, Lazy&lt;String&gt; msg) {\nif (level.compareTo(Logger.currLogLevel) &gt;= 0) {\nSystem.out.println(\" [\" + level + \"] \" + msg.get());\n}\n}\n}\n</code></pre> <p>and call it with: <pre><code>Lazy&lt;String&gt; loginMessage = new Lazy(\n() -&gt; \"User \" + System.getProperty(\"user.name\") + \" has logged in\");\nLogger.lazyLog(Logger.LogLevel.INFO, loginMessage);\n</code></pre></p> <p>If <code>loginMessage</code> is used in multiple places, memoization ensures that <code>System.getProperty(\"user.name\")</code> and the concatenation of the strings are done only once.</p>"},{"location":"33-infinitelist.html","title":"Unit 33: Infinite list","text":"<p>After this unit, students should understand:</p> <ul> <li>how infinite lists can be constructed using a lazy evaluation.</li> </ul>"},{"location":"33-infinitelist.html#preliminary-an-eagerly-evaluated-list","title":"Preliminary: An Eagerly Evaluated List","text":"<p>Let's consider first how we can represent an eagerly evaluated, finite list, recursively.  A simple way is to treat the list as a recursive structure, containing a <code>head</code> and a <code>tail</code>, with the <code>tail</code> being a list itself.  We have a special terminating list called <code>Sentinel</code> that we use to terminate the EagerList.</p> <pre><code>class EagerList&lt;T&gt; {\nprivate final T head;\nprivate final EagerList&lt;T&gt; tail;\nprivate static EagerList&lt;?&gt; EMPTY = new Sentinel(); public EagerList(T head, EagerList&lt;T&gt; tail) {\nthis.head = head;\nthis.tail = tail;\n}\n\npublic T head() {    // be careful, the method name\nreturn this.head;  // is the same as the field name\n}\n\npublic EagerList&lt;T&gt; tail() { // same here, method name\nreturn this.tail;          // is the same as field name\n}\n\npublic T get(int n) {\nif (n == 0) {\nreturn this.head();          // be careful!\n}                              //   use the methods\nreturn this.tail().get(n - 1); //   instead of fields\n}\n\npublic static &lt;T&gt; EagerList&lt;T&gt; empty() {\n@SuppressWarnings(\"unchecked\")\nEagerList&lt;T&gt; temp = (EagerList&lt;T&gt;) EMPTY;\nreturn temp;\n}\n\nprivate static class Sentinel extends EagerList&lt;Object&gt; {\nSentinel() {\nsuper(null, null);\n}\n\n@Override\npublic Object head() {\nthrow new java.util.NoSuchElementException();\n}\n\n@Override\npublic EagerList&lt;Object&gt; tail() {\nthrow new java.util.NoSuchElementException();\n}\n\n@Override\npublic Object get(int n) {\nthrow new java.util.NoSuchElementException();\n}\n}\n}\n</code></pre> <p>Let's provide two factory methods called <code>generate</code> and <code>iterate</code>, that will populate our EagerList for us.</p> <pre><code>  public static &lt;T&gt; EagerList&lt;T&gt; generate(T t, int size) {\nif (size == 0) {\nreturn empty();\n}\nreturn new EagerList&lt;&gt;(t, generate(t, size - 1));\n}\n\npublic static &lt;T&gt; EagerList&lt;T&gt; iterate(T init, BooleanCondition&lt;? super T&gt; cond, Transformer&lt;? super T, ? extends T&gt; op) {\nif (!cond.test(init)) {\nreturn empty();\n}\nreturn new EagerList&lt;&gt;(init, iterate(op.transform(init), cond, op));\n}\n</code></pre> <p>Let's now provide the standard operation <code>map</code> so that we can transform the items in the list. The <code>map</code> method takes a lambda expression as the parameter, applies it recursively to every element in the list, and returns the resulting new list. </p> <pre><code>  public &lt;R&gt; EagerList&lt;R&gt; map(Transformer&lt;? super T, ? extends R&gt; mapper) {\nreturn new EagerList&lt;&gt;(mapper.transform(this.head()), this.tail().map(mapper));\n}\n</code></pre> <p>We can also provide the <code>filter</code> method, that takes in lambda expression as a parameter and tests if each element in the list passes the test.  We return the list containing only the elements that pass the given test.</p> <pre><code>  public EagerList&lt;T&gt; filter(BooleanCondition&lt;? super T&gt; cond) {\nif (cond.test(this.head())) {\nreturn new EagerList&lt;&gt;(this.head(), this.tail().filter(cond));\n}\nreturn this.tail().filter(cond);\n}\n</code></pre> <p>We have the special <code>Sentinel</code> cases, <pre><code>  @Override\npublic &lt;R&gt; EagerList&lt;R&gt; map(Transformer&lt;? super Object, ? extends R&gt; mapper) {\nreturn empty();\n}\n\n@Override\npublic EagerList&lt;Object&gt; filter(BooleanCondition&lt;? super Object&gt; cond) {\nreturn empty();\n}\n</code></pre></p> <p>The resulting list can be used this way: <pre><code>EagerList&lt;Integer&gt; l = EagerList.iterate(1, i -&gt; i &lt; 10, i -&gt; i + 1) // [1, ..., 9]\n.filter(i -&gt; i % 3 == 0)  // [3, 6, 9]\n.map(i -&gt; i * 2);  // [6, 12, 18]\nl.head();        // 6\nl.tail().head(); // 12\nl.tail().tail().head(); // 18\nl.get(2);               // 18\n</code></pre></p>"},{"location":"33-infinitelist.html#an-infinite-list","title":"An Infinite List","text":"<p>Lazy evaluation allows us to delay the computation that produces data until the data is needed.  This powerful concept enables us to build computationally-efficient data structures.  We will focus on building a list with a possibly infinite number of elements -- something that couldn't be done without lazy evaluation.  Any eager-evaluation-based solution will just run in an infinite loop if the list is infinitely long.  For instance,</p> <pre><code>EagerList.iterate(\"\", s -&gt; s.length() &gt;= 0, s -&gt; s + \"a\"); // infinite loop\n</code></pre> <p>Just as we saw in the previous unit, we can delay a computation by using the <code>Producer</code> functional interface (or anything equivalent).  Instead of doing <code>compute()</code> which is immediately evaluated when executed, we replace it with a <code>Producer</code> <code>() -&gt; compute()</code>, which \"stores\" the computation in an instance of <code>Producer</code>, and we only call it when we invoke the <code>produce()</code> method.</p> <p>Instead of storing the head and tail of the list, we can think of an infinite list as consisting of two functions, the first is a function that generates head, and the second is a function that generates the tail.  Our <code>InfiniteList</code> looks like this:</p> <pre><code>class InfiniteList&lt;T&gt; {\nprivate final Producer&lt;T&gt; head;\nprivate final Producer&lt;InfiniteList&lt;T&gt;&gt; tail;\n\npublic InfiniteList(Producer&lt;T&gt; head, Producer&lt;InfiniteList&lt;T&gt;&gt; tail) {\nthis.head = head;\nthis.tail = tail;\n}\n\npublic T head() {             // be careful, the method name\nreturn this.head.produce(); // is the same as the field name\n}\n\npublic InfiniteList&lt;T&gt; tail() { // same here, method name\nreturn this.tail.produce();   // is the same as field name\n}\n\npublic T get(int n) {\nif (n == 0) {\nreturn this.head();          // be careful!\n}                              //   use the methods\nreturn this.tail().get(n - 1); //   instead of fields\n}\n}\n</code></pre> <p>Note that we don't need a <code>Sentinel</code> for now.  We will need it if we have operations that truncate the list to a finite one, but let's not worry about it yet.</p> <p>We now change the <code>generate</code> method to be lazy, by passing in a producer instead.  We no longer need to pass in the size, since the list can be infinitely long! <pre><code>  public static &lt;T&gt; InfiniteList&lt;T&gt; generate(Producer&lt;T&gt; producer) {\nreturn new InfiniteList&lt;T&gt;(producer,\n() -&gt; generate(producer));\n}\n</code></pre></p> <p>We can change <code>iterate</code> as well to only iterate through and generate the next element when we need it.  Note that we no longer need to provide the terminating condition <code>cond</code>. <pre><code>  public static &lt;T&gt; InfiniteList&lt;T&gt; iterate(T init, Transformer&lt;T, T&gt; next) {\nreturn new InfiniteList&lt;T&gt;(() -&gt; init,\n() -&gt; iterate(next.transform(init), next));\n}\n</code></pre></p> <p>Here are some examples of how to use the two methods above:</p> <pre><code>InfiniteList&lt;Integer&gt; ones = InfiniteList.generate(() -&gt; 1); // 1, 1, 1, 1, ....\nInfiniteList&lt;Integer&gt; evens = InfiniteList.iterate(0, x -&gt; x + 2); // 0, 2, 4, 6, ...\nevens.head(); // -&gt; 0\nevens.get(5); // -&gt; 10\nevens = evens.tail(); evens.head(); // -&gt; 2\nevens.get(6); // -&gt; 14\n</code></pre> <p>Both the lists <code>ones</code> and <code>evens</code> are infinitely long, but due to lazy evaluation, we do not generate all the elements in advance, but only when an element is needed.  </p>"},{"location":"33-infinitelist.html#map","title":"Map","text":"<p>Let's now write the lazy version of <code>map</code> as well:</p> <pre><code>public &lt;R&gt; InfiniteList&lt;R&gt; map(Transformer&lt;? super T, ? extends R&gt; mapper) {\nreturn new InfiniteList&lt;&gt;(\n() -&gt; mapper.transform(this.head()),\n() -&gt; this.tail().map(mapper));\n}\n</code></pre> <p>The <code>map</code> method is lazy. All it does is create a new list initialized with a new lambda expression that applies the given lambda expression <code>mapper</code> to the head and the tail.</p> <p>When we run: <pre><code>evens.map(x -&gt; x + 1);\nevens.map(x -&gt; x + 1).map(x -&gt; x * 2);\n</code></pre></p> <p>We get an infinite list with elements 1, 3, 5, 7, etc, but the values in the list are not realized until they are needed, just like before.  Only when we call <code>head()</code> will we evaluate the lambda expressions and obtain the results:</p> <pre><code>evens.map(x -&gt; x + 1).map(x -&gt; x * 2).head(); // 2\n</code></pre>"},{"location":"33-infinitelist.html#under-the-hood","title":"Under The Hood","text":"<p>It is worthwhile to trace through the code and understand how <code>head()</code> works.  For simplicity, let's put all our code together for easy reference.</p> <pre><code>class InfiniteList&lt;T&gt; {\nprivate final Producer&lt;T&gt; head;\nprivate final Producer&lt;InfiniteList&lt;T&gt;&gt; tail;\n\npublic static &lt;T&gt; InfiniteList&lt;T&gt; generate(Producer&lt;T&gt; producer) {\nreturn new InfiniteList&lt;T&gt;(producer,\n() -&gt; InfiniteList.generate(producer));\n}\n\npublic static &lt;T&gt; InfiniteList&lt;T&gt; iterate(T init, Transformer&lt;T, T&gt; next) {\nreturn new InfiniteList&lt;T&gt;(() -&gt; init,\n() -&gt; InfiniteList.iterate(next.transform(init), next));\n}\n\npublic InfiniteList(Producer&lt;T&gt; head, Producer&lt;InfiniteList&lt;T&gt;&gt; tail) {\nthis.head = head;\nthis.tail = tail;\n}\n\npublic T head() {             // be careful, the method name\nreturn this.head.produce(); // is the same as the field name\n}\n\npublic InfiniteList&lt;T&gt; tail() { // same here, method name\nreturn this.tail.produce();   // is the same as field name\n}\n\npublic T get(int n) {\nif (n == 0) {\nreturn this.head();          // be careful!\n}                              //   use the methods\nreturn this.tail().get(n - 1); //   instead of fields\n}\n\npublic &lt;R&gt; InfiniteList&lt;R&gt; map(Transformer&lt;? super T, ? extends R&gt; mapper) {\nreturn new InfiniteList&lt;&gt;(\n() -&gt; mapper.transform(this.head()),\n() -&gt; this.tail().map(mapper));\n}\n}\n</code></pre> <p>Let's rewrite the statement <pre><code>evens.map(x -&gt; x + 1).map(x -&gt; x * 2).head(); // 2\n</code></pre></p> <p>into something uglier and more verbose, but with intermediate variables to help us explain what happens when the statement above is invoked.</p> <pre><code>InfiniteList&lt;Integer&gt; evens = InfiniteList.iterate(0, x -&gt; x + 2); // 0, 2, 4, 6, ...\nInfiniteList&lt;Integer&gt; odds = evens.map(x -&gt; x + 1); // 1, 3, 5, ...\nInfiniteList&lt;Integer&gt; altEvens = odds.map(x -&gt; x * 2); // 2, 6, 10, .. \naltEvens.head();\n</code></pre> <p>Let's look at what gets created on the heap when we run</p> <pre><code>InfiniteList&lt;Integer&gt; evens = InfiniteList.iterate(0, x -&gt; x + 2); // 0, 2, 4, 6, ...\n</code></pre> <p></p> <p>The figure above shows the objects created.  <code>evens</code> is an instance of <code>InfiniteList</code>, with two fields, <code>head</code> and <code>tail</code>, each pointing to an instance of <code>Producer&lt;T&gt;</code>.  The two instances of <code>Producer&lt;T&gt;</code> capture the variable <code>init</code>.  The <code>tail</code> additionally captures the variable <code>next</code>, which itself is an instance of <code>Transformer&lt;T,T&gt;</code>. </p> <p>Next, let's look at what gets created on the heap when we run</p> <pre><code>InfiniteList&lt;Integer&gt; odds = evens.map(x -&gt; x + 1); // 1, 3, 5, ...\n</code></pre> <p></p> <p>The figure above shows the objects added.  <code>odds</code> is an instance of <code>InfiniteList</code>, with two fields, <code>head</code> and <code>tail</code>, each pointing to an instance of <code>Producer&lt;T&gt;</code>.  The two instances of <code>Producer&lt;T&gt;</code> capture the local variable <code>this</code> and <code>mapper</code> of the method <code>map</code>.  <code>mapper</code> refers to an instance of <code>Transformer&lt;T, T&gt;</code>.  Since the method <code>map</code> of <code>evens</code> is called, the <code>this</code> reference refers to the object <code>evens</code>. </p> <p>After calling  <pre><code>InfiniteList&lt;Integer&gt; altEvens = odds.map(x -&gt; x * 2); // 2, 6, 10, .. \n</code></pre></p> <p>We have the following objects set up.</p> <p></p> <p>Let's now trace through what happens when we call <code>altEvens.head()</code>.  This method leads to the call <code>this.head().produce()</code>, where <code>this</code> refers to <code>altEvens</code>.  The call to <code>produce</code> invoked <code>mapper.transform(this.head.produce())</code> of the producer labelled 1 in the figure below.  This leads to <code>this.head.produce()</code> of this producer being called.  Within this producer, <code>this</code> refers to <code>odds</code>, and so <code>this.head.produce()</code> invoked <code>mapper.transform(this.head.produce())</code> of the producer labelled 2.   Now, <code>this</code> refers to <code>evens</code>, and <code>this.head.produce()</code> causes the producer <code>() -&gt; init</code> (labelled 3) to produce 0.</p> <p></p> <p>The execution now returns to the invocation of <code>mapper.transform(this.head.produce())</code> and call <code>mapper.transform(0)</code> (labelled 4).  This returns the value 1, which we pass into the <code>mapper.transform(1)</code> (labelled 5).  The <code>mapper</code> is <code>x -&gt; x * 2</code> so we have the result 2, which we return from <code>altEvens.head()</code>.</p> <p>This process shows a very different order of execution than <code>EagerList</code>. If we run,  <pre><code>EagerList.iterate(0, x -&gt; x &lt; 10, x -&gt; x + 2)\n.map(x -&gt; x + 1)\n.map(x -&gt; x * 2)\n.head();\n</code></pre></p> <p>The method <code>iterate</code> generates all the elements first, then all the elements gets <code>map</code>-ed with <code>x -&gt; x + 1</code>, then with <code>x -&gt; x + 2</code>, and then the first element is retrieved.  </p> <p>When we run,  <pre><code>InfiniteList.iterate(0, x -&gt; x + 2)\n.map(x -&gt; x + 1)\n.map(x -&gt; x * 2)\n.head();\n</code></pre></p> <p>The method calls <code>iterate</code> and <code>map</code> only set up the producers that call other producers.  The call to <code>head()</code> is the trigger that causes the chain of producers to produce a value.</p>"},{"location":"33-infinitelist.html#filtering-a-lazy-list","title":"Filtering A Lazy List","text":"<p>Now, let's consider how we would filter an <code>InfiniteList</code>.  This is a bit trickier.  The following naive version does not work. <pre><code>  // wrong\npublic InfiniteList&lt;T&gt; filter(BooleanCondition&lt;? super T&gt; cond) {\nif (cond.test(this.head())) {\nreturn new InfiniteList&lt;&gt;(this.head, () -&gt; this.tail().filter(cond));\n}\nreturn this.tail().filter(cond);\n}\n</code></pre></p> <p>There are two things wrong with this.  First,  Line 3 <code>cond.test(this.head())</code> is actually eager.  It computes the head to test if it passes the given condition.  Second, Line 6 is eager, it produces the tail to recursively filter it.</p> <p>To make <code>filter</code> lazy, we have to perform the test in the producer that produces the head. But if the test fails, we have to mark the head as filtered.</p> <pre><code>  public InfiniteList&lt;T&gt; filter(BooleanCondition&lt;? super T&gt; cond) {\nProducer&lt;T&gt; newHead = () -&gt; cond.test(this.head()) ? this.head() : null;\nreturn new InfiniteList&lt;&gt;(newHead, () -&gt; this.tail().filter(cond));\n}\n</code></pre> <p>In the code above, we use <code>null</code> to indicate that the <code>head</code> is filtered for simplicity.  It is not a good practice, however since <code>null</code> could be a valid value in an infinite list.</p> <p>Putting the abuse of <code>null</code> aside, the possibility that the head produces a value that is filtered affects other methods. The methods <code>head</code> and <code>tail</code> have to be changed to: <pre><code>  public T head() {\nT h = this.head.produce();\nreturn h == null ? this.tail.produce().head() : h;  }\n\npublic InfiniteList&lt;T&gt; tail() {\nT h = this.head.produce();\nreturn h == null ? this.tail.produce().tail() : this.tail.produce();  }\n</code></pre></p>"},{"location":"33-infinitelist.html#further-improvements","title":"Further Improvements","text":"<p>We have seen <code>Maybe&lt;T&gt;</code> as an abstraction that encapsulates a value that is either there or is missing.  Instead of using <code>null</code> to present a value that is not there, it is better to use <code>Maybe&lt;T&gt;</code> to encapsulate the value of the head.</p> <p>Further, our implementation of <code>InfiniteList&lt;T&gt;</code> so far does not make use of memoization.  The same value keeps getting produced repeatedly.  We have built the class <code>Lazy&lt;T&gt;</code> that encapsulates a value that is produced on-demand with memoization to guarantee that it is produced at most once.  It is better to use <code>Lazy&lt;T&gt;</code> to encapsulate the value of the head as well.</p> <p>We leave the construction of an <code>InfiniteList&lt;T&gt;</code> that uses <code>Lazy&lt;Maybe&lt;T&gt;&gt;</code> for its head as an exercise.</p>"},{"location":"34-stream.html","title":"Unit 34: Streams in Java","text":"<p>After this unit, students should understand:</p> <ul> <li>how to use Java <code>Stream</code>.</li> <li>the difference between Java <code>Stream</code> and <code>InfiniteList</code>.</li> </ul>"},{"location":"34-stream.html#java-api","title":"Java API","text":"<p>We have been building and using our own functional interfaces and abstractions. </p> <p>Java provides its own version of functional interfaces that are comparable to ours, in the <code>java.util.function</code> package.  The table below shows some commonly used ones:</p> CS2030S java.util.function <code>BooleanCondition&lt;T&gt;::test</code> <code>Predicate&lt;T&gt;::test</code> <code>Producer&lt;T&gt;::produce</code> <code>Supplier&lt;T&gt;::get</code> <code>Consumer&lt;T&gt;::consume</code> <code>Consumer&lt;T&gt;::accept</code> <code>Transformer&lt;T,R&gt;::transform</code> <code>Function&lt;T,R&gt;::apply</code> <code>Transformer&lt;T,T&gt;::transform</code> <code>UnaruOp&lt;T&gt;::apply</code> <code>Combiner&lt;S,T,R&gt;::combine</code> <code>BiFunction&lt;S,T,R&gt;::apply</code> <p>Besides, some of the abstractions we have built have similar counterparts in Java as well:</p> CS2030S Java version <code>Box&lt;T&gt;</code> N/A <code>Maybe&lt;T&gt;</code> <code>java.util.Optional&lt;T&gt;</code> <code>Lazy&lt;T&gt;</code> N/A <code>InfiniteList&lt;T&gt;</code> <code>java.util.stream.Stream&lt;T&gt;</code> <p>We will focus this unit on <code>Stream</code> since the Java implementation of <code>Stream</code> is an infinite list with much more functionalities, some of which (such as parallel streams) are beyond what we can build ourselves in CS2030S.</p>"},{"location":"34-stream.html#building-a-stream","title":"Building a Stream","text":"<p>To start, let's see how we can build a stream object:</p> <ul> <li>We can use the static factory method <code>of</code> (e.g., <code>Stream.of(1, 2, 3)</code>)</li> <li>We can use the <code>generate</code> and <code>iterate</code> methods (similar to our <code>InfiniteList</code>)</li> <li>We can convert an array into a <code>Stream</code> using <code>Arrays::stream</code></li> <li>We can convert a <code>List</code> instance (or any <code>Collection</code> instance) into a <code>Stream</code> using <code>List::stream</code></li> </ul> <p>Many other APIs in Java return a <code>Stream</code> instance (e.g., <code>Files::lines</code>)</p>"},{"location":"34-stream.html#terminal-operations","title":"Terminal Operations","text":"<p>A <code>Stream</code> is lazy, just like <code>InfiniteList</code>.</p> <p>A terminal operation is an operation on the stream that triggers the evaluation of the stream.  A typical way of writing code that operates on streams is to chain a series of intermediate operations together, ending with a terminal operation.  </p> <p>The <code>forEach</code> method is a terminal operation that takes in a stream and applies a lambda expression to each element. The lambda expression to apply does not return any value.  Java provides the <code>Consumer&lt;T&gt;</code> functional interface for this.   Typical use is <pre><code>Stream.of(1, 2, 3).forEach(System.out::println);\nStream.generate(() -&gt; 1).forEach(System.out::println); // infinite loop\n</code></pre></p>"},{"location":"34-stream.html#intermediate-stream-operations","title":"Intermediate Stream Operations","text":"<p>An intermediate operation on stream returns another <code>Stream</code>.  Java provides <code>map</code>, <code>filter</code>, <code>flatMap</code>, and other intermediate operations.  Intermediate operations are lazy and do not cause the stream to be evaluated.  </p>"},{"location":"34-stream.html#flatmapping-a-stream","title":"FlatMapping a Stream","text":"<p>You have seen <code>flatMap</code> for <code>Box&lt;T&gt;</code>, <code>Maybe&lt;T&gt;</code> and <code>Lazy&lt;T&gt;</code>.  The method <code>flatMap</code> in <code>Stream</code> behaves similarly -- it takes a lambda expression that transforms every element in the stream into another stream.  The resulting stream of streams is then flattened and concatenated together.  </p> <p>For instance, <pre><code>Stream.of(\"hello\\nworld\", \"ciao\\nmondo\", \"Bonjour\\nle monde\", \"Hai\\ndunia\")\n.map(x -&gt; x.lines()) // returns a stream of streams\n</code></pre></p> <pre><code>Stream.of(\"hello\\nworld\", \"ciao\\nmondo\", \"Bonjour\\nle monde\", \"Hai\\ndunia\")\n.flatMap(x -&gt; x.lines()) // return a stream of strings\n</code></pre>"},{"location":"34-stream.html#stateful-and-bounded-operations","title":"Stateful and Bounded Operations","text":"<p>Some intermediate operations are stateful -- they need to keep track of some states to operate.  Two examples are <code>sorted</code> and <code>distinct</code>.</p> <p><code>sorted</code> returns a stream with the elements in the stream sorted.  Without argument, it sorts according to the natural order as defined by implementing the <code>Comparable</code> interface.  You can also pass in a <code>Comparator</code> to tell <code>sorted</code> how to sort.</p> <p><code>distinct</code> returns a stream with only distinct elements in the stream. </p> <p><code>distinct</code> and <code>sorted</code> are also known as <code>bounded</code> operations, since they should only be called on a finite stream -- calling them on an infinite stream is a bad idea!</p>"},{"location":"34-stream.html#truncating-an-infinite-list","title":"Truncating an Infinite List","text":"<p>There are several intermediate operations that convert from infinite stream to finite stream: </p> <ul> <li><code>limit</code> takes in an <code>int</code> \\(n\\) and returns a stream containing the first \\(n\\) elements of the stream;</li> <li><code>takeWhile</code> takes in a predicate and returns a stream containing the elements of the stream, until the predicate becomes false.  The resulting stream might still be infinite if the predicate never becomes false.</li> </ul> <p>For instance, </p> <pre><code>Stream.iterate(0, x -&gt; x + 1).takeWhile(x -&gt; x &lt; 5); </code></pre> <p>create a (lazy) finite stream of elements 0 to 4.</p>"},{"location":"34-stream.html#peeking-with-a-consumer","title":"Peeking with a <code>Consumer</code>","text":"<p>A particularly useful intermediate operation of <code>Stream</code> is <code>peek</code>.  <code>peek</code> takes in a <code>Consumer</code>, allowing us to apply a lambda on a \"fork\" of the stream.  For instance,</p> <pre><code>Stream.iterate(0, x -&gt; x + 1).peek(System.out::println).takeWhile(x -&gt; x &lt; 5).forEach(x -&gt; {});\n</code></pre>"},{"location":"34-stream.html#reducing-a-stream","title":"Reducing a Stream","text":"<p>One of the more powerful terminal operations in <code>Stream</code> is <code>reduce</code>, also known as <code>fold</code> or <code>accumulate</code> elsewhere, the <code>reduce</code> operation applies a lambda repeatedly on the elements of the stream to reduce it into a single value.  </p> <p>For instance, <pre><code>Stream.of(1, 2, 3).reduce(0, (x, y) -&gt; x + y);\n</code></pre> returns the sum of all elements in the stream.</p> <p>The method <code>reduce</code> takes in an identity value (<code>0</code> in the example above) and an accumulation function (<code>(x, y) -&gt; x + y</code> above) and returns the reduced value.  The process of reduction is equivalent to the following pseudocode:</p> <pre><code>result = identity\nfor each element in the stream\n     result = accumulator.apply(result, element)\nreturn result\n</code></pre> <p>Note that there are constraints on the identity and accumulation function, which are placed due to the potential parallelization of <code>reduce</code>.   We will revisit this operation later.</p> <p>Java also overloaded <code>reduce</code> with two other versions -- a simpler one (with <code>null</code> identity) and a more complex one, which supports a different returned type than the type of the elements in the stream.   You can read the java API for details.</p>"},{"location":"34-stream.html#element-matching","title":"Element Matching","text":"<p>Stream also provides terminal operations for testing if the elements pass a given predicate:</p> <ul> <li><code>noneMatch</code> returns true if none of the elements pass the given predicate.</li> <li><code>allMatch</code> returns true if every element passes the given predicate.</li> <li><code>anyMatch</code> returns true if at least one element passes the given predicate.</li> </ul>"},{"location":"34-stream.html#consumed-once","title":"Consumed Once","text":"<p>One of the greatest limitations of <code>Stream</code>, which does not apply to our <code>InfiniteList</code>, is that a stream can only be operated on once.  We cannot iterate through a stream multiple times.  Doing so would lead to an <code>IllegalStateException</code> being thrown.  We have to recreate the stream if we want to operate on the stream more than once.</p> <p>Example, <pre><code>Stream&lt;Integer&gt; s = Stream.of(1,2,3);\ns.count();\ns.count(); // &lt;- error\n</code></pre></p>"},{"location":"34-stream.html#example-is-this-a-prime","title":"Example: Is this a prime?","text":"<p>Consider the method below, which checks if a given <code>int</code> is a prime:</p> <pre><code>boolean isPrime(int x) {\nfor (int i = 2; i &lt;= x-1; i++) {\nif (x % i == 0) {\nreturn false;\n}\n}\nreturn true;\n}\n</code></pre> <p>Let's see how we can rewrite this with <code>Stream</code>.  Due to the overhead of wrapper classes, Java provides specialized streams on primitives: <code>IntStream</code>, <code>LongStream</code>, and <code>DoubleStream</code>, with similar set of methods provided.  Since we are dealing with <code>int</code> here, we will use <code>IntStream</code>.  The code above can be rewritten as:</p> <pre><code>boolean isPrime(int x) {\nreturn IntStream.range(2, x)\n.noneMatch(i -&gt; x % i == 0);\n}\n</code></pre> <p>The <code>IntStream::range(x,y)</code> method generates a stream of <code>int</code> from <code>x</code> to <code>y-1</code>.</p>"},{"location":"34-stream.html#example-first-500-primes","title":"Example: First 500 primes","text":"<p>What if we want to print out the first 500 prime numbers, starting from 2?  Normally, we would do the following: <pre><code>void fiveHundredPrime() {\nint count = 0;\nint i = 2;\nwhile (count &lt; 500) {\nif (isPrime(i)) {\nSystem.out.println(i);\ncount++;\n}\ni++;\n}\n}\n</code></pre></p> <p>The code is still considered simple, and understandable for many, but I am sure some of us will encounter a bug the first time we write this (either forgot to increment the counter or put the increment in the wrong place).  If you look at the code, there are a couple of components:</p> <ul> <li>Lines 3 and 9 deal with iterating through different numbers for primality testing</li> <li>Line 5 is the test of whether a number is prime</li> <li>Lines 2, 4, and 7, deal with limiting the output to 500 primes</li> <li>Line 6 is the action to perform on the prime</li> </ul> <p>With streams, we can write it like the following: <pre><code>IntStream.iterate(2, x -&gt; x+1)\n.filter(x -&gt; isPrime(x))\n.limit(500)\n.forEach(System.out::println);\n</code></pre></p> <p>Notice how each of the four components matches neatly with one operation on stream!  </p> <p>With a stream, we no longer have to write loops, we have moved the iterations to within each operation in the stream.  We no longer need to maintain states and counters, they are done within each operation as needed as well.  This has another powerful implication: our code becomes more declarative, we only need to concern about what we want at each step, much less about how to do it.  Doing so makes our code more succinct and less bug-prone.</p>"},{"location":"34-stream.html#caution-avoid-overusing-streams","title":"Caution: Avoid Overusing Streams","text":"<p>We will end this unit with a note of caution.</p> <p>Using stream in place of loops should make our code simpler, more elegant, and less bug-prone.  One should note that not all loops can be translated into stream elegantly.  A double-nested loop, for instance, stretches the elegance of streams.  A triple-nested loop should perhaps be best written as a loop with appropriate inner components written with lambdas and streams.</p> <p>As you go through exercises in using streams, you will find more examples of the limitations of streams.</p>"},{"location":"35-logger.html","title":"Unit 35: Loggable","text":"<p>After this unit, students should understand:</p> <ul> <li>why we need <code>flatMap</code> operation.</li> </ul> <p>So far in the class, we have seen very general abstractions that support the <code>flatMap</code> operation.  But, it is not clear where this operation comes from, why is it fundamental, nor why is it useful1</p> <p>In this unit, we are going to build a general abstraction step-by-step, get stuck at some point, and see how <code>flatMap</code> comes to our rescue, and hopefully, through this exercise, you will get some appreciation of <code>flatMap</code>.</p>"},{"location":"35-logger.html#function-composition","title":"Function Composition","text":"<p>Let's start with some methods that we wish to operate over <code>int</code>.  Let's use some trivial functions so that we don't get distracted by its details.</p> <pre><code>int incr(int x) {\nreturn x + 1;\n}\n\nint abs(int x) {\nreturn x &gt; 0 ? x : -x;\n}\n</code></pre> <p>These methods are pure functions without side effects, they take in one argument and produce a result. </p> <p>Just like mathematical functions, we can compose them together in arbitrary order to form more complex operations.</p> <pre><code>incr(abs(-4));\nabs(incr(incr(5)));\n</code></pre>"},{"location":"35-logger.html#loggable-with-pair","title":"<code>Loggable</code> with <code>Pair</code>","text":"<p>Suppose now we want to return not only an <code>int</code>, but some additional information related to the operation on <code>int</code>.  For instance, let's suppose we want to return a string describing the operation (for logging).  Java does not support returning multiple values, so let's return a <code>Pair</code>.</p> <pre><code>Pair&lt;Integer,String&gt; incrWithLog(int x) {\nreturn Pair.of(incr(x), \"; incr \" + x);\n}\n\nPair&lt;Integer,String&gt; absWithLog(int x) {\nreturn Pair.of(abs(x), \"; abs \" + x);\n}\n</code></pre> <p>Now, we can't compose the methods as cleanly as before.  This is because the return value of <code>absWithLog</code> is a <code>Pair&lt;Integer,String&gt;</code> but <code>incrWithLog</code> accepts an <code>int</code> as its parameter.</p> <pre><code>incrWithLog(absWithLog(-4));  // error\n</code></pre> <p>We will need to change our methods to take in <code>Pair&lt;Integer,String&gt;</code> as the argument.</p> <pre><code>Pair&lt;Integer,String&gt; incrWithLog(Pair&lt;Integer,String&gt; p) {\nreturn Pair.of(incr(p.first), p.second + \"; incr \" + p.first);\n}\n\nPair&lt;Integer,String&gt; absWithLog(Pair&lt;Integer,String&gt; p) {\nreturn Pair.of(abs(p.first), p.second + \"; abs \" + p.first);\n}\n</code></pre> <p>We can now compose the methods. <pre><code>incrWithLog(absWithLog(Pair.of(-4, \"\"))); </code></pre></p>"},{"location":"35-logger.html#loggable-class","title":"<code>Loggable</code> Class","text":"<p>Let's do it in a more OO-way, by writing a class to replace <code>Pair</code>.</p> <pre><code>// version 0.1\nclass Loggable {\nprivate final int value;\nprivate final String log;\n\nprivate Loggable(int value, String log) {\nthis.value = value;\nthis.log = log;\n}\n\npublic static Loggable of(int value) {\nreturn new Loggable(value, \"\");\n}\n\nLoggable incrWithLog() {\nreturn new Loggable(incr(this.value), this.log + \"; incr \" + this.value);\n}\n\nLoggable absWithLog() {\nreturn new Loggable(abs(this.value), this.log + \"; abs \" + this.value);\n}\n\npublic String toString() {\nreturn \"value: \" + this.value + \", log: \" + this.log;\n}\n}\n</code></pre> <p>We can use the class above as: <pre><code>Loggable x = Loggable.of(4);\nLoggable z = x.incrWithLog().absWithLog();\n</code></pre></p> <p>Note that we can now chain the methods together to compose them.  Additionally, the log messages get passed from one call to another and get \"composed\" as well.</p>"},{"location":"35-logger.html#making-loggable-general","title":"Making <code>Loggable</code> general","text":"<p>There are many possible operations on <code>int</code>, and we do not want to add a method <code>fooWithLog</code> for every function <code>foo</code>.  One way to make <code>Loggable</code> general is to abstract out the <code>int</code> operation and provide that as a lambda expression to <code>Loggable</code>.  This is what the <code>map</code> method does. </p> <pre><code>  Loggable map(Transformer&lt;Integer,Integer&gt; transformer) {\nreturn new Loggable(transformer.transform(this.value), this.log); }\n</code></pre> <p>We can use it like: <pre><code>Loggable.of(4).map(x -&gt; incr(x)).map(x -&gt; abs(x))\n</code></pre></p> <p>We can still chain the methods together to compose them.</p> <p>But, <code>map</code> allows us to only apply the function to the value.  What should we do to the log messages?  Since the given lambda returns an int, it is not sufficient to tell us what message we want to add to the log.</p> <p>To fix this, we will need to pass in a lambda expression that takes in an integer, but return us a pair of integer and a string, in other words, return us a <code>Loggable</code>.  We call our new method <code>flatMap</code>.</p> <pre><code>  Loggable flatMap(Transformer&lt;Integer,Loggable&gt; transformer) {\nLoggable l = transformer.transform(this.value);\nreturn new Loggable(l.value, l.log + this.log); }\n</code></pre> <p>By making <code>flatMap</code> takes in a lambda that returns a pair of integer and string, <code>Loggable</code> can rely on these lambda to tell it how to update the log messages.  Now, if we have methods like this:</p> <pre><code>Loggable incrWithLog(int x) {\nreturn new Loggable(incr(x), \"; incr \" + x);\n}\n\nLoggable absWithLog(int x) {\nreturn new Loggable(abs(x), \"; abs \" + x);\n}\n</code></pre> <p>We can write: <pre><code>Loggable.of(4)\n.flatMap(x -&gt; incrWithLog(x))\n.flatMap(x -&gt; absWithLog(x))\n</code></pre></p> <p>to now compose the methods <code>incr</code> and <code>abs</code> together, along with the log messages!</p>"},{"location":"35-logger.html#making-loggable-more-general","title":"Making <code>Loggable</code> More General","text":"<p>We started with an operation on <code>int</code>, but our <code>Loggable</code> class is fairly general and should be able to add a log message to any operation of any type.  We can make it so by making <code>Loggable</code> a generic class.</p> <pre><code>// version 0.2\nclass Loggable&lt;T&gt; {\nprivate final T value;\nprivate final String log;\n\nprivate Loggable(T value, String log) {\nthis.value = value;\nthis.log = log;\n}\n\npublic static &lt;T&gt; Loggable&lt;T&gt; of(T value) {\nreturn new Loggable&lt;&gt;(value, \"\");\n}\n\npublic &lt;R&gt; Loggable&lt;R&gt; flatMap(Transformer&lt;? super T, ? extends Loggable&lt;? extends R&gt;&gt; transformer) {\nLoggable&lt;? extends R&gt; l = transformer.transform(this.value);\nreturn new Loggable&lt;&gt;(l.value, l.log + this.log);\n}\n\npublic String toString() {\nreturn \"value: \" + this.value + \", log: \" + this.log;\n}\n}\n</code></pre> <ol> <li> <p>This note is inspired by The Best Introduction to Monad. Another excellent notes on category theory is by Bartosz Milewski \u21a9</p> </li> </ol>"},{"location":"36-monad.html","title":"Unit 36: Monad","text":"<p>After this unit, students should:</p> <ul> <li>understand what are functors and monads</li> <li>understand the laws that a functor and monad must obey and be able to verify them</li> </ul>"},{"location":"36-monad.html#generalizing-loggablet","title":"Generalizing <code>Loggable&lt;T&gt;</code>","text":"<p>We have just created a class <code>Loggable&lt;T&gt;</code> with a <code>flatMap</code> method that allows us to operate on the value encapsulated inside, along with some \"side information\".  <code>Loggable&lt;T&gt;</code> follows a pattern that we have seen many times before.  We have seen this in <code>Maybe&lt;T&gt;</code> and <code>Lazy&lt;T&gt;</code>, and <code>InfiniteList&lt;T&gt;</code>.  Each of these classes has:</p> <ul> <li>an <code>of</code> method to initialize the value and side information.</li> <li>have a <code>flatMap</code> method to update the value and side information.</li> </ul> <p>Different classes above have different side information that is initialized, stored, and updated when we use the <code>of</code> and <code>flatMap</code> operations.  The class may also have other methods besides the two above.  Additionally, the methods may have different name.</p> Container Side-Information <code>Maybe&lt;T&gt;</code> The value might be there (i.e., <code>Some&lt;T&gt;</code>) or might not be there (i.e., <code>None</code>) <code>Lazy&lt;T&gt;</code> The value has been evaluated or not <code>Loggable&lt;T&gt;</code> The log describing the operations done on the value <p>These classes that we wrote follow certain patterns that make them well behaved when we create them with <code>of</code> and chain them with <code>flatMap</code>.  Such classes that are \"well behaved\" are examples of a programming construct called monads.  A monad must follow three laws, to behave well.  Let's examine the laws below.</p>"},{"location":"36-monad.html#identity-laws","title":"Identity Laws","text":"<p>Before we list down the first and second laws formally, let's try to get some intuition over the desired behavior first.</p> <p>The <code>of</code> method in a monad should behave like an identity.  It creates a new monad by initializing our monad with a value and its side information.   For instance, in our <code>Loggable&lt;T&gt;</code>, <pre><code>public static &lt;T&gt; Loggable&lt;T&gt; of(T value) {\nreturn new Loggable&lt;&gt;(value, \"\");\n}\n</code></pre></p> <p>The logger is initialized with empty side information (e.g., empty string as a log message).</p> <p>Now, let's consider the lambda that we wish to pass into <code>flatMap</code>  -- such a lambda takes in a value, compute it, and wrap it in a \"new\" monad, together with the correponding side information.  For instance,</p> <pre><code>Loggable&lt;Integer&gt; incrWithLog(int x) {\nreturn new Loggable&lt;&gt;(incr(x), \"incr \" + x + \"; \");\n}\n</code></pre> <p>What should we expect when we take a fresh new monad <code>Loggable.of(4)</code> and call <code>flatMap</code> with a function <code>incrWithLog</code>?  Since <code>Loggable.of(4)</code> is new with no operation performed on it yet, calling  <pre><code>Loggable.of(4).flatMap(x -&gt; incrWithLog(x)) </code></pre></p> <p>should just result in the same value exactly as calling <code>incrWithLog(4)</code>.  So, we expect that, after calling the above, we have a <code>Loggable</code> with a value 5 and a log message of <code>\"incr 4\"</code>.</p> <p>Our <code>of</code> method should not do anything extra to the value and side information -- it should simply wrap the value 4 into the <code>Loggable</code>.  Our <code>flatMap</code> method should not do anything extra to the value and the side information, it should simply apply the given lambda expression to the value.</p> <p>Now, suppose we take an instance of <code>Loggable</code>, called <code>logger</code>, that has already been operated on one or more times with <code>flatMap</code>, and contain some side information.  What should we expect when we call: <pre><code>logger.flatMap(x -&gt; Loggable.of(x))\n</code></pre></p> <p>Since <code>of</code> should behave like an identity, it should not change the value or add extra side information.  The <code>flatMap</code> above should do nothing and the expression above should be the same as <code>logger</code>.</p> <p>What we have just described above is called the left identity law and the right identity law of monads.  To be more general, let <code>Monad</code> be a type that is a monad and <code>monad</code> be an instance of it.</p> <p>The left identity law says:</p> <ul> <li><code>Monad.of(x).flatMap(x -&gt; f(x))</code> must be the same as <code>f(x)</code></li> </ul> <p>The right identity law says:</p> <ul> <li><code>monad.flatMap(x -&gt; Monad.of(x))</code> must be the same as <code>monad</code></li> </ul>"},{"location":"36-monad.html#associative-law","title":"Associative Law","text":"<p>Let's now go back to the original <code>incr</code> and <code>abs</code> functions for a moment.  To compose the functions, we can write <code>abs(incr(x))</code>, explicitly one function after another.  Or we can compose them as another function:  <pre><code>int absIncr(int x) {\nreturn abs(incr(x));\n}\n</code></pre></p> <p>and call it <code>absIncr(x)</code>.  The effects should be exactly the same.  It does not matter if we group the functions together into another function before applying it to a value x.</p> <p>Recall that after we build our <code>Loggable</code> class, we were able to compose the functions <code>incr</code> and <code>abs</code> by chaining the <code>flatMap</code>:</p> <pre><code>Loggable.of(4)\n.flatMap(x -&gt; incrWithLog(x))\n.flatMap(x -&gt; absWithLog(x))\n</code></pre> <p>We should get the resulting value as <code>abs(incr(4))</code>, along with the appropriate log messages.</p> <p>Another way to call <code>incr</code> and then <code>abs</code> is to write something like this: <pre><code>Loggable&lt;Integer&gt; absIncrWithLog(int x) {\nreturn incrWithLog(x).flatMap(y -&gt; absWithLog(y));\n}\n</code></pre></p> <p>We have composed the methods <code>incrWithLog</code> and <code>absWithLog</code> and grouped them under another method.  Now, if we call: <pre><code>Loggable.of(4)\n.flatMap(x -&gt; absIncrWithLog(x))\n</code></pre></p> <p>The two expressions must have exactly the same effect on the value and its log message.</p> <p>This example leads us to the third law of monads: regardless of how we group that calls to <code>flatMap</code>, their behaviour must be the same.  This law is called the associative law.  More formally, it says:</p> <ul> <li><code>monad.flatMap(x -&gt; f(x)).flatMap(x -&gt; g(x))</code> must be the same as <code>monad.flatMap(x -&gt; f(x).flatMap(y -&gt; g(y)))</code></li> </ul>"},{"location":"36-monad.html#a-counter-example","title":"A Counter Example","text":"<p>If our monads follow the laws above, we can safely write methods that receive a monad from others, operate on it, and return it to others.  We can also safely create a monad and pass it to the clients to operate on.  Our clients can then call our methods in any order and operate on the monads that we create, and the effect on its value and side information is as expected.</p> <p>Let's try to make our <code>Loggable</code> misbehave a little.  Suppose we change our <code>Loggable&lt;T&gt;</code> to be as follows:</p> <pre><code>// version 0.3 (NOT a monad)\nclass Loggable&lt;T&gt; {\nprivate final T value;\nprivate final String log;\n\nprivate Loggable(T value, String log) {\nthis.value = value;\nthis.log = log;\n}\n\npublic static &lt;T&gt; Loggable&lt;T&gt; of(T value) {\nreturn new Loggable&lt;&gt;(value, \"Logging starts: \");\n}\n\npublic &lt;R&gt; Loggable&lt;R&gt; flatMap(Transformer&lt;? super T, ? extends Loggable&lt;? extends R&gt;&gt; transformer) {\nLoggable&lt;? extends R&gt; logger = transformer.transform(this.value);\nreturn new Loggable(logger.value, logger.log + this.log + \"\\n\");\n}\n\npublic String toString() {\nreturn \"value: \" + this.value + \", log: \" + this.log;\n}\n}\n</code></pre> <p>Our <code>of</code> adds a little initialization message.  Our <code>flatMap</code> adds a little new line before appending with the given log message.  Now, our <code>Loggable&lt;T&gt;</code> is not that well behaved anymore.</p> <p>Suppose we have two methods <code>foo</code> and <code>bar</code>, both take in an <code>x</code> and perform a series of operations on <code>x</code>.  Both returns us a <code>Loggable</code> instance on the final value and its log.</p> <pre><code>Loggable&lt;Integer&gt; foo(int x) {\nreturn Loggable.of(x)\n.flatMap(...)\n.flatMap(...)\n:\n;\n}\nLoggable&lt;Integer&gt; bar(int x) {\nreturn Loggable.of(x)\n.flatMap(...)\n.flatMap(...)\n:\n;\n}\n</code></pre> <p>Now, we want to perform the sequence of operations done in <code>foo</code>, followed by the sequence of operations done in <code>bar</code>.  So we called: <pre><code>foo(4).flatMap(x -&gt; bar(x))\n</code></pre></p> <p>We will find that the string <code>\"Logging starts\"</code> appears twice in our logs and there is now an extra blank line in the log file!</p>"},{"location":"36-monad.html#functors","title":"Functors","text":"<p>We will end this unit with a brief discussion on functors, another common abstraction in functional-style programming.  A functor is a simpler construction than a monad in that it only ensures lambdas can be applied sequentially to the value, without worrying about side information.</p> <p>Recall that when we build our <code>Loggable&lt;T&gt;</code> abstraction, we add a <code>map</code> that only updates the value but changes nothing to the side information.  One can think of a functor as an abstraction that supports <code>map</code>.</p> <p>A functor needs to adhere to two laws:</p> <ul> <li>preserving identity: <code>functor.map(x -&gt; x)</code> is the same as <code>functor</code></li> <li>preserving composition: <code>functor.map(x -&gt; f(x)).map(x -&gt; g(x))</code> is the same as <code>functor.map(x -&gt; g(f(x))</code>. </li> </ul> <p>Our classes from <code>cs2030s.fp</code>, <code>Lazy&lt;T&gt;</code>, <code>Maybe&lt;T&gt;</code>, and <code>InfiniteList&lt;T&gt;</code> are functors as well.</p>"},{"location":"36-monad.html#monads-and-functors-in-other-languages","title":"Monads and Functors in Other Languages","text":"<p>Such abstractions are common in other languages.  In Scala, for instance, the collections (list, set, map, etc.) are monads.  In pure functional languages like Haskell, monads are one of the fundamental building blocks.</p>"},{"location":"37-parallel.html","title":"Unit 37: Parallel Streams","text":"<p>After this unit, students should:</p> <ul> <li>be aware that a program can be broken into subtasks to run parallelly and/or concurrently </li> <li>be aware of the issues caused by running subtasks parallelly and concurrently.</li> <li>be aware that there exist tradeoffs in the number of subtasks and the processing overhead.</li> <li>be familiar with how to process a stream parallelly and correctly.</li> </ul>"},{"location":"37-parallel.html#parallel-and-concurrent-programming","title":"Parallel and Concurrent Programming","text":"<p>So far, the programs that we have written in CS2030S run sequentially.  What this means is that at any one time, there is only one instruction of the program running on a processor.</p> <p></p>"},{"location":"37-parallel.html#what-is-concurrency","title":"What is Concurrency?","text":"<p>A single-core processor can only execute one instruction at one time -- this means that only one process (or less precisely speaking, one application) can run at any one time.  Yet, when we use the computer, it feels as if we are running multiple processes at the same time.  The operating system, behind the scenes, is switching between the different processes, to give the user the illusion that they are running at the same time.</p> <p></p> <p>We can write a program so that it runs concurrently -- by dividing the computation into subtasks called threads. Such multi-thread programs are useful in two ways: (i) it allows us, the programmers, to separate unrelated tasks into threads, and write each thread separately; (ii) it improves the utilization of the processor.  For instance, if I/O is in one thread, and UI rendering is in another, then when the processor is waiting for I/O to complete, it can switch to the rendering thread to make sure that the slow I/O does not affect the responsiveness of UI.</p>"},{"location":"37-parallel.html#what-is-parallelism","title":"What is Parallelism?","text":"<p>While concurrency gives the illusion of subtasks running at the same time, parallel computing refers to the scenario where multiple subtasks are truly running at the same time -- either we have a processor that is capable of running multiple instructions at the same time, or we have multiple cores/processors and dispatch the instructions to the cores/processors so that they are executed at the same time.</p> <p></p> <p>All parallel programs are concurrent, but not all concurrent programs are parallel.</p> <p>Modern computers have more than one core/processor1.  As such, the line between parallelism and concurrency is blurred.</p>"},{"location":"37-parallel.html#parallel-computing","title":"Parallel Computing","text":"<p>Parallel computing is one of the major topics in computer science.  One can teach a whole module (or a focus area) on this topic alone.  The goal of this lecture is not to cover it in-depth but is to expose students in CS2030S to the concept of parallel computing in relation to the Stream abstraction in Java.</p>"},{"location":"37-parallel.html#parallel-stream","title":"Parallel Stream","text":"<p>We have seen that the Java <code>Stream</code> class is a powerful and useful class for processing data in a declarative style.  But, we have not fully unleashed the power of <code>Stream</code>.  The neatest thing about <code>Stream</code> is that it allows parallel operations on the elements of the stream in one single line of code.</p> <p>Let's consider the following program that prints out all the prime numbers between 2,030,000 and 2,040,000.</p> <pre><code>IntStream.range(2_030_000, 2_040_000)\n.filter(x -&gt; isPrime(x))\n.forEach(System.out::println);\n</code></pre> <p>We can parallelize the code by adding the call <code>parallel()</code> into the stream.</p> <pre><code>IntStream.range(2_030_000, 2_040_000)\n.filter(x -&gt; isPrime(x))\n.parallel()\n.forEach(System.out::println);\n</code></pre> <p>You may observe that the output has been reordered, although the same set of numbers are still being produced.  This is because <code>Stream</code> has broken down the numbers into subsequences, and run <code>filter</code> and <code>forEach</code> for each subsequence in parallel.  Since there is no coordination among the parallel tasks on the order of the printing, whichever parallel tasks that complete first will output the result to screen first, causing the sequence of numbers to be reordered.</p> <p>If you want to produce the output in the order of input, use <code>forEachOrdered</code> instead of <code>forEach</code>, we will lose some benefits of parallelization because of this.</p> <p>Suppose now that we want to compute the number of primes between 2,030,000 and 2,040,000.  We can run:</p> <pre><code>IntStream.range(2_030_000, 2_040_000)\n.filter(x -&gt; isPrime(x))\n.parallel()\n.count();\n</code></pre> <p>The code above produces the same output regardless if it is being parallelized or not.</p> <p>Note that the task above is stateless and does not produce any side effects.  Furthermore, each element is processed individually without depending on other elements.  Such computation is sometimes known as embarrassingly parallel.  The only communication needed for each of the parallel subtasks is to combine the result of <code>count()</code> from the subtasks into the final count (which has been implemented in <code>Stream</code> for us).</p>"},{"location":"37-parallel.html#how-to-parallelize-a-stream","title":"How to Parallelize a Stream","text":"<p>You have seen that adding <code>parallel()</code> to the pipeline of calls in a stream enables parallel processing of the stream.  Note that <code>parallel()</code> is a lazy operation -- it merely marks the stream to be processed in parallel.  As such, you can insert the call to <code>parallel()</code> anywhere in the pipeline after the data source and before the terminal operation.</p> <p>sequential()</p> <p>There is a method <code>sequential()</code> which marks the stream to be process sequentially.  If you call both <code>parallel()</code> and <code>sequential()</code> in a stream, the last call \"wins\".  The example below processes the stream  sequentially: <pre><code>s.parallel().filter(x -&gt; x &lt; 0).sequential().forEach(..); \n</code></pre></p> <p>Another way to create a parallel stream is to call the method <code>parallelStream()</code> instead of <code>stream()</code> of the <code>Collector</code> class.  Doing so would create a stream that will be processed in parallel from the collection.</p>"},{"location":"37-parallel.html#what-can-be-parallelized","title":"What Can be Parallelized?","text":"<p>To ensure that the output of the parallel execution is correct, the stream operations must not interfere with the stream data, and most of the time must be stateless.  Side-effects should be kept to a minimum.</p>"},{"location":"37-parallel.html#interference","title":"Interference","text":"<p>Interference means that one of the stream operations modifies the source of the stream during the execution of the terminal operation.  For instance:</p> <pre><code>List&lt;String&gt; list = new ArrayList&lt;&gt;(List.of(\"Luke\", \"Leia\", \"Han\"));\nlist.stream()\n.peek(name -&gt; {\nif (name.equals(\"Han\")) {\nlist.add(\"Chewie\"); // they belong together\n}\n})\n.forEach(i -&gt; {});\n</code></pre> <p>would cause <code>ConcurrentModificationException</code> to be thrown.  Note that this non-interference rule applies even if we are using <code>stream()</code> instead of <code>parallelStream()</code>.</p>"},{"location":"37-parallel.html#stateful-vs-stateless","title":"Stateful vs. Stateless","text":"<p>A stateful lambda is one where the result depends on any state that might change during the execution of the stream.</p> <p>For instance, the <code>generate</code> and <code>map</code> operations below are stateful, since they depend on the state of the standard input. Parallelizing this may lead to incorrect output.  To ensure that the output is correct, additional work needs to be done to ensure that state updates are visible to all parallel subtasks.</p> <pre><code>Stream.generate(scanner::nextInt)\n.map(i -&gt; i + scanner.nextInt())\n.forEach(System.out::println)\n</code></pre>"},{"location":"37-parallel.html#side-effects","title":"Side Effects","text":"<p>Side-effects can lead to incorrect results in parallel execution.  Consider the following code:</p> <pre><code>List&lt;Integer&gt; list = new ArrayList&lt;&gt;(\nArrays.asList(1,3,5,7,9,11,13,15,17,19));\nList&lt;Integer&gt; result = new ArrayList&lt;&gt;();\nlist.parallelStream()\n.filter(x -&gt; isPrime(x))\n.forEach(x -&gt; result.add(x));\n</code></pre> <p>The <code>forEach</code> lambda generates a side effect -- it modifies <code>result</code>.  <code>ArrayList</code> is what we call a non-thread-safe data structure.  If two threads manipulate it at the same time, an incorrect result may result.</p> <p>There are three ways to resolve this.  One, we can use the <code>.collect</code> method. <pre><code>list.parallelStream()\n.filter(x -&gt; isPrime(x))\n.collect(Collectors.toList())\n</code></pre></p> <p>Second, we can use a thread-safe data structure.  Java provides several in <code>java.util.concurrent</code> package, including <code>CopyOnWriteArrayList</code>.</p> <pre><code>List&lt;Integer&gt; result = new CopyOnWriteArrayList&lt;&gt;();\nlist.parallelStream()\n.filter(x -&gt; isPrime(x))\n.forEach(x -&gt; result.add(x));\n</code></pre> <p>Lastly, in Java 17, there is a <code>.toList</code> method that simply returns a list in the same order as the stream. <pre><code>list.parallelStream()\n.filter(x -&gt; isPrime(x))\n.toList()\n</code></pre></p>"},{"location":"37-parallel.html#associativity","title":"Associativity","text":"<p>The <code>reduce</code> operation is inherently parallelizable, as we can easily reduce each sub-stream and then use the <code>combiner</code> to combine the results.  Consider this example:</p> <pre><code>Stream.of(1,2,3,4).reduce(1, (x, y) -&gt; x * y, (x, y) -&gt; x * y);\n</code></pre> <p>To allow us to run <code>reduce</code> in parallel, however, there are several rules that the <code>identity</code>, the <code>accumulator</code>, and the <code>combiner</code> must follow:</p> <ul> <li><code>combiner.apply(identity, i)</code> must be equal to <code>i</code>.</li> <li>The <code>combiner</code> and the <code>accumulator</code> must be associative -- the order of applying must not matter.</li> <li>The <code>combiner</code> and the <code>accumulator</code> must be compatible -- <code>combiner.apply(u, accumulator.apply(identity, t))</code> must equal to <code>accumulator.apply(u, t)</code></li> </ul> <p>The multiplication example above meetings the three rules:</p> <ul> <li><code>i * 1</code> equals <code>i</code></li> <li><code>(x * y) * z</code> equals <code>x * (y * z)</code></li> <li><code>u * (1 * t)</code> equals <code>u * t</code></li> </ul>"},{"location":"37-parallel.html#performance-of-parallel-stream","title":"Performance of Parallel Stream","text":"<p>Let's go back to:</p> <pre><code>IntStream.range(2_030_000, 2_040_000)\n.filter(x -&gt; isPrime(x))\n.parallel()\n.count();\n</code></pre> <p>How much time can we save by parallelizing the code above?</p> <p>Let's use the <code>Instant</code> and <code>Duration</code> class from Java to help us:</p> <pre><code>Instant start = Instant.now();\nlong howMany = IntStream.range(2_000_000, 3_000_000)\n.filter(x -&gt; isPrime(x))\n.parallel()\n.count();\nInstant stop = Instant.now();\nSystem.out.println(howMany + \" \" + Duration.between(start,stop).toMillis() + \" ms\");\n</code></pre> <p>The code above measures roughly the time it takes to count the number of primes between 2 million and 3 million.  On my iMac, it takes 450-550 ms.  If I remove <code>parallel()</code>, it takes slightly more than 1 second.  So with <code>parallel()</code> we gain about 50% performance.</p> <p>Can we parallelize some more?  Remember how we implement <code>isPrime</code>2</p> <pre><code>boolean isPrime(int n) {\nreturn IntStream.range(2, (int)Math.sqrt(n) + 1)\n.noneMatch(x -&gt; n % x == 0);\n}\n</code></pre> <p>Let's parallelize this to make this even faster!</p> <pre><code>boolean isPrime(int n) {\nreturn IntStream.range(2, (int)Math.sqrt(n) + 1)\n.parallel()\n.noneMatch(x -&gt; n % x == 0);\n}\n</code></pre> <p>If you run the code above, however, you will find that the code is not as fast as we expect. On my iMac, it takes about 18s, about 18 times slower!</p> <p>Parallelizing a stream does not always improve the performance.  Creating a thread to run a task incurs some overhead, and the overhead of creating too many threads might outweigh the benefits of parallelization.</p>"},{"location":"37-parallel.html#ordered-vs-unordered-source","title":"Ordered vs. Unordered Source","text":"<p>Whether or not the stream elements are ordered or unordered also plays a role in the performance of parallel stream operations.  A stream may define an encounter order.  Streams created from <code>iterate</code>, ordered collections (e.g., <code>List</code> or arrays), from <code>of</code>, are ordered.  Stream created from <code>generate</code> or unordered collections (e.g., <code>Set</code>) are unordered.</p> <p>Some stream operations respect the encounter order.  For instance, both <code>distinct</code> and <code>sorted</code> preserve the original order of elements (if ordering is preserved, we say that an operation is stable).</p> <p>The parallel version of <code>findFirst</code>, <code>limit</code>, and <code>skip</code> can be expensive on an ordered stream, since it needs to coordinate between the streams to maintain the order.</p> <p>If we have an ordered stream and respecting the original order is not important, we can call <code>unordered()</code> as part of the chain command to make the parallel operations much more efficient.</p> <p>The following, for example, takes about 700 ms on my iMac:</p> <pre><code>Stream.iterate(0, i -&gt; i + 7)\n.parallel()\n.limit(10_000_000)\n.filter(i -&gt; i % 64 == 0)\n.forEachOrdered(i -&gt; { });\n</code></pre> <p>But, with <code>unordered()</code> inserted, it takes about 350ms, a 2x speedup!</p> <pre><code>Stream.iterate(0, i -&gt; i + 7)\n.parallel()\n.unordered()\n.limit(10_000_000)\n.filter(i -&gt; i % 64 == 0)\n.forEachOrdered(i -&gt; { });\n</code></pre> <ol> <li> <p>iPhone 12 comes with an A14 Bionic chip with six cores.  The fastest supercomputer in the world as of this writing, the Frontier, has 9,472 processors, each has 64 cores (total of 606,208 CPU cores) as well as 37,888 GPUs each has 220 cores (total of 8,335,360 GPU cores).\u00a0\u21a9</p> </li> <li> <p>This is a more efficient version of the code you have seen since it stops testing after the square root of the \\(n\\).\u00a0\u21a9</p> </li> </ol>"},{"location":"38-thread.html","title":"Unit 38: Threads","text":"<p>After this unit, students should:</p> <ul> <li>understand the behaviour of thread</li> <li>be able to create a simple thread</li> </ul>"},{"location":"38-thread.html#synchronous-programming","title":"Synchronous Programming","text":"<p>So far, when we invoke a method in Java, we expect the method to return us a value when it is done.  If the method is not done, the execution of our program stalls, waiting for the method to complete its execution.  Only after the method returns can the execution of our program continue.</p> <p>We say that the method blocks until it returns.   Such a programming model is known as synchronous programming.</p> <p>Synchronous programming is not very efficient, especially when there are frequent method calls that block for a long period (such as methods that involve expensive computations or reading from a remote server over the Internet).</p> <p>What if we want our program to do something while we wait for the method to return?  For instance, refreshing the UI, or do other computations?</p>"},{"location":"38-thread.html#threads","title":"Threads","text":"<p>One way to achieve this is to use threads.  A thread is a single flow of execution in a program.  Since the beginning of this module, we have been writing single-thread programs, except for parallel streams in Unit 37.</p> <p>Java provides a class called <code>java.lang.Thread</code> that we can use to encapsulate a function to run in a separate thread.  The following example how we can create and run two threads:</p> <pre><code>new Thread(() -&gt; {\nfor (int i = 1; i &lt; 100; i += 1) {\nSystem.out.print(\"_\");\n}\n}).start();\n\nnew Thread(() -&gt; {\nfor (int i = 2; i &lt; 100; i += 1) {\nSystem.out.print(\"*\");\n}\n}).start();\n</code></pre> <p>The <code>new Thread(..)</code> is our usual constructor to create a <code>Thread</code> instance.  The constructor takes a <code>Runnable</code> instance as an argument.  A <code>Runnable</code> is a functional interface with a method <code>run()</code> that takes in no parameter and returns <code>void</code>.</p> <p>With each <code>Thread</code> instance, we run <code>start()</code>, which causes the given lambda expression to run.  Note that <code>start()</code> returns immediately.  It does not return only after the given lambda expression completes its execution.  This property differs from what we are used to, where a method blocks until the task given completes.   This is known as asynchronous execution.</p> <p>The two threads above now run in two separate sequences of execution.  The operating system has a scheduler that decides which threads to run when, and on which core (or which processor).  You might see different interleaving of executions every time you run the same program.</p> <p>Java provides more than one way to create a thread.  The <code>Thread</code> class also contains methods that we can use to query and control, in a finer grain manner, how the thread could be executed.</p>"},{"location":"38-thread.html#names","title":"Names","text":"<p>Every thread in Java has a name, printing out its name is useful for peeking under the hood to see what is happening.  We can use the instance method <code>getName()</code> to find out the name of a thread, and the class method <code>Thread.currentThread()</code> to get the reference of the current running thread.</p> <pre><code>System.out.println(Thread.currentThread().getName());\nnew Thread(() -&gt; {\nSystem.out.print(Thread.currentThread().getName());\nfor (int i = 1; i &lt; 100; i += 1) {\nSystem.out.print(\"_\");\n}\n}).start();\n\nnew Thread(() -&gt; {\nSystem.out.print(Thread.currentThread().getName());\nfor (int i = 2; i &lt; 100; i += 1) {\nSystem.out.print(\"*\");\n}\n}).start();\n</code></pre> <p>Note that the above will also print the name of the thread called <code>main</code>, which is a thread created automatically for us every time our program runs and the class method <code>main()</code> is invoked.</p> <p>With this method, you can now \"visualize\" how many parallel threads are created when you invoke a parallel stream.</p> <p>Try <pre><code>Stream.of(1, 2, 3, 4)\n.parallel()\n.reduce(0, (x, y) -&gt; { System.out.println(Thread.currentThread().getName()); return x + y; });\n</code></pre></p> <p>and you will see something like this: <pre><code>main\nForkJoinPool.commonPool-worker-5\nForkJoinPool.commonPool-worker-5\nForkJoinPool.commonPool-worker-9\nForkJoinPool.commonPool-worker-3\nForkJoinPool.commonPool-worker-3\nForkJoinPool.commonPool-worker-3\n</code></pre></p> <p>being printed.  This shows four concurrent threads running to reduce the stream of 1, 2, 3, 4 (including <code>main</code>).</p> <p>If you remove the <code>parallel()</code> call, then only <code>main</code> is printed, showing the reduction being done sequentially in a single thread.</p> <pre><code>Stream.of(1, 2, 3, 4)\n.reduce(0, (x, y) -&gt; { System.out.println(Thread.currentThread().getName()); return x + y; });\n</code></pre>"},{"location":"38-thread.html#sleep","title":"Sleep","text":"<p>Another useful method in the <code>Thread</code> class is <code>sleep</code>.  You can cause the current execution thread to pause execution immediately for a given period (in milliseconds).   After the sleep timer is over, the thread is ready to be chosen by the scheduler to run again.</p> <p>The following code prints a <code>\".\"</code> on-screen every second while another expensive computation is running.</p> <pre><code>Thread findPrime = new Thread(() -&gt; {\nSystem.out.println(\nStream.iterate(2, i -&gt; i + 1)\n.filter(i -&gt; isPrime(i))\n.limit(1_000_000L)\n.reduce((x, y) -&gt; y)\n.orElse(null));\n});\n\nfindPrime.start();\n\nwhile (findPrime.isAlive()) {\ntry {\nThread.sleep(1000);\nSystem.out.print(\".\");\n} catch (InterruptedException e) {\nSystem.out.print(\"interrupted\");\n}\n} </code></pre> <p>In our examples, we often use <code>Thread.sleep()</code> in our methods to pretend that we are working hard on expensive computation to keep our examples simple.</p> <p>Two more things to note:</p> <ul> <li>The example above shows how we use <code>isAlive()</code> to periodically check if another thread is still running.</li> <li>The program exits only after all the threads created run to their completion.</li> </ul>"},{"location":"39-async.html","title":"Unit 39: Asynchronous Programming","text":"<p>After this unit, students should:</p> <ul> <li>understand the limitation of thread</li> <li>understand and be able to use <code>CompletableFuture</code></li> </ul>"},{"location":"39-async.html#limitations-of-thread","title":"Limitations of <code>Thread</code>","text":"<p>Writing code directly with the <code>Thread</code> class gives us control on how many threads to create, what they do, how they communicate with each other, and some level of control on which thread gets executed when.  While Java's <code>Thread</code> is already a higher-level abstraction compared to, say, the <code>pthread</code> library in C and C++, it still takes a fair amount of effort to write complex multi-threaded programs in Java.</p> <p>Consider the situation where we have a series of tasks that we wish to execute concurrently and we want to organize them such that:</p> <ul> <li>Task A must start first.</li> <li>When Task A is done, we take the result from Task A, and pass it to Tasks B, C, and D.</li> <li>We want Task B and C to complete before we pass their results to Task E.  </li> </ul> <p>We also want to handle exceptions gracefully -- if one of the tasks encounters an exception, the other tasks not dependent on it should still be completed.</p> <p>Implementing the above using <code>Thread</code> requires careful coordination.  Firstly, there are no methods in <code>Thread</code> that return a value.  We need the threads to communicate through shared variables.  Secondly, there is no mechanism to specify the execution order and dependencies among them -- which thread to start after another thread completes.  Finally, we have to consider the possibility of exceptions in each of our tasks.</p> <p>Another drawback of using <code>Thread</code> is its overhead -- the creation of <code>Thread</code> instances takes up some resources in Java.  As much as possible, we should reuse our <code>Thread</code> instances to run multiple tasks.  For instance, the same <code>Thread</code> instance could have run Tasks A, B, and E in the example above.  Managing the <code>Thread</code> instances itself and deciding which <code>Thread</code> instance should run which <code>Thread</code> is a gigantic undertaking.</p>"},{"location":"39-async.html#a-higher-level-abstraction","title":"A Higher-Level Abstraction","text":"<p>What we need is a higher-level abstraction that allows programmers to focus on specifying the tasks and their dependencies, without worrying about the details.  Suppose we want to run the tasks in a single thread, we could do the following:</p> <pre><code>int foo(int x) {\nint a = taskA(x);\nint b = taskB(a);\nint c = taskC(a);\nint d = taskD(a);\nint e = taskE(b, c)\nreturn e;\n}\n</code></pre> <p>We could also use monads to chain up the computations.  Let's say that one of the tasks might not produce a value, then we can use the <code>Maybe&lt;T&gt;</code> monad:</p> <pre><code>Maybe&lt;Integer&gt; foo(int x) {\nMaybe&lt;Integer&gt; a = Maybe.of(taskA(x));\nMaybe&lt;Integer&gt; b = a.flatMap(i -&gt; taskB(i));\nMaybe&lt;Integer&gt; c = a.flatMap(i -&gt; taskC(i));\nMaybe&lt;Integer&gt; d = a.flatMap(i -&gt; taskD(i));\nMaybe&lt;Integer&gt; e = b.combine(c, (i, j) -&gt; taskE(i, j));\nreturn e;\n}\n</code></pre> <p>If we want to perform the tasks lazily, then we can use the <code>Lazy&lt;T&gt;</code> monad:</p> <pre><code>Lazy&lt;Integer&gt; foo(int x) {\nLazy&lt;Integer&gt; a = Lazy.of(taskA(x));\nLazy&lt;Integer&gt; b = a.flatMap(i -&gt; taskB(i));\nLazy&lt;Integer&gt; c = a.flatMap(i -&gt; taskC(i));\nLazy&lt;Integer&gt; d = a.flatMap(i -&gt; taskD(i));\nLazy&lt;Integer&gt; e = b.combine(c, (i, j) -&gt; taskE(i, j));\nreturn e;\n}\n</code></pre> <p>Wouldn't it be nice if there is a monad that allows us to perform the tasks concurrently?  <code>java.util.concurrent.CompletableFuture</code> does just that!  Here is an example of how to use it:</p> <pre><code>CompletableFuture&lt;Integer&gt; foo(int x) {\nCompletableFuture&lt;Integer&gt; a = CompletableFuture.completedFuture(taskA(x));\nCompletableFuture&lt;Integer&gt; b = a.thenComposeAsync(i -&gt; taskB(i));\nCompletableFuture&lt;Integer&gt; c = a.thenComposeAsync(i -&gt; taskC(i));\nCompletableFuture&lt;Integer&gt; d = a.thenComposeAsync(i -&gt; taskD(i));\nCompletableFuture&lt;Integer&gt; e = b.thenCombineAsync(c, (i, j) -&gt; taskE(i, j));\nreturn e;\n}\n</code></pre> <p>We can then run <code>foo(x).get()</code> to wait for all the concurrent tasks to complete and return us the value.  <code>CompletableFuture&lt;T&gt;</code> is a monad that encapsulates a value that is either there or not there yet.  Such an abstraction is also known as a promise in other languages (e.g., <code>Promise</code> in JavaScript and <code>std::promise</code> in C++) -- it encapsulates the promise to produce a value.</p>"},{"location":"39-async.html#the-completablefuture-monad","title":"The <code>CompletableFuture</code> Monad","text":"<p>Let's now examine the <code>CompletableFuture</code> monad in more detail.  A key property of <code>CompletableFuture</code> is whether the value it promises is ready -- i.e., the tasks that it encapsulates has completed or not.</p>"},{"location":"39-async.html#creating-a-completablefuture","title":"Creating a <code>CompletableFuture</code>","text":"<p>There are several ways we can create a <code>CompletableFuture&lt;T&gt;</code> instance:</p> <ul> <li>Use the <code>completedFuture</code> method.  This method is equivalent to creating a task that is already completed and return us a value.  </li> <li>Use the <code>runAsync</code> method that takes in a <code>Runnable</code> lambda expression.  <code>runAsync</code> has the return type of <code>CompletableFuture&lt;Void&gt;</code>.  The returned <code>CompletableFuture</code> instance completes when the given lambda expression finishes.</li> <li>Use the <code>supplyAsync</code> method that takes in a <code>Supplier&lt;T&gt;</code> lambda expression.  <code>supplyAsync</code> has the return type of <code>CompletableFuture&lt;T&gt;</code>.  The returned <code>CompletableFuture</code> instance completes when the given lambda expression finishes.</li> </ul> <p>We can also create a <code>CompletableFuture</code> that relies on other <code>CompletableFuture</code> instances.  We can use <code>allOf</code> or <code>anyOf</code> methods for this.  Both of these methods take in a variable number of other <code>CompletableFuture</code> instances.  A new <code>CompletableFuture</code> created with <code>allOf</code> is completed only when all the given <code>CompletableFuture</code> completes.  On the other hand, a new <code>CompletableFuture</code> created with <code>anyOf</code> is completed when any one of the given <code>CompletableFuture</code> completes.</p>"},{"location":"39-async.html#chaining-completablefuture","title":"Chaining <code>CompletableFuture</code>","text":"<p>The usefulness of <code>CompletableFuture</code> comes from the ability to chain them up and specify a sequence of computations to be run.  We have the following methods:</p> <ul> <li><code>thenApply</code>, which is analogous to <code>map</code></li> <li><code>thenCompose</code>, which is analogous to <code>flatMap</code></li> <li><code>thenCombine</code>, which is analogous to <code>combine</code></li> </ul> <p>The methods above run the given lambda expression in the same thread as the caller.  There is also an asynchronous version (<code>thenApplyAsync</code>, <code>thenComposeAsync</code>, <code>thenCombineAsync</code>), which may cause the given lambda expression to run in a different thread (thus more concurrency).</p> <p><code>CompletableFuture</code> also has several methods that takes in <code>Runnable</code>.  These methods have no analogy in our lab but it is similar to <code>runAsync</code> above.</p> <ul> <li><code>thenRun</code> takes in a <code>Runnable</code>.  It executes the <code>Runnable</code> after the current stage is completed.</li> <li><code>runAfterBoth</code> takes in another <code>CompletableFuture</code>1 and a <code>Runnable</code>.  It executes the <code>Runnable</code> after the current stage completes and the input <code>CompletableFuture</code> are completed.</li> <li><code>runAfterEither</code> takes in another <code>CompletableFuture</code>1 and a <code>Runnable</code>.  It executes the <code>Runnable</code> after the current stage completes or the input <code>CompletableFuture</code> are completed.</li> </ul> <p>All of the methods that takes in <code>Runnable</code> return <code>CompletableFuture&lt;Void&gt;</code>.  Similarly, they also have the asynchronous version (<code>thenRunAsync</code>, <code>runAfterBothAsync</code>, <code>runAfterEitherAsync</code>).</p>"},{"location":"39-async.html#getting-the-result","title":"Getting The Result","text":"<p>After we have set up all the tasks to run asynchronously, we have to wait for them to complete.  We can call <code>get()</code> to get the result.  Since <code>get()</code> is a synchronous call, i.e., it blocks until the <code>CompletableFuture</code> completes, to maximize concurrency, we should only call <code>get()</code> as the final step in our code.</p> <p>The method <code>CompletableFuture::get</code> throws a couple of checked exceptions: <code>InterruptedException</code> and <code>ExecutionException</code>, which we need to catch and handle.  The former refers to the exception that the thread has been interrupted, while the latter refers to errors/exceptions during execution.</p> <p>An alternative to <code>get()</code> is <code>join()</code>.  <code>join()</code> behaves just like <code>get()</code> except that no checked exception is thrown.</p>"},{"location":"39-async.html#example","title":"Example","text":"<p>Let's look at some examples.  Let's reuse our method that computes the i-th prime number.</p> <pre><code>int findIthPrime(int i) {\nreturn Stream\n.iterate(2, x -&gt; x + 1)\n.filter(x -&gt; isPrime(x))\n.limit(i)\n.reduce((x, y) -&gt; y)\n.orElse(0);\n}\n</code></pre> <p>Given two numbers i and j, we want to find the difference between the i-th prime number and the j-th prime number.  We can first do the following:</p> <pre><code>CompletableFuture&lt;Integer&gt; ith = CompletableFuture.supplyAsync(() -&gt; findIthPrime(i));\nCompletableFuture&lt;Integer&gt; jth = CompletableFuture.supplyAsync(() -&gt; findIthPrime(j));\n</code></pre> <p>These calls would launch two concurrent threads to compute the i-th and the j-th primes.   The method calls <code>supplyAsync</code> returns immediately without waiting for <code>findIthPrime</code> to complete.</p> <p>Next, we can say, that, when <code>ith</code> and <code>jth</code> complete, take the value computed by them, and take the difference.  We can use the <code>thenCombine</code> method: <pre><code>CompletableFuture&lt;Integer&gt; diff = ith.thenCombine(jth, (x, y) -&gt; x - y);\n</code></pre></p> <p>This statement creates another <code>CompletableFuture</code> which runs asynchronously that will compute the difference between the two prime numbers.  At this point, we can move on to run other tasks, or if we just want to wait until the result is ready, we call <pre><code>diff.join();\n</code></pre></p> <p>to get the difference between the two primes2.</p>"},{"location":"39-async.html#handling-exceptions","title":"Handling Exceptions","text":"<p>One of the advantages of using <code>CompletableFuture&lt;T&gt;</code> instead of <code>Thread</code> to handle concurrency is its ability to handle exceptions.  <code>CompletableFuture&lt;T&gt;</code> has three methods that deal with exceptions: <code>exceptionally</code>, <code>whenComplete</code>, and <code>handle</code>.   We will focus on <code>handle</code> since it is the most general.</p> <p>Suppose we have a computation inside a <code>CompletableFuture&lt;T&gt;</code> that might throw an exception.  Since the computation is asynchronous and could run in a different thread, the question of which thread should catch and handle the exception arises.  <code>CompletableFuture&lt;T&gt;</code> keeps things simpler by storing the exception and passing it down the chain of calls, until <code>join()</code> is called.  <code>join()</code> might throw <code>CompletionException</code> and whoever calls <code>join()</code> will be responsible for handling this exception.  The <code>CompletionException</code> contains information on the original exception.</p> <p>For instance, the code below would throw a <code>CompletionException</code> with a <code>NullPointerException</code> contains within it.</p> <pre><code>CompletableFuture.&lt;Integer&gt;supplyAsync(() -&gt; null)\n.thenApply(x -&gt; x + 1)\n.join();\n</code></pre> <p>Suppose we want to continue chaining our tasks despite exceptions.  We can use the <code>handle</code> method, to handle the exception.  The <code>handle</code> method takes in a <code>BiFunction</code> (similar to <code>cs2030s.fp.Combiner</code>).  The first parameter to the <code>BiFunction</code> is the value, the second is the exception, the third is the return value.</p> <p>Only one of the first two parameters is not <code>null</code>.  If the value is <code>null</code>, this means that an exception has been thrown.  Otherwise, the exception is <code>null</code>3.    </p> <p>Here is a simple example where we use <code>handle</code> to replace a default value. <pre><code>cf.thenApply(x -&gt; x + 1)\n.handle((t, e) -&gt; (e == null) ? t : 0)\n.join();\n</code></pre></p> <ol> <li> <p>Actually, this is a <code>CompletionStage</code> which is a supertype of <code>CompletableFuture</code>.\u00a0\u21a9\u21a9</p> </li> <li> <p>There is repeated computation in primality checks between the two calls to <code>findIthPrime</code> here, which one could optimize.  We don't do that here to keep the example simple.\u00a0\u21a9</p> </li> <li> <p>This is another instance where Java uses <code>null</code> to indicates a missing value.  We can't use <code>null</code> as a legit value due to this flawed design.\u00a0\u21a9</p> </li> </ol>"},{"location":"40-forkjoin.html","title":"Unit 40: Fork and Join","text":"<p>After this unit, students should:</p> <ul> <li>understand the task deque and work stealing</li> <li>understand the behaviour of <code>fork</code> and <code>join</code> (and <code>compute</code>)</li> <li>be able to order <code>fork</code> and <code>join</code> efficiently</li> <li>be able to use <code>RecursiveTask</code></li> </ul>"},{"location":"40-forkjoin.html#thread-pool","title":"Thread Pool","text":"<p>We now look under the hood of parallel <code>Stream</code> and <code>CompletableFuture&lt;T&gt;</code> to explore how Java manages its threads.  Recall that creating and destroying threads is not cheap, and as much as possible we should reuse existing threads to perform different tasks.  This goal can be achieved by using a thread pool. </p> <p>A thread pool consists of (i) a collection of threads, each waiting for a task to execute, and (ii) a collection of tasks to be executed.  Typically the tasks are put in a shared queue, and an idle thread picks up a task from the shared queue to execute.</p> <p>To illustrate this concept, here is a trivial thread pool with a single thread:</p> <pre><code>Queue&lt;Runnable&gt; queue;\nnew Thread(() -&gt; {\nwhile (true) {\nif (!queue.isEmpty()) {\nRunnable r = queue.dequeue();\nr.run();\n}\n}\n}).start();\n\nfor (int i = 0; i &lt; 100; i++) {\nint count = i;\nqueue.add(() -&gt; System.out.println(count));\n}\n</code></pre> <p>We assume that <code>Queue&lt;T&gt;</code> can be safely modified concurrently (i.e., it is thread-safe) in the sample code above.  Otherwise, just like the example you have seen in parallel streams with <code>List</code>, items might be lost.</p>"},{"location":"40-forkjoin.html#fork-and-join","title":"Fork and Join","text":"<p>Java implements a thread pool called <code>ForkJoinPool</code> that is fine-tuned for the fork-join model of recursive parallel execution.  </p> <p>The Fork-join model is essentially a parallel divide-and-conquer model of computation.  The general idea for the fork-join model is to solve a problem by breaking up the problem into identical problems but with smaller size (fork), then solve the smaller version of the problem recursively, then combine the results (join).   This repeats recursively until the problem size is small enough -- we have reached the base case and so we just solve the problem sequentially without further parallelization.</p> <p>In Java, we can create a task that we can fork and join as an instance of abstract class <code>RecursiveTask&lt;T&gt;</code>.  <code>RecursiveTask&lt;T&gt;</code> supports the methods <code>fork()</code>, which submits a smaller version of the task for execution, and <code>join()</code> (which waits for the smaller tasks to complete and return).   <code>RecursiveTask&lt;T&gt;</code> has an abstract method <code>compute()</code>, which we, as the client, have to define to specify what computation we want to compute.</p> <p>Here is a simple <code>RecursiveTask&lt;T&gt;</code> that recursively sums up the content of an array: <pre><code>class Summer extends RecursiveTask&lt;Integer&gt; {\nprivate static final int FORK_THRESHOLD = 2;\nprivate int low;\nprivate int high;\nprivate int[] array;\n\npublic Summer(int low, int high, int[] array) {\nthis.low = low;\nthis.high = high;\nthis.array = array;\n}\n\n@Override\nprotected Integer compute() {\n// stop splitting into subtask if array is already small.\nif (high - low &lt; FORK_THRESHOLD) {\nint sum = 0;\nfor (int i = low; i &lt; high; i++) {\nsum += array[i];\n}\nreturn sum;\n}\n\nint middle = (low + high) / 2;\nSummer left = new Summer(low, middle, array);\nSummer right = new Summer(middle, high, array);\nleft.fork();\nreturn right.compute() + left.join();\n}\n}\n</code></pre></p> <p>To run this task, we run: <pre><code>Summer task = new Summer(0, array.length, array);\nint sum = task.compute();\n</code></pre></p> <p>The line <code>task.compute()</code> above is just like another method invocation.  It causes the method <code>compute()</code> to be invoked, and if the array is big enough, two new <code>Summer</code> instances, <code>left</code> and <code>right</code>, to be created.  <code>left</code>.  We then call <code>left.fork()</code>, which adds the tasks to a thread pool so that one of the threads can call its <code>compute()</code> method.  We subsequently call <code>right.compute()</code> (which is a normal method call).  Finally, we call <code>left.join()</code>, which blocks until the computation of the recursive sum is completed and returned.  We add the result from <code>left</code> and <code>right</code> together and return the sum.</p> <p>There are other ways we can combine and order the execution of <code>fork()</code>, <code>compute()</code>, and <code>join()</code>.  Some are better than others.  We will explore more in the exercises.</p>"},{"location":"40-forkjoin.html#forkjoinpool","title":"<code>ForkJoinPool</code>","text":"<p>Let's now explore the idea behind how Java manages the thread pool with fork-join tasks.  The details are beyond the scope of this module, but it would be interesting to note a few key points, as follows:</p> <ul> <li>Each thread has a deque1 of tasks.  </li> <li>When a thread is idle, it checks its deque of tasks.  If the deque is not empty, it picks up a task at the head of the deque to execute (e.g., invoke its <code>compute()</code> method).  Otherwise, if the deque is empty, it picks up a task from the tail of the deque of another thread to run.  The latter is a mechanism called work stealing.</li> <li>When <code>fork()</code> is called, the caller adds itself to the head of the deque of the executing thread.  This is done so that the most recently forked task gets executed next, similar to how normal recursive calls.</li> <li>When <code>join()</code> is called, several cases might happen.  If the subtask to be joined hasn't been executed, its <code>compute()</code> method is called and the subtask is executed.  If the subtask to be joined has been completed (some other thread has stolen this and completed it), then the result is read, and <code>join()</code> returns.  If the subtask to be joined has been stolen and is being executed by another thread, then the current thread finds some other tasks to work on either in its local deque or steal another task from another deque.</li> </ul> <p>The beauty of the mechanism here is that the threads always look for something to do and they cooperate to get as much work done as possible.</p> <p>The mechanism here is similar to that implemented in .NET and Rust.</p>"},{"location":"40-forkjoin.html#order-of-fork-and-join","title":"Order of <code>fork()</code> and <code>join()</code>","text":"<p>One implication of how <code>ForkJoinPool</code> adds and removes tasks from the deque is the order in which we call <code>fork()</code> and <code>join()</code>.  Since the most recently forked task is likely to be executed next, we should <code>join()</code> the most recent <code>fork()</code> task first.  In other words, the order of forking should be the reverse of the order of joining.</p> <p>In the class <code>Summer</code> above, <pre><code>    left.fork();  // &gt;-----------+\nright.fork(); // &gt;--------+  | should have\nreturn right.join() // &lt;--+  | no crossing\n+ left.join(); // &lt;-----+\n</code></pre></p> <p>is more efficient than <pre><code>    left.fork();  // &gt;-------------+\nright.fork(); // &gt;----------+  | there is crossing\nreturn left.join()   // &lt;---|--+\n+ right.join(); // &lt;---+\n</code></pre></p> <p>In other words, your <code>fork()</code>, <code>compute()</code>, <code>join()</code> order should form a palindrome and there should be no crossing.  Additionally, there should only be at most a single <code>compute</code> and it should be in the middle of the palindrome.</p> <p>For example, the following is ok. <pre><code>    left.fork();  // &gt;-----------+\nreturn right.compute() //    | compute in middle\n+ left.join(); // &lt;-----+\n</code></pre></p> <p>But the following is not. <pre><code>    return left.compute()   // this is practically\n+ right.compute(); // not even concurrent\n</code></pre></p> <ol> <li> <p>A deque is a double-ended queue.  It behaves like both stack and queue.\u00a0\u21a9</p> </li> </ol>"},{"location":"environments.html","title":"The CS2030S Programming Environment","text":""},{"location":"environments.html#java-version","title":"Java version","text":"<p>Java is a language that continues to evolve.  A new version is released every six months.  For CS2030S, we will only use Java 17, the most recent version with long-term support.  Specifically, we use <code>openjdk 17 2021-09-14</code> on Ubuntu 20.04.5.</p>"},{"location":"environments.html#pe-hosts","title":"PE Hosts","text":"<p>The school has provided a list of computing servers for you to use, with all the required software for CS2030S installed.  You can access them remotely via <code>ssh</code>, or Secure SHell.  The hosts are named <code>pe111</code>, <code>pe112</code>, ..., <code>pe120</code>.  (<code>pe</code> stands for \"programming environment\").  We will refer to these servers generally as the PE hosts.</p> <p>For this semester, the two servers <code>pe115</code> and <code>pe116</code> are not available.</p> <p>You can choose which of the eight hosts to use.  You share the same home directory across all the hosts (this home directory, however, is different from that of <code>stu1</code>).  If you notice that one host is crowded, you can use another host to spread out the load.</p> <p>While you can complete the programming assignments on your computers, the practical exams are done in a controlled environment using servers similar to the PE hosts.  It is therefore advisable for you to familiarize yourself with accessing the PE servers via <code>ssh</code> and edit your program with either <code>vim</code> or <code>emacs</code> (<code>vim</code> is recommended and supported).</p>"},{"location":"environments.html#accessing-the-pe-hosts","title":"Accessing the PE Hosts","text":""},{"location":"environments.html#basic-requirements","title":"Basic Requirements","text":"<ol> <li> <p>You should be familiar with the terms Unix, command-line interface, command prompt, terminal, and shell.  Read this background article if you don't.</p> </li> <li> <p>You need to have an SoC Unix account.  If you do not have one, you can apply for one online.</p> </li> <li> <p>Once you have an account, you need to activate your access to the PE hosts, which are part of the SoC computer clusters.</p> </li> <li> <p>You need a command line <code>ssh</code> client.  Windows 10, macOS, and Linux users should already have it installed by default.</p> </li> <li> <p>You need a good terminal emulator.  For Microsoft Windows users, you can use either PowerShell or Windows Terminal; Mac users can use the default Terminal or iTerm2.  </p> </li> </ol>"},{"location":"environments.html#the-command-to-ssh","title":"The Command to SSH","text":"<p>To connect to a remote host, run the following in your terminal on your local computer: <pre><code>ssh &lt;username&gt;@&lt;hostname&gt;\n</code></pre></p> <p>Replace <code>&lt;username&gt;</code> with your SoC Unix username and <code>&lt;hostname&gt;</code> with the name of the host you want to connect to. For instance, I would do: <pre><code>ssh ooiwt@pe112.comp.nus.edu.sg\n</code></pre></p> <p>if I want to connect to <code>pe112.comp.nus.edu.sg</code>.</p> <p>After the command above, follow the instructions on the screen.  The first time you ever connect to <code>pe112.comp.nus.edu.sg</code>, you will be warned that you are connecting to a previously unknown host.  Answer <code>yes</code>.  After that, you will be prompted with your SoC Unix password.  Note that nothing is shown on the screen when your password is entered.</p>"},{"location":"environments.html#accessing-the-pe-hosts-from-outside-soc","title":"Accessing The PE Hosts from Outside SoC","text":"<p>The PE hosts can only be accessed from within the School of Computing networks.  If you want to access it from outside, you need to connect through SoC VPN.</p> <p>First, you need to set up a Virtual Private Network (VPN) (See instructions here).  The staff at the IT helpdesk in COM1, Level 1, will be able to help you with setting up if needed.</p> <p>SoC VPN vs NUS VPN</p> <p>Note that SoC VPN is different from NUS VPN.  Connecting to NUS VPN only allows you access to the NUS internal network, but not the SoC internal network.</p>"},{"location":"environments.html#troubleshooting","title":"Troubleshooting","text":"<p>Some common error messages and what they mean:</p> <ol> <li> <p><code>ssh: Could not resolve hostname pe1xx.comp.nus.edu.sg</code></p> <p><code>ssh</code> cannot recognize the name <code>pe1xx</code>. Likely, you tried to connect to the PE hosts directly from outside of the SoC network.</p> </li> <li> <p><code>Connection closed by 192.168.48.xxx port 22</code></p> <p>You have connected to the PE host, but you are kicked out because you have no permission to use the host.</p> <p>Make sure you have activated your access to \"SoC computer clusters\" here: https://mysoc.nus.edu.sg/~myacct/services.cgi</p> </li> <li> <p><code>Permission denied, please try again</code></p> <p>You did not enter the correct password or username.  Please use the username and password  of your SoC Unix account which you have created here: https://mysoc.nus.edu.sg/~newacct/.</p> <p>Check that you have entered your username correctly.  It is case-sensitive.</p> <p>If you have lost your password, go here: https://mysoc.nus.edu.sg/~myacct/resetpass.cgi</p> </li> <li> <p><code>Could not chdir to home directory /home/o/ooiwt: Permission denied</code></p> <p>This error means that you have successfully connected to the PE hosts, but you have no access to your home directory. </p> <p>This should not happen.  Please file a service request with SoC IT Unit at https://rt.comp.nus.edu.sg/. Include the error message, the PE hosts that you connected to, and your username.  The system administrator can reset the permission of your home directory for you.</p> </li> </ol>"},{"location":"environments.html#copying-files-between-pe-nodes-and-local-computer","title":"Copying Files between PE Nodes and Local Computer","text":"<p>Secure copy, or <code>scp</code>, is one way to transfer files between the programming environments and your local computer.  <code>scp</code> behaves just like <code>cp</code> (see Unix: Essentials).  The command takes in two arguments, the source, and the destination.  The difference is that we use the <code>&lt;username&gt;@&lt;hostname&gt;:&lt;filename&gt;</code> notation to specify a file on a remote host.</p> <p>Let's say you want to transfer a set of C files from the directory <code>lab01</code> to your local computer.  Then, on the local computer, run:</p> <pre><code>ooiwt@macbook:~$ scp ooiwt@pe111.comp.nus.edu.sg:~/lab01/*.java .\n</code></pre> <p>Warning</p> <p>If you have files with the same name in the remote directory, the files will be overwritten without warning.  I have lost my code a few times due to <code>scp</code>.  </p> <p>The expression <code>*.java</code> is a regular expression that means all files with a filename ending with <code>.java</code> (see Advanced Topics on Unix). You can copy specific files as well.  For instance, to copy the file <code>Hello.java</code> from your local computer to your <code>~/lab01</code> directory:</p> <pre><code>ooiwt@macbook:~$ scp Hello.java ooiwt@pe111.comp.nus.edu.sg:~/lab01\n</code></pre> <p><code>scp</code> supports <code>-r</code> (recursive copy) as well.</p> <p>Note that we always run <code>scp</code> on your local computer in the examples above, since the SSH server runs on the PE host.</p>"},{"location":"environments.html#setting-up-ssh-keys","title":"Setting up SSH Keys","text":"<p>The next step is not required but is a time-saver and a huge quality-of-life improvement.  You need to be familiar with basic Unix commands, including how to copy files to remote hosts (using <code>scp</code>) and how to check/change file permissions (using <code>ls -l</code> and <code>chmod</code>).  If you are still not comfortable with these commands, make sure you play with the basic Unix commands first.  You can come back and complete this step later. </p> <p>Our goal here is to set up a pair of public/private keys for authentication so that you do not need to type your password every time you log into a PE host.</p> <p>You can use the following command on your local computer to generate a pair of keys: <pre><code>ssh-keygen -t rsa\n</code></pre></p> <p>This command will generate two keys, a private key <code>id_rsa</code>, and a public key <code>id_rsa.pub</code>.  Keep the private key <code>id_rsa</code> on your local machine in the hidden <code>~/.ssh</code> directory and copy the public key <code>id_rsa.pub</code> to your account on PE <code>pe111</code>.  </p> <p>There are two methods to do this:</p>"},{"location":"environments.html#method-1-using-ssh-copy-id","title":"Method 1: Using <code>ssh-copy-id</code>","text":"<p>If your local machine has <code>ssh-copy-id</code> installed, then, run: <pre><code>ssh-copy-id &lt;username&gt;@pe111.comp.nus.edu.sg\n</code></pre></p> <p>You will be prompted to enter your password for the PE host.  After this step is completed, your public key will be copied to and configured for password-less login to the PE hosts.</p>"},{"location":"environments.html#method-2-using-scp","title":"Method 2: Using <code>scp</code>","text":"<p>First, use <code>scp</code> to copy the public key <code>id_rsa.pub</code> from your local machine to your home directory on PE <code>pe111</code>.  </p> <p>On <code>pe111</code>, run <pre><code>cat id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys\n</code></pre></p> <p>Make sure that the permission for <code>.ssh</code> both on the local machine and on PE is set to <code>700</code> and the files <code>id_rsa</code> on the local machine and <code>authorized_keys</code> on the remote machine are set to <code>600</code>.  See the guide on using <code>ls</code> and <code>chmod</code> if you are unsure how to do this.</p> <p>Once set up, you need not enter your password every time you run <code>ssh</code> or <code>scp</code>.  </p>"},{"location":"environments.html#stability-of-network-connection","title":"Stability of Network Connection","text":"<p>Note that a stable network connection is required to use the PE hosts for a long period without interruption.   If you encounter frequent disconnections while working at home or on campus while connected wirelessly, please make sure that your Wi-Fi signal is strong and that there is no interference from other sources. </p> <p>If your connection is disconnected in the middle of editing, <code>vim</code> saves the state of the buffer for you.  See the section on recovery files on how to recover your files.</p> <p>If you find yourself facing frequent disconnection, you can consider running <code>screen</code>.  After logging into a PE host, run: <pre><code>screen\n</code></pre></p> <p>You will see some messages, press Enter to go to the command prompt. You can now use the PE host as usual. In case you are disconnected (e.g., in the middle of editing), you can log into the same PE host again, and run:</p> <pre><code>screen -r\n</code></pre> <p>to resume your previous session.</p>"},{"location":"github.html","title":"Linking Your PE Account to Your GitHub Account","text":""},{"location":"github.html#prerequisites","title":"Prerequisites","text":"<ol> <li>You should already have your SoC Unix account, cluster access, and SoC VPN set up, and be able to <code>ssh</code> into one of the PE hosts.  If you are not able to do this, please look at the guide on programming environments</li> <li>You should feel comfortable running basic UNIX commands.  If you have not gone through the UNIX guide and get your hands dirty, please look at the guide and play with the various basic Unix commands.</li> <li>You should already have a GitHub account and can log into GitHub.com.</li> </ol>"},{"location":"github.html#purpose","title":"Purpose","text":"<p>Your will be using <code>git</code> (indirectly) for retrieving skeleton code and submitting completed assignments.  We will set up your accounts on a PE host below so that <code>git</code> will be associated with your GitHub account.  This is a one-time setup.  You don't have to do this for every assignment.</p>"},{"location":"github.html#1-setting-up-gitconfig","title":"1. Setting up <code>.gitconfig</code>","text":"<p>Create and edit a file called <code>.gitconfig</code> in your home directory on the PE host, with the following content:</p> <pre><code>[user]\n  name = Your Name\n  email = Your Email\n[github]  \n  user = Your GitHub Username\n</code></pre> <p>Your email should be whatever you used to sign up on GitHub (which may not be your SoC or NUS email).</p> <p>For example, a sample <code>.gitconfig</code> looks like this:</p> <pre><code>[user]\n  name = Elsa\n  email = queen@arendelle.gov\n[github]  \n  user = elsasnow16\n</code></pre> <p>After saving this file, run:</p> <pre><code>git config --get github.user\n</code></pre> <p>It should return your GitHub username.</p> <p>It should print your GitHub username as already set.  If there is a typo, you need to edit <code>.gitconfig</code> again and reload it by repeating the command above.</p>"},{"location":"github.html#2-setting-up-password-less-login","title":"2. Setting up Password-less Login","text":""},{"location":"github.html#basic-of-ssh-keys","title":"Basic of SSH Keys","text":"<p>SSH uses public-key cryptography for authentication.  The keys come in pairs: a public key and a private key.  The private key must be kept safe and known only to you.  You should keep the private key in your PE account, and not share it with others.</p> <p>To authenticate yourself to another host or service, you configure the host/service with your public key.  When it is time for you to log in, your private key is \"matched\"1 with your public key.  Since only you know your private key, the service or the host can be sure that you are you and not someone else.</p> <p>Suppose you want to log in from host X to host Y without a password.  You generate a pair of keys on X, then keep the private keys on X and store the public keys on Y.  If you want to set up SSH Keys so that you can log into a PE host from your computer without a password, for example, you generate the pair of keys on your computer (X) and then copy the public key to a PE host.</p> <p>Our goal now is to authenticate ourselves to GitHub from the PE host.  So, X is the PE host, and Y is GitHub.</p>"},{"location":"github.html#generating-ssh-keys","title":"Generating SSH keys","text":"<p>The steps are explained in detail on GitHub Docs.  Here is a summary of the steps that you should follow:</p> <p>On any of the PE hosts, run <pre><code>ssh-keygen -t ed25519 -C \"your_email@example.com\"\n</code></pre> where <code>your_email@example.com</code> is the email your associate with you, when you signed up for your GitHub account (i.e., the same one you entered in <code>.gitconfig</code>).</p> <p>The command will prompt you where to save the key.  Just press Enter to save into the default location, which is <code>$HOME/.ssh/id_ed25519</code>.</p> <p>You will then be prompted for a passphrase.  Since our goal is to automate assignment submission without needing to type anything, you should enter an empty passphrase.  This increases the security risk, but then, we are working with lab assignments, not a top-secret project.  So empty passphrase will do.</p> <p>You should see something like this: <pre><code>ooiwt@pe119:~$ ssh-keygen -t ed25519 -C \"ooiwt@comp.nus.edu.sg\"\nGenerating public/private ed25519 key pair.\nEnter file in which to save the key (/home/o/ooiwt/.ssh/id_ed25519):\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in /home/o/ooiwt/.ssh/id_ed25519.\nYour public key has been saved in /home/o/ooiwt/.ssh/id_ed25519.pub.\nThe key fingerprint is:\nSHA256:Br3wg7mplVuPyuDz8yZVDSh8Mn5ls5+yPZhTvGzmAkk ooiwt@comp.nus.edu.sg\nThe key's randomart image is:\n+--[ED25519 256]--+\n|   .   .         |\n|    = o.=        |\n|   . =oo.=.      |\n|   .E=.=o...     |\n|  ..Bo=ooS. .    |\n| . =o+.++ o      |\n|  + +o = +       |\n|   oo = O        |\n|    .=oB..       |\n+----[SHA256]-----+\n</code></pre></p>"},{"location":"github.html#adding-your-pe-host-public-key-to-your-github-account","title":"Adding Your PE Host Public Key to Your GitHub Account","text":"<p>The next step involves logging into GitHub.com: click on your avatar in the top right corner, and choose \"Settings\".  Then choose \"SSH and GPG keys\" on the sidebar.</p> <p>Then, click either \"New SSH key\" or \"Add SSH key\".  Enter an appropriate title for the key (e.g., \"PE Hosts\").</p> <p>Next, you need to paste your public key into the text box.  Go back to your terminal and run </p> <pre><code>cat ~/.ssh/id_ed25519.pub\n</code></pre> <p>Remember that <code>cat</code> just dumps the content of the file to the standard output.  Now, you need to copy the content of the file displayed on the terminal, which is your public key, and paste it into the text box in the browser.  Your key should start with <code>ssh-ed22519</code> and ends with your email address.  For instance, this is the exact text that I copy-pasted: <pre><code>ssh-ed25519 AAAZC3NzaC1lZDI1NTE8AAAAIDdmwMpRrhRB95u7CTahehtBEeOdhSxDQdlpCxBK3KCP ooiwt@comp.nus.edu.sg\n</code></pre></p> <p>I showed the above as an example, don't use my public key for your GitHub.  Otherwise, I will have access to your account :)</p> <p>After entering the title and key above, click the green \"Add SSH key\" button to add the key you entered.  If prompted, confirm your GitHub password.</p> <p>These steps are explained in detail on GitHub Docs.</p>"},{"location":"github.html#3-checking-your-authentication-settings","title":"3. Checking Your Authentication Settings","text":"<p>To check if you can connect to <code>git@github.com</code> using SSH keys, run: <pre><code>ssh -T git@github.com\n</code></pre></p> <p>If everything is set up correctly, you will see the message <pre><code>Hi ooiwt! You've successfully authenticated, but GitHub does not provide shell access.\n</code></pre></p> <p>Otherwise, you should see <pre><code>git@github.com: Permission denied (publickey).\n</code></pre></p> <p>or other error messages.</p> <p>Note that you need to connect with the username <code>git</code>.  Do not use your GitHub username (e.g., do not use <code>ssh -T ooiwt@github.com</code>)</p> <ol> <li> <p>I skipped many cool details here.  This topic is part of CS2105 and CS2107.  Interested students can google up various articles and videos online about how public-key cryptography is used for authentication.\u00a0\u21a9</p> </li> </ol>"},{"location":"javadoc.html","title":"Javadoc","text":""},{"location":"javadoc.html#why-is-documentation-important","title":"Why is documentation important","text":"<p>One of the goals of CS2030S is to move you away from the mindset that you are writing code that you will discard after it is done (e.g., in CS1101S labs) and you are writing code that no one else will read except you.  CS2030S prepares you to work in software engineering teams in many ways, and one of the ways is to get you to document your code.</p> <p><code>javadoc</code> is a tool used to document Java code.  It automatically generates HTML documentation from the comments in your code.  The Java API that you have seen are generated from <code>javadoc</code>.</p>"},{"location":"javadoc.html#how-to-comment-for-javadoc","title":"How to comment for javadoc","text":"<p><code>javadoc</code> distinguishes between normal comments and comments meant for <code>javadoc</code> by how we \"fence\" the comments.  A <code>javadoc</code> comment always starts with <code>/**</code> (note the double asterisks) and ends with <code>*/</code> and is always placed immediately before a class, an interface, a constructor, a method, or field declaration.</p> <p>Example: <pre><code>/**\n * Encapsulates a circle on a 2D plane.  The operators supported \n * includes (i) checking if a point is contained in the circle,\n * and (ii) moving the circle to a new position.\n */\n</code></pre></p> <p>The first sentence is the summary sentence.  We should follow some style guidelines when writing the summary sentence (see below).</p> <p><code>javadoc</code> comments supports HTML tags.  If you are not familiar with HTML, that is fine.  We will tell you what you need to know below.</p>"},{"location":"javadoc.html#tags","title":"Tags","text":"<p><code>javadoc</code> supports tags.  Here are some tags that we would like you to use:</p> <ul> <li><code>@param &lt;name&gt; &lt;description&gt;</code>: describe the parameter  <li><code>@param &lt;&lt;name&gt;&gt; &lt;description&gt;</code>: describe the type parameter  <li><code>@return &lt;description&gt;</code> describe the return value</li> <li><code>@throws &lt;class name&gt; &lt;description&gt;</code> describe what the exception  being thrown and what are the possible reasons"},{"location":"javadoc.html#style","title":"Style","text":"<ol> <li> <p>If you want to break your comments into paragraphs, insert one blank line between paragraphs.  Start a new paragraph with HTML tag <code>&lt;p&gt;</code> with no space after, and end your paragraph with HTML tag <code>&lt;/p&gt;</code>.</p> </li> <li> <p>You should use the tags <code>@param</code> <code>@return</code> and <code>@throws</code> in that order, and they should never appear without a description.</p> </li> <li> <p>The summary should be short and succinct.  It may not be a complete sentence, but it should still be capitalized and ends with a period.  E.g., <code>/** Encapsulates a circle on 2D plane. .. */</code></p> </li> <li> <p>You don't need to write <code>javadoc</code> for self-explanatory, simple, obvious, methods.  e.g., <code>getX()</code>, unless you want to explain what <code>x</code> means.  </p> </li> </ol>"},{"location":"javadoc.html#how-to-generate-javadoc","title":"How to generate javadoc","text":"<p>In its simplest form, you can generate <code>javadoc</code> like this:</p> <pre><code>javadoc *.java\n</code></pre> <p>This will generate the HTML files in your current directory.  </p> <p>To avoid clutters, I recommend that you specify the output directory, e.g.,</p> <pre><code>javadoc *.java -d docs\n</code></pre> <p>This will generate the documentation and put it under the <code>docs</code> subdirectory.</p> <p><code>javadoc</code> by default generates documents only for public classes, fields, and methods.  To generate documentation for everything, run <pre><code>javadoc *.java -d docs -private\n</code></pre></p> <p>If you generate the documentation on your computer, you can view it by opening up the file <code>index.html</code> in your browser.</p>"},{"location":"javadoc.html#see-also","title":"See Also","text":"<ul> <li>Oracle's <code>javadoc</code> guide</li> </ul>"},{"location":"lab.html","title":"CS2030S Lab Guide","text":""},{"location":"lab.html#github-setup","title":"GitHub Setup","text":"<p>You need a one-time setup at the beginning of semester to link your PE account to your GitHub account.  Following the instructions here to set up your GitHub account for CS2030S.</p>"},{"location":"lab.html#github-classroom","title":"GitHub Classroom","text":"<p>We will use GitHub Classroom for our lab release and submission for CS2030S.</p> <p>Here are what you need to do for every lab assignment:</p>"},{"location":"lab.html#1-accept-the-lab-assignment","title":"1. Accept the Lab Assignment","text":"<p>Make sure that you have logged into GitHub.  </p> <p>If you have multiple GitHub accounts, make sure you use the one with the same GitHub username you have submitted to us.</p> <p>Click on the given URL to accept the lab. </p> <p>A repo will be created automatically for you.</p> <p>WARNING</p> <p>Do not interact with the lab repo directory using GitHub or other <code>git</code> commands.</p>"},{"location":"lab.html#2-read-and-understand-the-lab-question","title":"2. Read and Understand the Lab Question","text":"<p>The lab question will be given in a link on Canvas.</p> <p>Read through the question carefully before starting your lab.</p>"},{"location":"lab.html#3-get-a-copy-on-pe-hosts","title":"3. Get a Copy on PE Hosts","text":"<p>For your first-ever lab, you will need to create a configuration file (see the GitHub Setup guide). After that, proceed as per normal below.</p> <p>Run the command <code>~cs2030s/get-labX</code> (where X is the lab number) to clone a copy of the lab on your home directory.  You will see a new lab directory named something like <code>labX-username</code> created, with the skeleton files and questions inside.</p> <p>You can edit the code, compile, test, etc, on the PE hosts.</p> <p>You can open two files side-by-side with <code>vim -O file1 file2</code> or in different tabs with <code>vim -p file1 file2</code>.</p> <p>WARNING</p> <p>Do not edit your code directly on GitHub.</p>"},{"location":"lab.html#4-submit-a-copy","title":"4. Submit a Copy","text":"<p>When you are ready to submit, run <code>~cs2030s/submit-labX</code> (where X is the lab number).  This will submit a copy to GitHub.  You can submit multiple times, but only the last copy will be graded.</p> <p>WARNING</p> <p>Do not use <code>git push</code> or other <code>git</code> commands to submit your code to GitHub.</p>"},{"location":"lab.html#5-receiving-feedback","title":"5. Receiving Feedback","text":"<p>The tutors will grade and comment on your submission on Github after the deadline.  You should receive both your comments and your preliminary marks on GitHub.  You can reply to their comment, etc, on GitHub as well.  Communicate with your grader via Piazza (or directly if they preferred) if you think the grading is unfair.</p> <p>WARNING</p> <p>Do not change your code on GitHub after the deadline (by either re-running <code>submit-labX</code> or using <code>git</code> commands directly).  If you wish to improve upon your code after feedback from the tutors, replicate it in your own personal repo.</p>"},{"location":"lab.html#6-receiving-final-grades","title":"6. Receiving Final Grades","text":"<p>A file named <code>feedback.md</code> summarizing your marks will be placed into your GitHub repo.  Your marks will be posted on Canvas Gradebook.</p>"},{"location":"lab.html#warning","title":"Warning","text":"<p>If it is not clear to you by now, let us repeat: You should only interact with your lab submissions on GitHub using the provided scripts <code>get-labX</code> and <code>submit-labX</code>.  Failure to do so will break our workflow and will not be appreciated.  We may deduct marks for students who do not follow this instruction.</p> <p>If you accidentally break your repo by running <code>git</code> commands on it or edit it directly on GitHub, you should save a copy of your code elsewhere, then reset your lab directory, by (i) requesting your tutor to delete the repo on GitHub, (ii) deleting the corrupted lab directory on PE nodes, (iii) go through Steps 1 and 2 again, then copy back your edited code into the lab directory.</p>"},{"location":"lab.html#grace-period","title":"Grace Period","text":"<p>You have until Lab 2 to get familiarized with the procedure above.  From Lab 3 onwards, we will not entertain requests or appeals for students who failed to follow the procedure (e.g., forgot to run the <code>submit</code> command, submitted the wrong lab, wrong password).</p>"},{"location":"lab.html#lab-timeline","title":"Lab Timeline","text":"<p>The lab assignment is released before every Thursday at 8 am, with a deadline (usually Tuesday night in the following week) given.  You must submit each lab assignment before the deadline.</p>"},{"location":"lab.html#general-advice","title":"General Advice","text":"<p>You are advised to (i) spend some time thinking before you begin coding, (ii) practice incremental coding, and (iii) test your programs thoroughly.</p> <p>Remember to spend some time thinking about the design and approach to solving each question.</p> <p>Incremental coding means do NOT type in the whole long program in a single session and then compile it. Instead, type your program in bits and pieces and compile it incrementally. Try to maintain a compilable program even while you are working on it. Submitting a compilable program that partially works is better than submitting an un-compilable one; this is especially important for your practical exams.</p> <p>You should test your program thoroughly with your test data before submission.</p> <p>You may assume that all input data are correct unless otherwise stated. Hence, you do NOT need to do input data validation. This is to allow you to focus on getting the program right, instead of worrying about making your program fool-proof.</p>"},{"location":"lab.html#peer-learning","title":"Peer-Learning","text":"<p>We encourage students to discuss and seek help from each other and from the lab tutors if they are stuck.  Piazza is a great forum for that.  However, do note that while students are encouraged to discuss the approach to the solution, students are expected to write their code independently.  Copy-pasting of code or coming up with the code together, line-by-line, is considered plagiarism.</p> <p>All labs are designed to be completed within half a day.  If you get stuck on an issue for longer than that, you should talk to others.</p>"},{"location":"lab.html#late-submission","title":"Late Submission","text":"<p>All lab assignments must be submitted on time.  If you need an extension, please ask for one and provide a justification for approval.  Only academic reasons and compassionate reasons can be considered (e.g., representing NUS for a sports event is OK; Attending a wedding is not.)</p> <p>For late submission, there is a 1% penalty (of the total awarded marks for that particular assignment) for every 5 minutes after the deadline, capped at 80%.  For example, if an assignment is awarded 40 marks, and it is submitted 100 minutes after the deadline, the student will get 32 marks instead (20% penalty).  If it is submitted 10 hours after the deadline, the student will get 8 marks (as it has hit the cap of 80% penalty).</p> <p>Late submission is no longer accepted one week after the deadline.</p>"},{"location":"lab.html#submissions-with-compilation-errors","title":"Submissions with Compilation Errors","text":"<p>Writing code that compiles without any compilation error is the most basic requirement for all our labs and practical assessments.  You will get 0 marks for the corresponding question if your code cannot be compiled.</p>"},{"location":"lab.html#identifying-yourself","title":"Identifying Yourself","text":"<p>In every Java file that you submit, you need to identify yourself by writing your name and lab group. Marks may be deducted if you fail to do so. You need to edit the line:</p> <pre><code>@author XXXX (Group YYYY)\n</code></pre> <p>and change it to something like:</p> <pre><code>@author Gamora (Group 9A)\n</code></pre>"},{"location":"lab.html#method-of-submission","title":"Method of Submission","text":"<p>Please follow the instructions above to submit your homework.  Programs submitted through other means, such as emails, will NOT be accepted.</p>"},{"location":"lab.html#use-of-piazza","title":"Use of Piazza","text":"<p>If you have doubts about the problem statements of an assignment, you may raise them on Piazza.  But before that, please read through the problem statements carefully first, and check if the same questions have been asked and answered on the forum.</p> <p>Please exercise discretion when posting to Piazza.  Before the deadline, you are NOT to post the solution to the assignment, complete or partial, on Piazza (or any publicly accessible online site).</p>"},{"location":"lab.html#disallowed-syntax","title":"Disallowed Syntax","text":"<p>Some lab assignments may explicitly disallow the use of certain syntax.  If the objective of the assignment is undermined due to the use of forbidden syntax, the penalty will be heavy. If in doubt, please ask for clarification on Piazza.</p>"},{"location":"lab.html#plagiarism","title":"Plagiarism","text":"<p>While we encourage discussions among students for programming assignments, each student should be responsible for writing his/her own code and should give credit to others when appropriate.</p> <p>NUS and the School of Computing have a high standard of academic honesty and take any violation seriously. In the context of computing modules, source code plagiarism -- copying code from another source and attributing it as one's own code -- is a serious violation. Please read the page Preventing Plagiarism from the school's website to familiarize yourself with the policy.</p> <p>We adopt a \"no mercy\" policy when it comes to disciplinary action on plagiarism. Both parties, the student who copied, and the student who allowed others to copy, will be penalized equally.</p> <p>This means that you should also guard your solution carefully, not posting them to publicly accessible places, or changing the permissions of the files on the PE hosts so that it is accessible by others.</p> <p>Copying others' programs will only offer a short-term reprieve. When Practical Exam (PE) time comes, your inadequacy will be exposed and the consequence would be dire.</p>"},{"location":"style.html","title":"CS2030/S Java Style Guide","text":""},{"location":"style.html#why-coding-style-is-important","title":"Why Coding Style is Important","text":"<p>One of the goals of CS2030/S is to move you away from the mindset that you are writing code that you will discard after it is done (e.g., in CS1101S missions) and you are writing code that noone else will read except you and your tutor.  CS2030/S prepares you to work in a software engineering teams in many ways, and one of the ways is to enforce a consistent coding style.</p> <p>If everyone on the team follows the same style, the intend of the programmer can become clear (e.g., is this a class or a field?), the code is more readable and less bug prone (e.g., the Apple <code>goto fail</code> bug).  Empirical studies support this:</p> <p>Quote</p> <p>\"It is not merely a matter of aesthetics that programs should be written in a particular style. Rather there is a psychological basis for writing programs in a conventional manner: programmers have strong expectations that other programmers will follow these discourse rules. If the rules are violated, then the utility afforded by the expectations that programmers have built up over time is effectively nullified. The results from the experiments with novice and advanced student programmers and with professional programmers described in this paper provide clear support for these claims.\"</p> <p>Elliot Soloway and Kate Ehrlich. \"Empirical studies of programming knowledge.\" IEEE Transactions on Software Engineering 5 (1984): 595-609.</p> <p>Many major companies enforce coding styles, and some have published them.  For CS2030, we base our (simplified) coding style on Google's Java Coding Style.  You should bookmark the link because you need to come back to it again and again.</p>"},{"location":"style.html#cs2030s-coding-style","title":"CS2030/S Coding Style","text":"<ol> <li> <p>No tabs.</p> <p>Use only whitespace.  </p> <p>For <code>vim</code> users, you can add the following line in your <code>~/.vimrc</code> file: <pre><code>set expandtab\n</code></pre> So that when you press  it is expanded to whitespace. <p>Note: For CS2030S, this option is already included in the <code>~/.vimrc</code> file if you follow the Vim setup guide. In fact, we recommend you follow the Vim setup guide instead and don't manually manage your own version of your <code>~/.vimrc</code> file.</p> <p>Most other source code editors have similar configuration.  </p> <li> <p>Exactly one blank line after import statements and exactly one top-level (i.e., non-nested) class.</p> </li> <li> <p>Each top-level class resides in a source file of its own.</p> </li> <li> <p>When a class has overladed methods (e.g., multiple constructors or methods of the same name), they appear sequentially with no other code in between.</p> </li> <li> <p>Braces are always used (even if the body is empty or contains a single statement}</p> </li> <li> <p>Use \"Egyptian brackets\": </p> <ul> <li>Opening brace have no line break before; but has line break after</li> <li>Closing brace has a line break before; and has a line break after (except when there is <code>else</code> or comma following a closing brace.</li> </ul> <p>Example: <pre><code>   if (x == 0) {\nx++;\n} </code></pre></p> <p>is good.</p> <pre><code>   if (x == 0) { x++; }\nif (x == 0) {\nx++;\n}\nif (x == 0) {\nx++; }\n</code></pre> <p>are not good.</p> </li> <li> <p>Block indentation is exactly two spaces.</p> <pre><code>if (x == 0) { x++;\nfor (i = 0; i &lt; x; i++) {\nx += i;\n}\n}\n</code></pre> <p>For <code>vim</code> users, in <code>~/.vimrc</code>, add the following: <pre><code>set tabstop=2\nset shiftwidth=2\nset autoindent\nset smartindent\n\" For Java: enabling this includes Java-specific indentation settings that handles annotations like @Override\nfiletype plugin indent on\n</code></pre></p> <p>To help you with indentation.</p> <p>Note: For CS2030S, these options are already included in the <code>~/.vimrc</code> file if you follow the Vim setup guide. In fact, we recommend you follow the Vim setup guide instead and don't manually manage your own version of your <code>~/.vimrc</code> file.</p> <p>Most other source code editors have similar configuration.  </p> </li> <li> <p>Each statement is followed by a line break, no matter how short the statement is.</p> <p><pre><code>  x++; i++;\n</code></pre> is bad. <pre><code>  x++; i++;\n</code></pre> is good.</p> </li> <li> <p>Each line is limited to 80 characters in length.  You can break a long line into multiple lines to enhance readability, this is called line wrapping.  When you do so, each continuation line is indented at least 4 spaces from the original line.</p> <pre><code>System.out.println(\"Daenerys of the House Targaryen, the First of Her Name, The Unburnt, Queen of the Andals, the Rhoynar and the First Men, Queen of Meereen, Khaleesi of the Great Grass Sea, Protector of the Realm, Lady Regnant of the Seven Kingdoms, Breaker of Chains and Mother of Dragon\");\n</code></pre> <p>is bad.</p> <pre><code>System.out.println(\"Daenerys of the House Targaryen, the First of\" +\n\" Her Name, The Unburnt, Queen of the Andals, the Rhoynar and the\" +\n\" First Men, Queen of Meereen, Khaleesi of the Great Grass Sea, P\" +\n\"rotector of the Realm, Lady Regnant of the Seven Kingdoms, Break\" +\n\"er of Chains and Mother of Dragon\");\n</code></pre> <p>is also bad.</p> <p><pre><code>System.out.println(\"Daenerys of the House Targaryen,\" + \"the First of Her Name, The Unburnt, Queen of the Andals,\" +\n\"the Rhoynar and the First Men, Queen of Meereen,\" +\n\"Khaleesi of the Great Grass Sea, Protector of the Realm,\" +\n\"Lady Regnant of the Seven Kingdoms, Breaker of Chains and\" +\n\"Mother of Dragon\");\n</code></pre> is ok.</p> </li> <p>80 vs 100</p> <p>While we prefer lines to be limited to 80, we are OK if the length is up to 100.  Any longer, however, will be frowned upon.</p> <ol> <li> <p>There should be a blank line between constructors, methods, nested classes and static initializers.  Blank lines can be used between fields to create logical groupings.</p> </li> <li> <p>White space should separate Java keywords from parenthesis and braces, and be added on both sides of binary operators (<code>+</code>, <code>-</code>, <code>/</code>, etc) as well as <code>:</code> in enhanced for.  Space should also appears before and after <code>//</code> comments</p> <pre><code>if(x==0){ x++;//to make sure x is at least one.\nfor(i=0;i&lt;x;i++){\nx+=i;\n}\n}\n</code></pre> <p>is bad.</p> <pre><code>if (x == 0) { x++; // to make sure x is at least one.\nfor (i = 0; i &lt; x; i++) {\nx += i;\n}\n}\n</code></pre> <p>is good.</p> </li> <li> <p>One variable per declaration.  </p> <pre><code>int x, y;\n</code></pre> <p>bad.</p> <pre><code>int x;\nint y;\n</code></pre> <p>good!</p> </li> <li> <p>No C-style array declaration</p> <pre><code>String args[];\n</code></pre> <p>not good.</p> <pre><code>String[] args;\n</code></pre> <p>good!</p> </li> <li> <p>Switch statement always include a <code>default</code> case.</p> </li> <li> <p>One annotation per line.  Always use <code>@Override</code>.</p> <pre><code>@Override\npublic boolean equals(Object o) {\n:\n}\n</code></pre> </li> <li> <p>Indent comments at the same level as the surrounding code.  For multiple comments, align <code>*</code> with the previous line.</p> <pre><code>/*\n* Not a good style\n*/\n/*\n * Good style\n */\n</code></pre> </li> <li> <p>Class modifier appears in the following order:</p> <pre><code>public protected private abstract default static final transient volatile synchronized native strictfp\n</code></pre> <p>Example: <pre><code>static public void main(String[] args)\n</code></pre> is bad. <pre><code>public static void main(String[] args)\n</code></pre> is good!</p> </li> <li> <p>Class names are writte in UpperCamelCase, method names and field names in lowerCamelCase, constant names in ALL_CAPS_SNAKE_CASE.  Type parameters in single capital letter.</p> </li> <li> <p>Caught exceptions should not be ignored.</p> </li> <li> <p>Static fields and methods must be accessed with class name.</p> </li> </ol>"},{"location":"style.html#using-checkstyle","title":"Using <code>checkstyle</code>","text":"<p>To automatically check for style violation, we use a tool call <code>checkstyle</code>.</p> <p>To run, </p> <pre><code>java -jar ~cs2030s/bin/checkstyle.jar -c ~cs2030s/bin/cs2030_checks.xml *.java \n</code></pre> <p>Hint: put the command into a <code>bash</code> script so that you do not need to type such a long string all the time.</p>"},{"location":"labs/lab0-question.html","title":"Lab 0: Circle and Point","text":"<ul> <li>Deadline: 25 January 2023, Wednesday, 23:59 SST</li> <li>Marks: 0</li> </ul>"},{"location":"labs/lab0-question.html#prerequisite","title":"Prerequisite:","text":"<ul> <li>Familiar with the CS2030S lab guidelines</li> <li>Able to access the CS2030S programming environment via ssh</li> <li>Completed basic <code>vim</code> lessons</li> </ul>"},{"location":"labs/lab0-question.html#estimating-pi-using-monte-carlo-method","title":"Estimating Pi using Monte Carlo Method","text":"<p>The Monte Carlo method for estimating the value of \\(\\pi\\) is as follows.  We have a square of width \\(2r\\), and within it, a circle with a radius of \\(r\\).</p> <p>We randomly generate \\(k\\) points within the square.  We count how many points fall within the circle.  Suppose \\(n\\) points out of \\(k\\) fall within the circle.</p> <p>Since the area of the square is \\(4r^2\\) and the area of the circle is \\(\\pi r^2\\), the ratio between them is \\(\\pi/4\\).  The ratio \\(n/k\\) should therefore be \\(\\pi/4\\), and \\(\\pi\\) can be estimated as \\(4n/k\\).</p>"},{"location":"labs/lab0-question.html#background-random-number-generator","title":"Background: Random Number Generator","text":"<p>To estimate pi using the method above, we need to use a random number generation.  A random number generator is an entity that spews up one random number after another.  We, however, cannot generate a truly random number algorithmically.  We can only generate a pseudo-random number.  A pseudo-random number generator can be initialized with a seed.  A pseudo-random number generator, when initialized with the same seed, always produces the same sequence of (seemingly random) numbers.</p> <p>Java provides a class <code>java.util.Random</code> that encapsulates a pseudo-random number generator. We can create a random number generator with a seed:</p> <pre><code>Random rng = new Random(1);\n</code></pre> <p>We can then call <code>rng.nextDouble()</code> repeatedly to generate random numbers between 0 and 1.</p> <p>Using a fixed seed is important for testing since the execution of the program will be deterministic, even when random numbers are involved.</p>"},{"location":"labs/lab0-question.html#files-provided","title":"Files Provided","text":"<p>In this directory, you should see the following files:</p> <ul> <li> <p>Skeleton Java files: <code>Point.java</code>, <code>RandomPoint.java</code>, <code>Circle.java</code>, <code>Lab0.java</code></p> </li> <li> <p>Inputs and outputs for <code>Lab0</code>: <code>inputs/Lab0.k.in</code> and <code>outputs/Lab0.k.out</code> for different values of k.</p> </li> <li> <p>Bash script: <code>test.sh</code> for testing <code>Lab0</code> if it estimates pi correctly, by comparing the output when running <code>Lab0</code> on <code>inputs/Lab0.k.in</code> to the expected output in <code>outputs/Lab0.k.out</code></p> </li> <li> <p>Unit tests for Java classes: <code>Test1.java</code> to <code>Test3.java</code>. These files test individual classes to check if they have the expected behavior.</p> </li> </ul>"},{"location":"labs/lab0-question.html#your-task","title":"Your Task","text":"<p>A skeleton code has been given.  Your task is to complete the implementation of the classes <code>Point</code>, <code>RandomPoint</code>, <code>Circle</code>, and <code>Lab0</code>, according to the OO principles that were taught: abstraction, encapsulation, information hiding, inheritance, tell-don't-ask.</p>"},{"location":"labs/lab0-question.html#the-point-class","title":"The <code>Point</code> class","text":"<p>Fill in the class <code>Point</code> with the constructor and the necessary fields.  Add a <code>toString</code> method so that a string representation as shown in the examples below is returned.</p> <p>For instance,  <pre><code>new Point(0, 0).toString();\n</code></pre></p> <p>should return the string: <pre><code>(0.0, 0.0)\n</code></pre></p> <p>You will need to come back to this class and add other methods later.  For now, check that your constructor and <code>toString</code> methods are correct.</p> <p>Some simple tests are provided in the file <code>Test1.java</code>. Note that these test cases are not exhaustive and you are encouraged to test your <code>Point</code> class on your own.  Proceed to the next class if you are convinced your <code>Point</code> class is correct.</p> <pre><code>user@pe111:~/lab0-github-username$ javac Test1.java\nuser@pe111:~/lab0-github-username$ java Test1\nPoint: new at (0, 0).. ok\nPoint: new at (-3.14, 1.59).. ok\n</code></pre> <p>As an aside, note that we do not need to explicitly compile <code>Point.java</code>.  Since <code>Test1.java</code> refers to the <code>Point</code> class, <code>javac</code> is smart enough to compile <code>Point.java</code> if <code>Point.class</code> is not found, or recompile <code>Point.java</code> if it is newer than <code>Point.class</code>.</p>"},{"location":"labs/lab0-question.html#the-circle-class","title":"The <code>Circle</code> class","text":"<p>Most of the <code>Circle</code> class has been written for you.  You need to complete the method <code>contains</code>.  The method checks if a given point is contained in the calling <code>Circle</code> object. To complete this method according to the tell-don't-ask principle, you will need to add a method in the <code>Point</code> class.</p> <p>Some simple tests are provided in the file <code>Test2.java</code>.  These test cases are not exhaustive and you are encouraged to test your <code>Circle</code> class extensively.</p> <pre><code>user@pe111:~/lab0-github-username$ javac Test2.java\nuser@pe111:~/lab0-github-username$ java Test2\nCircle: new at (0, 0) with radius 4).. ok\nCircle centered at (0, 0) with radius 4 contains (0, 0).. ok\nCircle centered at (0, 0) with radius 4 does not contain (4, 3).. ok\nCircle centered at (0, 0) with radius 4 does not contain (3, 4).. ok\nCircle centered at (2, -3) with radius 0.5 contains (1.8, -3.1).. ok\nCircle centered at (2, -3) with radius 0.5 does not contain (1.8, -4).. ok\n</code></pre>"},{"location":"labs/lab0-question.html#the-randompoint-class","title":"The <code>RandomPoint</code> class","text":"<p><code>RandomPoint</code> is a subclass of <code>Point</code> that represents a randomly generated point.  The random number generator that generates a random point has a default seed of 1.  There is a public method <code>setSeed()</code> that we can use to update the seed. Here is how it can be used:</p> <p>To generate a new point, <pre><code>Point p = new RandomPoint(minX, maxX, minY, maxY); \n</code></pre></p> <p><code>minX</code>, <code>minY</code>, <code>maxX</code>, <code>maxY</code> represent the minimum and maximum possible x and y values respectively, for each randomly generated point.</p> <p>To set the random seed, <pre><code>RandomPoint.setSeed(10);\n</code></pre></p> <p>Tip: What are the fields and methods that should be associated with the class <code>RandomPoint</code> instead of an instance of <code>RandomPoint</code>?</p> <p>Some simple tests are provided in the file <code>Test3.java</code>.  These test cases are not exhaustive and you are encouraged to test your <code>RandomPoint</code> class extensively.</p> <pre><code>user@pe111:~/lab0-github-username$ javac Test3.java\nuser@pe111:~/lab0-github-username$ java Test3\nRandomPoint: is a subtype of Point.. ok\nRandomPoint: generate a new point with default seed.. ok\nRandomPoint: generate a new point with seed 10.. ok\nRandomPoint: generate a new point with the same seed.. ok\nRandomPoint: reset seed to 10 and generate a new point.. ok\n</code></pre>"},{"location":"labs/lab0-question.html#lab0","title":"Lab0","text":"<p><code>Lab0</code> is the main program to solve the problem above.  The <code>main</code> method is provided.  It includes the method to read in the number of points and the seed from the standard input and to print the estimated pi value.</p> <p>The method <code>estimatePi</code> is incomplete.  Determine how you should declare <code>estimatePi</code>, then complete the body by generating random points and count how many fall under the given circle.</p> <p>Use a circle centered at (0.5,0.5) with radius 0.5 for this purpose. Use <code>long</code> and <code>double</code> within <code>estimatePi</code> for computation to ensure that you have the right precision.</p> <p>Tip: In Java, using <code>/</code> on two integers result in an integer division.  Make sure one of the operand of <code>/</code> is a floating point number if you intend to use <code>/</code> for floating point division.</p> <p>To run <code>Lab0</code> and enter the input manually, run <pre><code>java Lab0\n</code></pre></p> <p>The program will pause, waiting for inputs from keyboards.Enter two numbers. The first is the number of points. The second is the seed.</p> <p>You can enter the two numbers into a text file, say, <code>TEST</code>, and then run <pre><code>java Lab0 &lt; TEST\n</code></pre></p> <p>Sample inputs and outputs have been provided and can be found under the <code>inputs</code> and <code>outputs</code> directory.</p> <p>To test your implementation of <code>Lab0</code>, automatically against the test data given in <code>inputs</code> and <code>outputs</code>, <pre><code>./test.sh Lab0\n</code></pre></p>"},{"location":"labs/lab1-question.html","title":"Lab 1: Simulation I","text":"<ul> <li>Deadline: 31 January 2023, Tuesday, 23:59 SST</li> <li>Marks: 15</li> <li>Weightage: 3%</li> </ul>"},{"location":"labs/lab1-question.html#prerequisite","title":"Prerequisite:","text":"<ul> <li>Completed Lab 0</li> <li>Caught up to Unit 18 of Lecture Notes</li> </ul>"},{"location":"labs/lab1-question.html#goal","title":"Goal","text":"<p>The goal of Lab 1 is for you to practice the basic OOP principles: encapsulation (including tell-don't-ask and information hiding), abstraction, inheritance, and polymorphism.</p> <p>You are given six classes: five Java classes and one main <code>Lab1</code> class.  Two of them are poorly written without applying any of the OOP principles.  Using the OO principles that you have learned, you should rewrite, remove, or add new classes as needed.</p>"},{"location":"labs/lab1-question.html#background-discrete-event-simulator","title":"Background: Discrete Event Simulator","text":"<p>A discrete event simulator is a software that simulates a system (often modeled after the real world) with events and states. An event occurs at a particular time and each event alters the states of the system and may generate more events. A discrete event simulator can be used to study many complex real-world systems. The term discrete refers to the fact that the states remain unchanged between two events, and therefore, the simulator can jump from the time of one event to another, instead of following the clock in real time.</p> <p>In Lab 1, we provide you with three very generic classes: <code>Simulator</code>, which implements a discrete event simulator, <code>Event</code>, which encapsulates an event (with a time), and <code>Simulation</code>, which encapsulates the states we are simulating.  The <code>Event</code> and <code>Simulation</code> class can be extended to implement any actual simulation (network, road traffic, weather, pandemic, etc).  More details of these classes can be found below.</p>"},{"location":"labs/lab1-question.html#simulating-a-bank","title":"Simulating a Bank","text":"<p>In Lab 1, we wish to simulate a Bank.  A Bank can have one or more bank counters or Tellers.</p> <p>In the beginning, all bank counters are available.  A counter becomes unavailable when it is serving a customer, and becomes available again after servicing a customer.</p> <p>A customer, upon arrival at the bank, goes to the first available counter.  If no counter is available, the customer departs (this is a very small bank and therefore there is no space to wait). Otherwise, the customer is served, and after being served for a given amount of time (called service time), the customer departs.</p> <p>Two classes, <code>BankSimulation</code> (a subclass of Simulation) and <code>BankEvent</code> (a subclass of Event) are provided.  The two classes implement the simulation above.</p>"},{"location":"labs/lab1-question.html#the-event-class","title":"The <code>Event</code> class","text":"<p>You should not edit this class.  The following is for your info only.</p> <p>The <code>Event</code> class is an abstract class with a single field <code>time</code>, which indicates the time the event occurs.  The <code>Event::toString</code> method returns the time as a string and the <code>Event::getTime</code> method returns the time.</p> <p>The most important thing to know about the <code>Event</code> class is that it has an abstract method <code>simulate</code> that needs to be overridden by its subclass to concretely define the action to be taken when this event occurs.</p> <p>Simulating an event can lead to more events being created. <code>Event::simulate</code> returns an array of <code>Event</code> instances.</p>"},{"location":"labs/lab1-question.html#the-simulation-class","title":"The <code>Simulation</code> class","text":"<p>You should not edit this class.  The following is for your info only.</p> <p>The <code>Simulation</code> class is an abstract class with a single method <code>getInitialEvents</code>, which returns an array of events to simulate.  Each of these events may generate more events.</p>"},{"location":"labs/lab1-question.html#the-simulator-class","title":"The <code>Simulator</code> class","text":"<p>You should not edit this class.  The following is for your info only.</p> <p>The <code>Simulator</code> class is a class with only two methods and it is what drives the simulation.  To run the simulator, we initialize it with a <code>Simulation</code> instance, and then call <code>run</code>:</p> <pre><code>Simulation sim = new SomeSimulation(); \nnew Simulator(sim).run(); \n</code></pre> <p>The <code>Simulation::run</code> method simply does the following:</p> <ul> <li>It gets the list of initial <code>Event</code> objects from the <code>Simulation</code> object;</li> <li>It then simulates the pool of events, one-by-one in the order of increasing time, by calling <code>Event::simulate</code>;</li> <li>If simulating an event resulted in one or more new events, the new events are added to the pool.</li> <li>Before each event is simulated, <code>Event::toString</code> is called and a message is printed</li> <li>The simulation stops running if there are no more events to simulate.</li> </ul> <p>For those of you taking CS2040S, you might be interested to know that the <code>Simulator</code> class uses a priority queue to keep track of the events with their time as the key.</p>"},{"location":"labs/lab1-question.html#the-banksimulation-class","title":"The <code>BankSimulation</code> class","text":"<p>You are expected to edit this class and create new classes.</p> <p>The <code>BankSimulation</code> class is a concrete implementation of a <code>Simulation</code>.  This class is responsible for:</p> <ul> <li> <p>reading the inputs from the standard inputs,</p> </li> <li> <p>initialize the bank counters (represented with boolean <code>available</code> arrays)</p> </li> <li> <p>initialize the events corresponding to customer arrivals</p> </li> <li> <p>return the list of customer arrival events to the <code>Simulator</code> object when <code>getInitialEvent</code> is called.</p> </li> </ul> <p>Each customer has an id.  The first customer has id \\(0\\), the next one is \\(1\\), and so on.</p> <p>Each counter has an id, numbered from \\(0\\), \\(1\\), \\(2\\), onwards.</p>"},{"location":"labs/lab1-question.html#the-bankevent-class","title":"The <code>BankEvent</code> class","text":"<p>You are expected to replace this class with new classes.</p> <p>The <code>BankEvent</code> class is a concrete implementation of <code>Event</code>.  This class overrides the <code>simulate</code> method to simulate the customer and counter behavior.</p> <p>A <code>BankEvent</code> instance can be tagged as either an arrival event, service-begin event, service-end event, or departure event.</p> <ul> <li> <p>Arrival: the customer arrives.  It finds the first available bank counter (scanning from id \\(0\\) upwards) and go to the counter for service immediately.  A service-begin event is generated.  If no counter is available, it departs.  A departure event is generated.</p> </li> <li> <p>Service-begin: the customer is being served.  A service-end event scheduled at the time (current time + service time) is generated.</p> </li> <li> <p>Service-end: the customer is done being served and departs immediately.  A departure event is generated.</p> </li> <li> <p>Departure: the customer departs.</p> </li> </ul>"},{"location":"labs/lab1-question.html#inputs-and-outputs","title":"Inputs and Outputs","text":"<p>The main program <code>Lab1.java</code> reads the following, from the standard inputs.</p> <ul> <li> <p>An integer \\(n\\), indicating the number of customers to simulate.</p> </li> <li> <p>An integer \\(k\\), indicating the number of bank counters the Bank has.</p> </li> <li> <p>\\(n\\) pairs of double values, each pair corresponds to a customer. The first value indicates the arrival time, the second indicates the service time for the customer.</p> </li> </ul> <p>The customers are sorted in increasing order of arrival time.  </p>"},{"location":"labs/lab1-question.html#assumptions","title":"Assumptions","text":"<p>We assume that no two events with the same time will ever be in the collection of events and no customer will arrive exactly at the same time as another customer is leaving. As per all labs, we assume that the input is correctly formatted.</p>"},{"location":"labs/lab1-question.html#your-task","title":"Your Task","text":"<p>The two classes, <code>BankSimulation</code> and <code>BankEvent</code>, are poorly written.  They do not fully exploit OOP features and apply the OO principles such as abstraction, encapsulation (including information hiding and tell-don't-ask), composition, inheritance, polymorphism, and LSP.</p> <p>Rewrite these two classes (adding new ones as needed) with the OOP principles that you have learned:</p> <ul> <li> <p>encapsulation to group relevant fields and methods into new classes</p> </li> <li> <p>inheritance and composition to model the relationship between the classes</p> </li> <li> <p>information hiding to hide internal details</p> </li> <li> <p>using polymorphism to make the code more succinct and extendable in the future, while adhering to LSP</p> </li> </ul> <p>Here are some hints:</p> <ul> <li> <p>Think about the problem that you are solving: what are the nouns? These are good candidates for new classes.</p> </li> <li> <p>For each class, what are the attributes/properties relevant to the class? These are good candidates for fields in the class.</p> </li> <li> <p>Do the classes relate to each other via IS-A or HAS-A relationship?</p> </li> <li> <p>For each class, what are their responsibilities? What can they do? These are good candidates for methods in the class.</p> </li> <li> <p>How do the objects of each class interact? These are good candidates for public methods.</p> </li> <li> <p>What are some behavior that changes depending on the specific type of objects?</p> </li> </ul> <p>Note that the goal of this lab and, and of CS2030S in general, is NOT to solve the problem with the cleverest and the shortest piece of code possible. For instance, you might notice that you can solve Lab 1 with only a few variables and an array.  But such a solution is hard to extend and modify. In CS2030S, our goal is to produce software that can easily evolve and be modified, with a reduced risk of introducing bugs while doing so.</p> <p>Note that Lab 1 is the first of a series of labs, where we introduce new requirements or modify existing ones in every lab (not unlike what software engineers face in the real world). We will modify the behavior for the bank, the counters, and the customers.  In particular, in the future,</p> <ul> <li>a customer may have different reasons to go to the bank, for example to deposit money.</li> <li>there may be different counters that only allow a customer to do a specific task, such as deposit, withdrawl, or open an account for example.</li> <li>counters may open and close at different times.</li> <li>the bank might expand and be able to handle more customers and more counters.</li> </ul> <p>Thus, making sure that your code will be able to adapt to new problem statements is the key. Trying to solve the lab without considering this and you will likely find yourself painted into a corner and have to re-write much of your solution to handle any new requirements.</p>"},{"location":"labs/lab2-question.html","title":"Lab 2: Simulation 2","text":"<ul> <li>Deadline: 7 February 2023, Tuesday, 23:59 SST</li> <li>Marks: 12</li> <li>Weightage: 3%</li> </ul>"},{"location":"labs/lab2-question.html#prerequisite","title":"Prerequisite:","text":"<ul> <li>Completed Lab 1</li> <li>Caught up to Unit 19 of Lecture Notes</li> <li>Familiar with CS2030S Java style guide</li> <li>Revised the CS2030S Lab guide</li> </ul> <p>Reminder: Only use the submit and get scripts. Do not use any git commands.</p>"},{"location":"labs/lab2-question.html#goal","title":"Goal","text":"<p>This is a continuation of Lab 1.  Lab 2 changes some of the requirements of Lab 1 and adds some new things to the world that we are simulating.  The goal is to demonstrate that, when OO-principles are applied properly, we can adapt our code to changes in the requirement with less effort.</p> <p>Lab 2 also nudges you towards following good coding practice by adhering to a published coding convention.</p>"},{"location":"labs/lab2-question.html#simulating-a-bank-with-a-queue","title":"Simulating a Bank with a Queue","text":"<p>Recall that, no waiting was allowed inside the bank we are simulating.  The bank is losing customers as a customer departs if all the counters are busy.</p> <p>Lab 2 adds an entrance queue to the bank.  If all counters are busy when a customer arrives, the customer will join the queue and wait.  When a counter becomes available, the customer at the front of the queue will proceed to the counter for service.</p> <p>The entrance queue has a maximum queue length of \\(m\\).  If there are already \\(m\\) customers waiting in the entrance queue, any arriving customer will be turned away.</p>"},{"location":"labs/lab2-question.html#building-on-lab-1","title":"Building on Lab 1","text":"<p>You are required to build on top of your Lab 1 submission for this lab.</p> <p>Assuming you have <code>lab1-&lt;username&gt;</code> and <code>lab2-&lt;username&gt;</code> under the same directory, and <code>lab2-&lt;username&gt;</code> is your current working directory, you can run <pre><code>cp -i ../lab1-&lt;username&gt;/*.java .\nrm -i Lab1.java\n</code></pre></p> <p>to copy all your Java code over.</p> <p>If you are still unfamiliar with Unix commands to navigate the file system and processing files, please review our Unix guide.</p> <p>You are encouraged to consider your tutor's feedback and fix any issues with your design for your Lab 1 submission before you embark on your Lab 2.</p>"},{"location":"labs/lab2-question.html#skeleton-for-lab-2","title":"Skeleton for Lab 2","text":"<p>We only provide two classes for Lab 2, the main <code>Lab2.java</code> (which is simply <code>Lab1.java</code> renamed) and <code>Queue.java</code>.</p> <p>Both files should not be modified for this lab.</p>"},{"location":"labs/lab2-question.html#the-queue-class","title":"The <code>Queue</code> class","text":"<p><code>Queue</code> is a general class for a first-in, first-out queue of objects.  Here is an example of how it is used:</p> <pre><code>// Create a queue that holds up to 4 elements\nQueue q = new Queue(4);\n\n// Add a string into the queue.  returns true if successful; \n// false otherwise.\nboolean b = q.enq(\"a1\");\n\n// Remove a string from the queue.  `Queue::deq` returns an \n// `Object`, so narrowing type conversion is needed.  Returns \n// `null` is queue is empty.\nString s = (String) q.deq();\n\n// Returns the string representation of the queue (showing \n// each element)\nString s = q.toString();\n\n// Returns true if the queue is full, false otherwise.\nboolean b = q.isFull();\n\n// Returns true if the queue is empty, false otherwise.\nboolean b = q.isEmpty();\n\n// Returns the number of objects in the queue\nint l = q.length();\n</code></pre>"},{"location":"labs/lab2-question.html#other-changes-needed","title":"Other Changes Needed","text":"<p>In addition to adding an entrance queue to the bank, we need to make the following changes to the input and output of the program.</p> <ol> <li> <p>There is an additional input parameter in the first line of the input file, an integer \\(m\\), indicating the maximum allowed length of the entrance queue. This input parameter should be read immediately after reading the number of customers and the number of service counters.</p> </li> <li> <p>Customers now come to the bank with a task they intend to do, either to <code>deposit</code> or <code>withdrawal</code>. As such, there is an additional input parameter for each customer arrival, an <code>int</code> which is either \\(0\\) for deposit or \\(1\\) for withdrawal.</p> </li> <li> <p>A customer will now be printed with a single letter prefix <code>C</code>.  For instance, instead of <code>Customer 1</code>, we print <code>C1</code>.</p> </li> <li> <p>A service counter will now be printed with a single letter prefix <code>S</code>.  For instance, instead of <code>Counter 1</code>, we print <code>S1</code>.</p> </li> <li> <p>The entrance queue of the bank will be printed with the arrival event. E.g., the following shows that C3 arrived at time 1.400 and at the time of arrival, there are two customers, C1 and C2, waiting in the entrance queue. <pre><code>1.400: C3 arrived [ C1 C2 ]\n</code></pre></p> </li> <li> <p>If a customer joins the entrance queue, the customer along with the queue before joining should be printed. E.g., <pre><code>1.400: C3 joined queue [ C1 C2 ]\n</code></pre></p> </li> <li> <p>When a customer begins being served or is done being served, the task the customer is doing should be printed. For example, Customer <code>C2</code> withdrawing at bank counter <code>S1</code> would be printed as: <pre><code>5.100: C2 Withdrawal begin (by S0)\n7.100: C2 Withdrawal done (by S0)\n</code></pre></p> </li> </ol> <p>Note: we are not going to implement the withdrawal and deposit logic in our bank simulator yet.</p>"},{"location":"labs/lab2-question.html#following-cs2030s-style-guide","title":"Following CS2030S Style Guide","text":"<p>In addition to the changes above, you should also make sure that your code follows the given Java style guide</p>"},{"location":"labs/lab2-question.html#assumptions","title":"Assumptions","text":"<p>We assume that no two events involving two different customers ever occur at the same time (except when a customer departs and another customer begins its service). As per all labs, we assume that the input is correctly formatted.</p>"},{"location":"labs/lab2-question.html#your-task","title":"Your Task","text":"<p>Your task for this lab is to (i) improve upon your design for Lab 1 if needed, (ii) update <code>BankSimulation</code> and associated classes to simulate the entrance queue, (iii) update the input and output components of the classes to conform to the specification above.</p> <p>If the design for Lab 1 follows the OOP principles, then only about 50 lines of changes/additions are required.</p>"},{"location":"labs/lab2-question.html#compiling-testing-and-debugging","title":"Compiling, Testing, and Debugging","text":""},{"location":"labs/lab2-question.html#compilation","title":"Compilation","text":"<p>To compile your code, <pre><code>javac *.java\n</code></pre></p>"},{"location":"labs/lab2-question.html#running-and-testing","title":"Running and Testing","text":"<p>You should not test your code by manually entering the inputs.  Instead, enter the inputs into a file, and run <pre><code>java Lab2 &lt; file\n</code></pre></p> <p>A set of test inputs is provided as part of the skeleton, named <code>Lab2.x.in</code> under the <code>inputs</code> directory.  You can run them with, for instance, <pre><code>java Lab2 &lt; inputs/Lab2.1.in\n</code></pre></p> <p>You can save the output by redirecting it into a file. <pre><code>java Lab2 &lt; inputs/Lab2.1.in &gt; OUT\n</code></pre></p> <p>You can automatically test your code against all the given inputs/outputs as well as against the <code>checkstyle</code> by running: <pre><code>./test.sh Lab2\n</code></pre></p>"},{"location":"labs/lab2-question.html#debugging","title":"Debugging","text":"<p>The expected outputs are given in the <code>outputs</code> directory. You can compare <code>OUT</code> with the expected output with <code>diff</code> or <code>vim</code>.  Using <code>vim</code>, <pre><code>vim -d OUT output/Lab2.1.out\n</code></pre></p> <p>will open both files and highlight the differences.</p> <p>As the output becomes too long, you can focus on tracing a particular counter or customer with the help of <code>grep</code>. Suppose you want to focus on what happened to Customer 1 in <code>OUT</code>, run <pre><code>$ grep \": C1\" OUT\n1.200: C1 arrived [ ]\n1.200: C1 service begin (by S1)\n2.200: C1 service done (by S1)\n2.200: C1 departed\n</code></pre></p> <p>Suppose you want to see all the customers served by <code>S1</code>, run: <pre><code>$ grep \"S1\" OUT\n1.200: C1 service begin (by S1)\n2.200: C1 service done (by S1)\n2.200: C4 service begin (by S1)\n3.200: C4 service done (by S1)\n</code></pre></p>"},{"location":"labs/lab2-question.html#grading","title":"Grading","text":"<p>This lab is worth 12 marks and contributes 3% to your final grade.  The marking scheme is as follows:</p> <ul> <li>Style: 2 marks</li> <li>Correctness: 2 marks</li> <li>OO Principles: 8 marks</li> </ul> <p>We may make additional deductions for other issues or errors in your code, such as compilation errors, bad practices, failure to follow instructions, etc.</p>"},{"location":"labs/lab3-question.html","title":"Lab 3: Simulation 3","text":"<ul> <li>Deadline: 14 February 2023, Tuesday, 23:59 SST</li> <li>Marks: 16</li> <li>Weightage: 4%</li> </ul>"},{"location":"labs/lab3-question.html#prerequisite","title":"Prerequisite:","text":"<ul> <li>Completed Lab 2</li> <li>Caught up to Unit 25 of Lecture Notes</li> <li>Familiar with CS2030S Java style guide</li> </ul>"},{"location":"labs/lab3-question.html#goal","title":"Goal","text":"<p>This is a continuation of Lab 2.  Lab 3 changes some of the requirements of Lab 2 and adds some new things to the world that we are simulating.  The goal is to demonstrate that, when OO-principles are applied properly, we can adapt our code to changes in the requirements with less effort.</p> <p>Lab 3 also involves writing your own generic classes.</p>"},{"location":"labs/lab3-question.html#queueing-at-the-counters","title":"Queueing at The Counters","text":"<p>The Bank has now decided to streamline its operations and rearrange the layout and make some space for queues at the counters. With that, customers can now wait at individual counters. Customers can also now come to the bank to open a bank account, as well as withdraw or deposit money.</p> <p>In this lab, we will modify the simulation to add a counter queue to each counter.  If all the counters are busy when a customer arrives, the customer will join a queue and wait. When a counter becomes available, the customer at the front of the queue will proceed to the counter for service.  Each counter queue has a maximum queue length of \\(L\\).  If every counter queue has reached its maximum capacity of \\(L\\), then an arriving customer has to wait at the entrance queue.</p> <p>Just like Lab 2, the entrance queue has a maximum queue length of \\(m\\).  If there are already \\(m\\) customers waiting in the entrance queue, an arriving customer will be turned away.</p> <p>With the addition of counters, there is a change to the customer behavior in choosing which counter to join:</p> <ul> <li> <p>If more than one counter is available, a customer will go to the counter with the smallest id (just like Lab 2) </p> </li> <li> <p>If none of the counters is available, then the customer will join the counter with the shortest queue.  If there are two counters with the same queue length, we break ties with their id.</p> </li> </ul> <p>Note that, when a counter is done serving a customer, one customer from the entrance queue may join the counter queue of that counter.</p>"},{"location":"labs/lab3-question.html#building-on-lab-2","title":"Building on Lab 2","text":"<p>You are required to build on top of your Lab 2 submission for this lab.</p> <p>Assuming you have <code>lab2-&lt;username&gt;</code> and <code>lab3-&lt;username&gt;</code> under the same directory, and <code>lab3-&lt;username&gt;</code> is your current working directory, you can run <pre><code>cp -i ../lab2-&lt;username&gt;/*.java .\nrm -i Lab2.java\n</code></pre></p> <p>to copy all your Java code over.</p> <p>If you are still unfamiliar with Unix commands to navigate the file system and processing files, please review our Unix guide.</p> <p>You are encouraged to consider your tutor's feedback and fix any issues with your design for your Lab 2 submission before you embark on your Lab 3.</p>"},{"location":"labs/lab3-question.html#skeleton-for-lab-3","title":"Skeleton for Lab 3","text":"<p>We provide five files for Lab 3:</p> <ul> <li>the main <code>Lab3.java</code> (which is simply <code>Lab2.java</code> renamed)</li> <li><code>QueueTest.java</code> to test your <code>Queue&lt;T&gt;</code> class, </li> <li><code>ArrayTest.java</code> to test your <code>Array&lt;T&gt;</code> class,</li> <li><code>CS2030STest.java</code>, which is the CS2030S test library, and</li> <li><code>Array.java</code>, which is the skeleton file for <code>Array&lt;T&gt;</code>.</li> </ul> <p>Except for <code>Array.java</code>, these files should not be modified for this lab.</p>"},{"location":"labs/lab3-question.html#your-tasks","title":"Your Tasks","text":"<p>We suggest you solve this lab in the following order.</p>"},{"location":"labs/lab3-question.html#1-make-queue-a-generic-class","title":"1. Make <code>Queue</code> a generic class","text":"<p>The class <code>Queue</code> given to you in Lab 2 stores its elements as <code>Object</code> references, and therefore is not type-safe.  Now that you have learned about generics, you should update <code>Queue</code> to make it a generic class <code>Queue&lt;T&gt;</code>.</p> <p>You are encouraged to test your <code>Queue&lt;T&gt;</code> in <code>jshell</code> yourself.  A sample test sequence can be found under <code>outputs/QueueTest.out</code>.</p> <p>The file <code>QueueTest.java</code> helps to test your <code>Queue&lt;T&gt;</code> class (see \"Running and Testing\" section below).</p> <pre><code>javac -Xlint:rawtypes QueueTest.java\njava QueueTest\n</code></pre>"},{"location":"labs/lab3-question.html#2-create-a-generic-arrayt-class","title":"2. Create a generic <code>Array&lt;T&gt;</code> class","text":"<p>Let's call the class that encapsulates the counter <code>BankCounter</code> (you may name it differently).  We have been using an array to store the <code>BankCounter</code> objects. In Lab 3, you should replace that with a generic wrapper around an array.  In other words, we want to replace <code>BankCounter[]</code> with <code>Array&lt;BankCounter&gt;</code>.  You may build upon the <code>Array&lt;T&gt;</code> class from the notes -- Unit 25.</p> <p>The <code>Array&lt;T&gt;</code> class you build must support the following:</p> <ul> <li> <p><code>Array&lt;T&gt;</code> takes in only a subtype of <code>Comparable&lt;T&gt;</code> as its type argument.  That is, we want to parameterize <code>Array&lt;T&gt;</code> with only a <code>T</code> that can compare with itself. Note that in implementing <code>Array&lt;T&gt;</code>, you will find another situation where using raw type is necessary.  You may, for this case, use <code>@SuppressWarnings(\"rawtypes\")</code> at the smallest scope possible to suppress the warning about raw types.</p> </li> <li> <p><code>Array&lt;T&gt;</code> must support the <code>min</code> method, with the following descriptor: <pre><code>    T min()\n</code></pre></p> </li> </ul> <p><code>min</code> returns the minimum element (based on the order defined by the <code>compareTo</code> method of the <code>Comparable&lt;T&gt;</code> interface).</p> <ul> <li><code>Array&lt;T&gt;</code> supports a <code>toString</code> method.  The code has been given to you in <code>Array.java</code>.</li> </ul> <p>You are encouraged to test your <code>Array&lt;T&gt;</code> in <code>jshell</code> yourself. A sample test sequence can be found under <code>outputs/ArrayTest.out</code>.</p> <p>The file <code>ArrayTest.java</code> helps to test your <code>Array&lt;T&gt;</code> class (see \"Running and Testing\" section below).</p> <pre><code>javac -Xlint:rawtypes ArrayTest.java\njava ArrayTest\n</code></pre>"},{"location":"labs/lab3-question.html#3-make-your-bankcounter-comparable-to-itself","title":"3. Make Your <code>BankCounter</code> Comparable to Itself","text":"<p>Your class that encapsulates the bank counter must now implement the <code>Comparable&lt;T&gt;</code> interface so that it can compare with itself and it can be used as a type argument for <code>Array&lt;T&gt;</code>.</p> <p>You should implement <code>compareTo</code> in such a way that <code>counters.min()</code> returns the counter that a customer should join (unless all the counter queues have reached maximum length).</p>"},{"location":"labs/lab3-question.html#4-update-your-simulation","title":"4. Update Your Simulation","text":"<p>By incorporating <code>Queue&lt;T&gt;</code>, <code>Array&lt;T&gt;</code>, <code>BankCounter</code>, modify your simulation so that it implements the bank with counter queues as described above.</p>"},{"location":"labs/lab3-question.html#5-other-changes-needed","title":"5. Other Changes Needed","text":"<p>We also need to make the following changes to the input and output of the program.</p> <ol> <li> <p>There is an additional input parameter, an integer \\(L\\), indicating the maximum allowed length of the counter queue.  This input parameter should be read immediately after reading the number of bank counters and before the maximum allowed length of the entrance queue.</p> </li> <li> <p>Customers now have a new possible task: opening a bank account. The input parameter for each customer arrival, is now therefore an <code>int</code> which is \\(0\\) for deposit, \\(1\\) for withdrawal, or \\(2\\) for opening an account. For example, Customer <code>C2</code> opening an account at bank counter <code>S0</code> would be printed as: <pre><code>5.100: C2 OpenAccount begin (by S0)\n7.100: C2 OpenAccount done (by S0)\n</code></pre></p> </li> <li> <p>Now that we have two types of queues, if a customer joins the entrance queue, the customer along with the queue before joining should be printed as such: <pre><code>1.400: C3 joined bank queue [ C1 C2 ]\n</code></pre></p> </li> <li> <p>The counter queue will be printed whenever we print a counter. <pre><code>1.200: C2 joined counter queue (at S0 [ C1 ])\n2.000: C0 Withdrawal done (by S0 [ C1 C2 ])\n</code></pre></p> </li> </ol>"},{"location":"labs/lab3-question.html#following-cs2030s-style-guide","title":"Following CS2030S Style Guide","text":"<p>Like Lab 2, you should also make sure that your code follows the given Java style guide</p>"},{"location":"labs/lab3-question.html#assumptions","title":"Assumptions","text":"<p>We assume that no two events involving two different customers ever occur at the same time (except when a customer departs and another customer begins its service, or when a customer is done and another customer joins the counter queue from the entrance queue).  As per all labs, we assume that the input is correctly formatted.</p>"},{"location":"labs/lab3-question.html#compiling-testing-and-debugging","title":"Compiling, Testing, and Debugging","text":""},{"location":"labs/lab3-question.html#compilation","title":"Compilation","text":"<p>To compile your code, <pre><code>$ javac -Xlint:rawtypes *.java\n</code></pre></p> <p>To check for style, <pre><code>$ java -jar ~cs2030s/bin/checkstyle.jar -c ~cs2030s/bin/cs2030_checks.xml *.java\n</code></pre></p>"},{"location":"labs/lab3-question.html#running-and-testing","title":"Running and Testing","text":"<p>You may test your simulation code similarly to how you test your Lab 2.</p>"},{"location":"labs/lab3-question.html#test-cases","title":"Test Cases","text":"<p>A series of test cases <code>Lab3.x.in</code> and <code>Lab3.x.out</code> are provided.  Test cases for <code>x</code> \\(= 1\\) to \\(10\\) duplicate the corresponding test cases of Lab 2, with the input format updated to allow additional input of \\(L\\) (max counter queue length).   We set \\(L\\) to \\(0\\) in all these test cases. After your update your simulation to add counter queues, your code should still work for the scenarios in Lab 2 (except for small differences in the input and output format).</p> <p>Test Case \\(x = 11\\) introduces the new task type (Open Account). Test case \\(x = 12\\) to \\(14\\) are test cases without an entrance queue (\\(m = 0\\)). The rest of the test cases test scenarios with both entrance and counter queues.</p>"},{"location":"labs/lab3-question.html#grading","title":"Grading","text":"<p>This lab is worth 16 marks and contributes 4% to your final grade.  The marking scheme is as follows:</p> <ul> <li><code>Queue&lt;T&gt;</code>: 1 mark</li> <li><code>Array&lt;T&gt;</code>: 3 marks</li> <li>Comparable counters: 1 mark</li> <li>Using Queue, Array, counters correctly in simulation: 2 marks</li> <li>Style: 2 marks</li> <li>Correctness: 3 marks</li> <li>OO Design: 4 marks</li> </ul> <p>Note that the style marks is conditioned on evidence of efforts in solving Lab 3.  Simply resubmitting your Lab 2 solution as Lab 3 does not automatically earn you 2 style marks.</p> <p>Code that cannot be compiled will receive 0.</p>"},{"location":"labs/lab3-question.html#penalty-for-unnecessary-raw-types-and-abuse-of-suppresswarnings","title":"Penalty for Unnecessary Raw Types and Abuse of @SuppressWarnings","text":"<p>We penalize heavily (-1 marks per instance) for each unnecessary use of raw types and for each abuse of <code>@SuppressWarnings</code>.</p> <p>For Lab 3, you are allowed at most one instance of raw type in the constructor of <code>Array&lt;T&gt;</code> and one use of <code>@SuppressWarnings(\"rawtypes\")</code> in the smallest scope, immediately above the use of raw type.</p>"},{"location":"labs/lab3-question.html#warning","title":"WARNING \u2757\ufe0f","text":"<p>We would like to remind you of the following:</p> <ul> <li> <p>Use only <code>submit-labX</code> script to submit your lab.  Failure to do so will lead to a 50% penalty of your lab grade.  </p> </li> <li> <p>The grace period for getting used to the submission system is over.  We will not waive late penalty if students fail to submit properly.  Please check your repo after running <code>submit-labX</code> to ensure that your files have been added correctly. The URL to your repo is given after you run <code>submit-labX</code>.</p> </li> </ul>"},{"location":"labs/lab4-question.html","title":"Lab 4: Box","text":"<ul> <li>Deadline: 28 February, 2023, Tuesday, 23:59, SST</li> <li>Marks: 16</li> <li>Weightage: 4%</li> </ul>"},{"location":"labs/lab4-question.html#prerequisite","title":"Prerequisite:","text":"<ul> <li>Caught up to Unit 26 of Lecture Notes</li> <li>Familiar with CS2030S Java style guide</li> </ul>"},{"location":"labs/lab4-question.html#a-box","title":"A Box","text":"<p>In this lab, we are going to build our own generic wrapper class, a <code>Box&lt;T&gt;</code>.  This is a wrapper class that can be used to store an item of any reference type.  For this lab, our <code>Box&lt;T&gt;</code> is not going to be a very useful abstraction.  Not to worry.  we will slowly add more functionalities to it later in this module.</p> <p>In the following, we will slowly build up the <code>Box&lt;T&gt;</code> class along with some additional interfaces.  We suggest that you develop your class step-by-step in the order below.</p>"},{"location":"labs/lab4-question.html#the-basics","title":"The Basics","text":"<p>Build a generic class <code>Box&lt;T&gt;</code> that</p> <ul> <li> <p>contains a <code>private final</code> field of type <code>T</code> to store the content of the box.</p> </li> <li> <p>overrides the <code>equals</code> method from <code>Object</code> to compare if two boxes are the same.  Two boxes are the same if the content of the box equals each other, as decided by their respective <code>equals</code> method.</p> </li> <li> <p>overrides the <code>toString</code> method so it returns the string representation of its content, between <code>[</code> and <code>]</code>.</p> </li> <li> <p>provides a class method called <code>of</code> that returns a box with a given object.  If <code>null</code> is passed into <code>of</code>, then a <code>null</code> should be returned.</p> </li> </ul> <p>The method <code>of</code> is called a factory method.  A factory method is a method provided by a class for the creation of an instance of the class.  Using a public constructor to create an instance necessitates calling <code>new</code> and allocating a new object on the heap every time.  A factory method, on the other hand, allows the flexibility of reusing the same instance.  The <code>of</code> method does not reuse instances.  You will write another one that reuses available instances in the next section.</p> <p>With the availability of the <code>of</code> factory method, <code>Box&lt;T&gt;</code> should keep the constructor private.</p> <p>The sequence below shows how we can use a <code>Box</code> using the methods you developed above.</p> <pre><code>jshell&gt; Box.of(4)\n$.. ==&gt; [4]\njshell&gt; Box.of(4).equals(Box.of(4))\n$.. ==&gt; true\njshell&gt; Box.of(4).equals(4)\n$.. ==&gt; false\njshell&gt; Box.of(Box.of(0)).equals(Box.of(0))\n$.. ==&gt; false\njshell&gt; Box.of(Box.of(0)).equals(Box.of(Box.of(0)))\n$.. ==&gt; true\njshell&gt; Box.of(\"string\")\n$.. ==&gt; [string]\njshell&gt; Box.of(\"string\").equals(Box.of(4))\n$.. ==&gt; false\njshell&gt; Box.of(\"string\").equals(Box.of(\"null\"))\n$.. ==&gt; false\njshell&gt; Box.of(null)\n$.. ==&gt; null\n</code></pre> <p>You can test your <code>Box&lt;T&gt;</code> more comprehensively by running: <pre><code>javac -Xlint:rawtypes Test1.java\njava Test1\n</code></pre></p> <p>There shouldn't be any compilation warning or error when you compile <code>Test1.java</code> and all tests should prints <code>ok</code>.</p>"},{"location":"labs/lab4-question.html#an-empty-box","title":"An Empty Box","text":"<p>The <code>of</code> method returns a <code>null</code> if it is given a <code>null</code>. An alternative (some might say, cleaner) design is to make our factory method returns an empty box instead if we try to create a box of <code>null</code>.</p> <p>Add a class method in <code>Box</code> called <code>empty()</code> that creates and returns an empty box, i.e., a box with a <code>null</code> item stored in it.</p> <p>Since empty boxes are likely common, we want to cache and reuse the empty box, that is, create one as a private final class field called <code>EMPTY_BOX</code>, and whenever we need to return an empty box, <code>EMPTY_BOX</code> is returned.</p> <p>What should the type of <code>EMPTY_BOX</code> be? The type should be general enough to hold a box of any type (<code>Box&lt;Shop&gt;</code>, <code>Box&lt;Circle&gt;</code>, etc). <code>EMPTY_BOX</code> should, therefore, be assigned the most general generic <code>Box&lt;T&gt;</code> type. Hint: It is not <code>Box&lt;Object&gt;</code>.</p> <p>Your method <code>empty()</code> should do nothing more than to type-cast <code>EMPTY_BOX</code> to the right type (i.e., to <code>Box&lt;T&gt;</code>) before returning, to ensure type consistency.</p> <p>If you find yourself in a situation where the compiler generates an unchecked type warning, but you are sure that your code is type safe, you can use <code>@SuppressWarnings(\"unchecked\")</code> (responsibly) to suppress the warning.</p> <p>Add a boolean method <code>isPresent</code> that returns <code>true</code> if the box contains something; <code>false</code> if the box is empty.</p> <p>Finally, add a class factory method called <code>ofNullable</code>, which behaves just like <code>of</code> if the input is non-null, and returns an empty box if the input is <code>null</code>.</p> <p>Here is how the <code>Box</code> class can be used with the added methods above:</p> <pre><code>jshell&gt; Box.ofNullable(4)\n$.. ==&gt; [4]\njshell&gt; Box.ofNullable(\"string\")\n$.. ==&gt; [string]\njshell&gt; Box.ofNullable(null)\n$.. ==&gt; []\njshell&gt; Box.empty() == Box.empty()\n$.. ==&gt; true\njshell&gt; Box.ofNullable(null) == Box.empty()\n$.. ==&gt; true\njshell&gt; Box.ofNullable(null).equals(Box.empty())\n$.. ==&gt; true\njshell&gt; Box.ofNullable(null).equals(Box.of(null))\n$.. ==&gt; false\njshell&gt; Box.ofNullable(\"string\").isPresent()\n$.. ==&gt; true\njshell&gt; Box.ofNullable(null).isPresent()\n$.. ==&gt; false\n</code></pre> <p>You can test the additions to <code>Box&lt;T&gt;</code> above more comprehensively by running: <pre><code>javac -Xlint:rawtypes Test2.java\njava Test2\n</code></pre></p> <p>There shouldn't be any compilation warning or error when you compile <code>Test2.java</code> and all tests should prints <code>ok</code>.</p>"},{"location":"labs/lab4-question.html#checking-the-content-of-the-box","title":"Checking the Content of the Box","text":"<p>So far, we can only keep things inside our <code>Box</code>, which is not very exciting.  In the rest of the lab, we will expand <code>Box</code> to support operations on the content inside.</p> <p>Let's start by writing a generic interface called <code>BooleanCondition&lt;T&gt;</code> with a single abstract boolean method <code>test</code>.  The method <code>test</code> should take a single argument of type <code>T</code>.</p> <p>Now, one can create a variety of classes by implementing this interface.  By implementing the method <code>test</code> differently, we can create different conditions and check if the item contained in the box satisfies a given condition or not.</p> <p>Create a method <code>filter</code> in <code>Box</code> that takes in a <code>BooleanCondition</code> as a parameter.  The method <code>filter</code> should return an empty box if the item in the box failed the test (i.e., the call to <code>test</code> returns <code>false</code>).  Otherwise, <code>filter</code> leaves the box untouched and returns the box as it is.  Calling <code>filter</code> on an empty box just returns an empty box.</p> <p>Here is an example of how <code>BooleanCondition&lt;T&gt;</code> can be used with <code>Box&lt;T&gt;</code>.  Note that we make use of the class <code>Number</code>, a superclass of <code>Integer</code>, below.</p> <pre><code>jshell&gt; class AlwaysTrue&lt;T&gt; implements BooleanCondition&lt;T&gt; {\n   ...&gt;   public boolean test(T t) { return true; }\n   ...&gt; }\njshell&gt; class AlwaysFalse&lt;T&gt; implements BooleanCondition&lt;T&gt; {\n   ...&gt;   public boolean test(T t) { return false; }\n   ...&gt; }\njshell&gt; Box.of(4).filter(new AlwaysTrue&lt;&gt;());\n$.. ==&gt; [4]\njshell&gt; Box.empty().filter(new AlwaysTrue&lt;&gt;());\n$.. ==&gt; []\njshell&gt; Box.of(\"string\").filter(new AlwaysFalse&lt;&gt;());\n$.. ==&gt; []\njshell&gt; Box.empty().filter(new AlwaysFalse&lt;&gt;());\n$.. ==&gt; []\njshell&gt; class IntValueIsPositive implements BooleanCondition&lt;Number&gt; {\n   ...&gt;   public boolean test(Number t) { return t.intValue() &gt; 0; }\n   ...&gt; }\njshell&gt; Box.&lt;Double&gt;ofNullable(8.8).filter(new IntValueIsPositive());\n$.. ==&gt; [8.8]\njshell&gt; Box.&lt;Long&gt;ofNullable(-100L).filter(new IntValueIsPositive());\n$.. ==&gt; []\njshell&gt; Box.&lt;Double&gt;ofNullable(8.8).filter(new IntValueIsPositive()).filter(new IntValueIsPositive())\n$.. ==&gt; [8.8]\njshell&gt; Box.&lt;Long&gt;ofNullable(-100L).filter(new IntValueIsPositive()).filter(new IntValueIsPositive());\n$.. ==&gt; []\n</code></pre> <p>You can test the additions to <code>Box&lt;T&gt;</code> above morecomprehensively by running: <pre><code>javac -Xlint:rawtypes Test3.java\njava Test3\n</code></pre></p> <p>There shouldn't be any compilation warning or error when you compile <code>Test3.java</code> and all tests should prints <code>ok</code>.</p>"},{"location":"labs/lab4-question.html#implement-your-own-conditions","title":"Implement Your Own Conditions","text":"<p>The test cases above show you how you could create a class that implements a <code>BooleanCondition</code>.  Now you should implement your own.</p> <p>Create a class called <code>DivisibleBy</code> that implements <code>BooleanCondition</code> on <code>Integer</code> that checks if a given integer is divisible by another integer.  The <code>test</code> method should return <code>true</code> if it is divisible; return <code>false</code> otherwise.</p> <p>Create another class called <code>LongerThan</code> that implements <code>BooleanCondition</code> on <code>String</code> that checks if a given string is longer than a given limit.  The <code>test</code> method should return <code>true</code> if it is longer; return <code>false</code> otherwise.</p> <p>Here is how it should work:</p> <pre><code>jshell&gt; new DivisibleBy(5).test(4);\n$.. ==&gt; false\njshell&gt; new DivisibleBy(5).test(10);\n$.. ==&gt; true\njshell&gt; Box.of(10).filter(new DivisibleBy(2));\n$.. ==&gt; [10]\njshell&gt; Box.of(3).filter(new DivisibleBy(2));\n$.. ==&gt; []\njshell&gt; Box.&lt;Integer&gt;empty().filter(new DivisibleBy(10));\n$.. ==&gt; []\njshell&gt;\njshell&gt; Box.of(\"\").filter(new LongerThan(10));\n$.. ==&gt; []\njshell&gt; Box.of(\"123456789\").filter(new LongerThan(10));\n$.. ==&gt; []\njshell&gt; Box.of(\"1234567890\").filter(new LongerThan(10));\n$.. ==&gt; []\njshell&gt; Box.of(\"1234567890A\").filter(new LongerThan(10));\n$.. ==&gt; [1234567890A]\njshell&gt; Box.&lt;String&gt;empty().filter(new LongerThan(10));\n$.. ==&gt; []\n</code></pre> <p>On the other hand, calling <pre><code>Box.of(\"hello\").filter(new DivisibleBy(10));\n</code></pre></p> <p>should result in a compilation error.</p> <p>You can test your additions to <code>Box&lt;T&gt;</code> more comprehensively by running: <pre><code>javac -Xlint:rawtypes Test4.java\njava Test4\n</code></pre></p> <p>There shouldn't be any compilation warning or error when you compile <code>Test4.java</code> and all tests should prints <code>ok</code>.</p>"},{"location":"labs/lab4-question.html#transforming-a-box","title":"Transforming a Box","text":"<p>Now, we are going to write an interface (along with its implementations) and a method in Box that allows a box to be transformed into another box, possibly containing a different type.</p> <p>First, create an interface called <code>Transformer&lt;T,U&gt;</code> with an abstract method called <code>transform</code> that takes in an argument of generic type <code>T</code> and returns a value of generic type <code>U</code>.</p> <p>Write a method called <code>map</code> in the class <code>Box</code> that takes in a <code>Transformer</code>, and use the given <code>Transformer</code> to transform the box (and the value inside) into another box of type <code>Box&lt;U&gt;</code>.  Calling <code>map</code> on an empty box should just return an empty box.</p> <p>In addition, implement your own <code>Transformer</code> in a non-generic class called <code>LastDigitsOfHashCode</code> to transform the content of the box into a box of integer, the value of which is the last \\(k\\) digits of the value returned by calling <code>hashCode()</code> on the content of the original box (ignoring the positive/negative sign and leading zeros). The value \\(k\\) is passed in through the object of <code>LastDigitsOfHashCode</code>.  The method <code>hashCode()</code> is defined in the class <code>Object</code>.</p> <pre><code>jshell&gt; class AddOne implements Transformer&lt;Integer,Integer&gt; {\n   ...&gt;   public Integer transform(Integer t) { return t + 1; }\n   ...&gt; }\njshell&gt; class StringLength implements Transformer&lt;String,Integer&gt; {\n   ...&gt;   public Integer transform(String t) { return t.length(); }\n   ...&gt; }\njshell&gt;\njshell&gt; Box.of(4).map(new AddOne());\n$.. ==&gt; [5]\njshell&gt; Box.&lt;Integer&gt;empty().map(new AddOne());\n$.. ==&gt; []\njshell&gt; Box&lt;Number&gt; b = Box.of(4).map(new AddOne());\njshell&gt;\njshell&gt; Box.of(\"string\").map(new StringLength());\n$.. ==&gt; [6]\njshell&gt; Box.of(\"string\").map(new StringLength()).map(new AddOne());\n$.. ==&gt; [7]\njshell&gt; Box.of(\"string\").map(new StringLength()).filter(new DivisibleBy(5)).map(new AddOne());\n$.. ==&gt; []\njshell&gt; Box.of(\"chocolates\").map(new StringLength()).filter(new DivisibleBy(5)).map(new AddOne());\n$.. ==&gt; [11]\njshell&gt; Box.&lt;String&gt;empty().map(new StringLength());\n$.. ==&gt; []\njshell&gt;\njshell&gt; class AlwaysNull implements Transformer&lt;Integer,Object&gt; {\n   ...&gt;   public Object transform(Integer t) { return null; }\n   ...&gt; }\njshell&gt; Box.of(4).map(new AlwaysNull());\n$.. ==&gt; []\njshell&gt;\njshell&gt; new LastDigitsOfHashCode(4).transform(\"string\");\n$.. ==&gt; 5903\njshell&gt; new LastDigitsOfHashCode(4).transform(123456);\n$.. ==&gt; 3456\njshell&gt; Box.of(\"string\").map(new LastDigitsOfHashCode(2));\n$.. ==&gt; [3]\njshell&gt; Box.of(123456).map(new LastDigitsOfHashCode(5));\n$.. ==&gt; [23456]\njshell&gt; Box&lt;Number&gt; b = Box.of(new Integer[] {8, 8, 8}).map(new LastDigitsOfHashCode(5));\n</code></pre> <p>You can test your additions to <code>Box&lt;T&gt;</code> more comprehensively by running: <pre><code>javac -Xlint:rawtypes Test5.java\njava Test5\n</code></pre></p> <p>There shouldn't be any compilation warning or error when you compile <code>Test5.java</code> and all tests should prints <code>ok</code>.</p>"},{"location":"labs/lab4-question.html#box-in-a-box","title":"Box in a Box","text":"<p>The <code>Transformer</code> interface allows us to transform the content of the box from one type into any other type, including a box! You have seen examples above where we have a box inside a box: <code>Box.of(Box.of(0))</code>.</p> <p>Now, implement your own <code>Transformer</code> in a class called <code>BoxIt&lt;T&gt;</code> to transform an item into a box containing the item. The corresponding type <code>T</code> is transformed into <code>Box&lt;T&gt;</code>. This transformer, when invoked with <code>map</code>, results in a new box within the box.</p> <pre><code>jshell&gt; Box.of(4).map(new BoxIt&lt;&gt;())\n$.. ==&gt; [[4]]\njshell&gt; Box.of(Box.of(5)).map(new BoxIt&lt;&gt;())\n$.. ==&gt; [[[5]]]\njshell&gt; Box.ofNullable(null).map(new BoxIt&lt;&gt;())\n$.. ==&gt; []\njshell&gt;\n</code></pre> <p>You can test your <code>Box&lt;T&gt;</code> by running: <pre><code>javac -Xlint:rawtypes Test6.java\njava Test6\n</code></pre> There shouldn't be any compilation warning or error when you compile <code>Test6.java</code> and all tests should prints <code>ok</code>.</p>"},{"location":"labs/lab4-question.html#files","title":"Files","text":"<p>A set of empty files have been given to you.  You should only edit these files.  You must not add any additional files.</p> <p>The files <code>Test1.java</code>, <code>Test2.java</code>, etc., as well as <code>CS2030STest.java</code>, are provided for testing.  You can edit them to add your own test cases, but they will not be submitted.</p>"},{"location":"labs/lab4-question.html#following-cs2030s-style-guide","title":"Following CS2030S Style Guide","text":"<p>You should make sure that your code follows the given Java style guide</p>"},{"location":"labs/lab4-question.html#grading","title":"Grading","text":"<p>This lab is worth 16 marks and contributes 4% to your final grade. The marking scheme is as follows:</p> <ul> <li>Style: 2 marks</li> <li>Correctness: 14 marks</li> </ul> <p>We will deduct 1 mark for each abuse or unnecessary use of <code>@SuppressWarnings</code> and for each raw type. <code>@SuppressWarnings</code> should be used in at most two places mentioned above.</p> <p>Note that the style marks are conditioned on the evidence of efforts in solving Lab 4.</p>"},{"location":"labs/lab4-question.html#warning","title":"WARNING \u2757\ufe0f","text":"<p>We would like to remind you of the following:</p> <ul> <li> <p>Use only the <code>submit-labX</code> script to submit your lab. Failure to do so will lead to a 50% penalty on your lab grade.</p> </li> <li> <p>The grace period for getting used to the submission system is over.  We will not waive the late penalty if students fail to submit properly.  Please check your repo after running <code>submit-labX</code> to ensure that your files have been added correctly. The URL to your repo is given after you run <code>submit-labX</code>.</p> </li> </ul>"},{"location":"labs/lab5-question.html","title":"Lab 5: Maybe","text":"<ul> <li>Deadline: 14 March, 2023, Tuesday, 23:59, SST</li> <li>Marks: 12</li> <li>Weightage: 3%</li> </ul>"},{"location":"labs/lab5-question.html#prerequisite","title":"Prerequisite:","text":"<ul> <li>Caught up to Unit 29 of Lecture Notes</li> <li>Familiar with the CS2030S Java style guide</li> </ul> <p>This is a follow-up from Lab 4.  In Lab 4, we have constructed a generic class <code>Box&lt;T&gt;</code>, which is a container for an item of type <code>T</code>.  Beyond being an exercise for teaching about generics, <code>Box&lt;T&gt;</code> is not a very useful type.  In Lab 5 and 6, we are going to modify <code>Box&lt;T&gt;</code> into two more useful and general classes.  We are going to build our own Java packages using these useful classes.</p>"},{"location":"labs/lab5-question.html#java-package","title":"Java <code>package</code>","text":"<p>Java package mechanism allows us to group relevant classes and interfaces under a namespace. You have seen two packages so far: <code>java.util</code>, where we import <code>List</code>, <code>Arrays</code>, from, and <code>java.lang</code> where we import the <code>Math</code> class from. These are provided by Java as standard libraries. We can also create our package and put the classes and interfaces into the same package. We (and the clients) can then import and use the classes and interfaces that we provide.</p> <p>Java package provides a higher-layer of abstraction barrier.  We can designate a class to be used outside a package by prefixing the keyword <code>class</code> with the access modifier <code>public</code>.  We can further fine-tune which fields and methods are accessible from other classes in the same package using the <code>protected</code> access modifier.</p> <p>You can read more about java packages and the <code>protected</code> modifier yourself through Oracle's Java tutorial.</p> <p>We will create a package named <code>cs2030s.fp</code> to be used for this and the next few labs.  </p> <p>First, we need to add the line: <pre><code>package cs2030s.fp;\n</code></pre></p> <p>on top of every <code>.java</code> file that we would like to include in the package.</p> <p>The package name is typically written in a hierarchical manner using the \".\" notation. The name also indicates the location of the <code>.java</code> files and the <code>.class</code> files. For this reason, you can no longer store the <code>.java</code> files under <code>labX-username</code> directly. Instead, you should put them in a subdirectory called <code>cs2030s/fp</code> under <code>labX-username</code>.</p> <p>To start, our <code>cs2030s.fp</code> package will contain the two interfaces <code>Transformer</code> and <code>BooleanCondition</code> that you have written in Lab 4.</p> <p>If you have set up everything correctly, you should be able to run the following in <code>jshell</code> (Remember to always compile your code first!) from your <code>labX-username</code> directory: <pre><code>jshell&gt; import cs2030s.fp.Transformer;\njshell&gt; import cs2030s.fp.BooleanCondition;\n</code></pre></p> <p>without error.</p>"},{"location":"labs/lab5-question.html#more-interfaces","title":"More Interfaces","text":"<p>Now, we are going to add two more interfaces into our package:</p> <ul> <li><code>Producer&lt;T&gt;</code> is an interface with a single <code>produce</code> method that takes in no parameter and returns a value of type <code>T</code>.</li> <li><code>Consumer&lt;T&gt;</code> is an interface with a single <code>consume</code> method that takes in a parameter of type <code>T</code> and returns nothing.</li> </ul> <p>If you have set up everything correctly, you should be able to run the following in <code>jshell</code> without errors (remember to always compile your code first!)</p> <pre><code>jshell&gt; import cs2030s.fp.Producer;\njshell&gt; import cs2030s.fp.Consumer;\njshell&gt; Producer&lt;String&gt; p;\njshell&gt; p = new Producer&lt;&gt;() {\n   ...&gt;   public String produce() { return \"\"; }\n   ...&gt; }\njshell&gt; Consumer&lt;Boolean&gt; c;\njshell&gt; c = new Consumer&lt;&gt;() {\n   ...&gt;   public void consume(Boolean b) { }\n   ...&gt; }\n</code></pre>"},{"location":"labs/lab5-question.html#call-me-maybet","title":"Call Me <code>Maybe&lt;T&gt;</code>","text":"<p>Now, we are going to implement a type called <code>Maybe&lt;T&gt;</code> in the <code>cs2030s.fp</code> package.  Our <code>Maybe&lt;T&gt;</code> is an option type, a common abstraction in programming languages (<code>java.util.Optional</code> in Java, <code>option</code> in Scala, <code>Maybe</code> in Haskell, <code>Nullable&lt;T&gt;</code> in C#, etc) that is a wrapper around a value that might be missing.  In other words, it represents either some value, or none.</p>"},{"location":"labs/lab5-question.html#inner-classes-and-factory-methods","title":"Inner Classes and Factory Methods","text":"<p>Write an abstract class called <code>Maybe&lt;T&gt;</code> with two concrete, static, nested classes, named <code>None</code> and <code>Some&lt;T&gt;</code>.</p> <pre><code>jshell&gt; import cs2030s.fp.Maybe;\n\njshell&gt; Maybe&lt;Object&gt; m = new Maybe&lt;&gt;();\n|  Error:\n|  cs2030s.fp.Maybe is abstract; cannot be instantiated\n|  Maybe&lt;Object&gt; m = new Maybe&lt;&gt;();\n|                    ^-----------^\n</code></pre> <ul> <li>Both <code>None</code> and <code>Some&lt;T&gt;</code> inherits from <code>Maybe&lt;T&gt;</code>.  Note that <code>None</code> is not a generic class so you need to specify <code>Object</code> as the type argument to <code>Maybe&lt;T&gt;</code>.</li> <li><code>Some&lt;T&gt;</code> must be immutable.  </li> <li>The types <code>None</code> and <code>Some&lt;T&gt;</code> are internal implementation details of <code>Maybe&lt;T&gt;</code> and must not be used directly.  For instance, clients must not be able to declare a variable of type <code>Maybe.Some&lt;T&gt;</code>.</li> </ul> <pre><code>jshell&gt; Maybe.None m;\n|  Error:\n|  cs2030s.fp.Maybe.None is not public in cs2030s.fp.Maybe; cannot be accessed from outside package\n|  Maybe.None m;\n|  ^--------^\n\njshell&gt; Maybe.Some&lt;Object&gt; m;\n|  Error:\n|  cs2030s.fp.Maybe.Some is not public in cs2030s.fp.Maybe; cannot be accessed from outside package\n|  Maybe.Some&lt;Object&gt; m;\n|  ^--------^\n</code></pre> <p><code>Maybe&lt;T&gt;</code> has two static factory methods:</p> <ul> <li><code>none()</code> returns an instance of <code>None</code>.  Just like <code>Box::empty</code>, there should only be one instance of <code>None</code>.  Multiple calls to <code>none()</code> should return the same instance.</li> <li><code>some(T t)</code> takes in a value <code>t</code> and returns an instance of <code>Some&lt;T&gt;</code> wrapped around <code>t</code> (<code>t</code> might be <code>null</code>).</li> </ul> <p>Implement a <code>None::toString</code> method that always returns <code>[]</code> and a <code>Some::toString</code> methods that always return the string representation of the content between <code>[</code> and <code>]</code>.</p> <p>Here are some examples of how the factory methods might be used (remember to always compile your code first!) <pre><code>jshell&gt; Maybe&lt;Object&gt; m = Maybe.none()\njshell&gt; Maybe.none()\n$.. ==&gt; []\n\njshell&gt; Maybe&lt;Integer&gt; m = Maybe.some(null)\njshell&gt; Maybe.some(null)\n$.. ==&gt; [null]\n\njshell&gt; Maybe&lt;Integer&gt; m = Maybe.some(4)\njshell&gt; Maybe.some(4)\n$.. ==&gt; [4]\n\njshell&gt; Maybe.none() == Maybe.none()\n$.. ==&gt; true\n</code></pre></p> <p>Implement the <code>equal</code> method such that two <code>None</code> are always equal, and two <code>Some&lt;T&gt;</code> instances are equals if their contents are equals.  (You might find your <code>Box</code> implementation useful).</p> <pre><code>jshell&gt; Maybe.none().equals(Maybe.none())\n$.. ==&gt; true\njshell&gt; Maybe.none().equals(Maybe.some(\"day\"))\n$.. ==&gt; false\njshell&gt; Maybe.none().equals(Maybe.some(null))\n$.. ==&gt; false\njshell&gt; Maybe.none().equals(null)\n$.. ==&gt; false\n\njshell&gt; Maybe.some(\"day\").equals(Maybe.some(\"day\"))\n$.. ==&gt; true\n\njshell&gt; Maybe.some(null).equals(Maybe.some(\"day\"))\n$.. ==&gt; false\njshell&gt; Maybe.some(null).equals(Maybe.some(null))\n$.. ==&gt; true\njshell&gt; Maybe.some(null).equals(Maybe.none())\n$.. ==&gt; false\njshell&gt; Maybe.some(null).equals(null)\n$.. ==&gt; false\n</code></pre> <p>Finally, add a static factory <code>of</code>, which returns an instance of <code>Some</code> if the input is not null, and <code>None</code> otherwise.</p> <pre><code>jshell&gt; Maybe.of(null).equals(Maybe.none())\n$.. ==&gt; true\njshell&gt; Maybe.of(null).equals(Maybe.some(null))\n$.. ==&gt; false\njshell&gt; Maybe.of(4).equals(Maybe.none())\n$.. ==&gt; false\njshell&gt; Maybe.of(4).equals(Maybe.some(4))\n$.. ==&gt; true\n</code></pre> <p>Add a <code>protected</code> abstract method called <code>get()</code> with return type of <code>T</code> into <code>Maybe&lt;T&gt;</code>.  Implement <code>get()</code> in <code>None</code> such that it throws a <code>NoSuchElementException</code>, and in <code>Some&lt;T&gt;</code> such that it returns the value contained inside.  Since this method might throw an exception if the client misuse it, we keep the method <code>protected</code> and usable only within our <code>package</code>.  Due to this, we can't test it.  But keep this method in mind as it might be handy later.</p> <pre><code>jshell&gt; Maybe.none().get()\n|  Error:\n|  get() has protected access in cs2030s.fp.Maybe\n|  Maybe.none().get()\n|  ^---------------^\njshell&gt; Maybe.some(0).get()\n|  Error:\n|  get() has protected access in cs2030s.fp.Maybe\n|  Maybe.some(0).get()\n|  ^---------------^\n</code></pre> <p>You can test your code by running the <code>Test1.java</code> provided.  The following should compile without errors or warnings.  Make sure your code follows the CS2030S Java style.</p> <pre><code>$ javac -Xlint:rawtypes Test1.java\n$ java Test1\n$ java -jar ~cs2030s/bin/checkstyle.jar -c ~cs2030s/bin/cs2030_checks.xml cs2030s/fp/*.java\n</code></pre>"},{"location":"labs/lab5-question.html#filter-and-map-again","title":"Filter and Map (again!)","text":"<p>We now add the methods <code>filter</code> and <code>map</code> to <code>Maybe&lt;T&gt;</code>.</p> <p>Create an abstract method <code>filter</code> in <code>Maybe&lt;T&gt;</code> that takes in a <code>BooleanCondition&lt;..&gt;</code> (type parameter is omitted) as a parameter and implement this method in both <code>None</code> and <code>Some&lt;T&gt;</code>.</p> <p>Calling <code>filter</code> on <code>None</code> always returns a <code>None</code>.  Call <code>filter</code> on <code>Some</code> should return <code>None</code> if the value in <code>Some</code> is not <code>null</code> and failed the test (i.e., the call to <code>test</code> returns <code>false</code>).  Otherwise, <code>filter</code> leaves the <code>Maybe</code> untouched and returns the <code>Maybe</code> as it is.</p> <p>Here is how <code>filter</code> could be use.  Remember to always compile your code first before using them in <code>jshell</code>:</p> <pre><code>jshell&gt; import cs2030s.fp.BooleanCondition\njshell&gt; import cs2030s.fp.Maybe\njshell&gt;\njshell&gt; BooleanCondition&lt;Number&gt; isEven = new BooleanCondition&lt;&gt;() {\n   ...&gt;   public boolean test(Number x) {\n   ...&gt;     return x.shortValue() % 2 == 0;\n   ...&gt;   }\n   ...&gt; }\njshell&gt; Maybe.&lt;Integer&gt;none().filter(isEven)\n$.. ==&gt; []\njshell&gt; Maybe.&lt;Integer&gt;some(null).filter(isEven)\n$.. ==&gt; [null]\njshell&gt; Maybe.&lt;Integer&gt;some(1).filter(isEven)\n$.. ==&gt; []\njshell&gt; Maybe.&lt;Integer&gt;some(2).filter(isEven)\n$.. ==&gt; [2]\n</code></pre> <p>Create an abstract method <code>map</code> in <code>Maybe&lt;T&gt;</code> that takes in a <code>Transformer&lt;...&gt;</code> (type parameter omitted) as a parameter.  Implement <code>map</code> in both <code>None</code> and <code>Some&lt;T&gt;</code>.</p> <p>Calling <code>map</code> on <code>None</code> always returns a <code>None</code>.  Call <code>map</code> on <code>Some&lt;T&gt;</code> should return a new <code>Some&lt;T&gt;</code> with the value inside transformed by the <code>Transformer</code> instance.  Note that, if the <code>transform</code> method does not handle the case where the input is <code>null</code>, a <code>NullPointerException</code> will be thrown.</p> <pre><code>jshell&gt; Transformer&lt;Integer,Integer&gt; incr = new Transformer&lt;&gt;() {\n   ...&gt;   public Integer transform(Integer x) {\n   ...&gt;     return x + 1;\n   ...&gt;   }\n   ...&gt; }\njshell&gt; Maybe.&lt;Integer&gt;none().map(incr)\n$.. ==&gt; []\njshell&gt; try {\n   ...&gt;   Maybe.&lt;Integer&gt;some(null).map(incr); // &lt;- error expected\n   ...&gt; } catch (NullPointerException e) {\n   ...&gt;   System.out.println(e);\n   ...&gt; }\njava.lang.NullPointerException\njshell&gt; Maybe.&lt;Integer&gt;some(1).map(incr)\n$.. ==&gt; [2]\n\njshell&gt; Map&lt;String,Integer&gt; map = Map.of(\"one\", 1, \"two\", 2);\njshell&gt; Transformer&lt;String,Maybe&lt;Integer&gt;&gt;  = new Transformer&lt;&gt;() {\n   ...&gt;   public String transform(String x) {\n   ...&gt;     return Maybe.some(map.get(x));\n   ...&gt;   }\n   ...&gt; }\njshell&gt; Map&lt;String,Integer&gt; map = Map.of(\"one\", 1, \"two\", 2);\njshell&gt; Transformer&lt;String,Integer&gt; wordToInt = new Transformer&lt;&gt;() {\n   ...&gt;   public Integer transform(String x) {\n   ...&gt;     return map.get(x);\n   ...&gt;   }\n   ...&gt; }\njshell&gt; Maybe.&lt;String&gt;none().map(wordToInt)\n$.. ==&gt; []\njshell&gt; Maybe.&lt;String&gt;some(\"\").map(wordToInt)\n$.. ==&gt; [null]\njshell&gt; Maybe.&lt;String&gt;some(\"one\").map(wordToInt)\n$.. ==&gt; [1]\n\njshell&gt; Transformer&lt;String,Maybe&lt;Integer&gt;&gt; wordToMaybeInt = new Transformer&lt;&gt;() {\n   ...&gt;   public Maybe&lt;Integer&gt; transform(String x) {\n   ...&gt;     return Maybe.of(map.get(x));\n   ...&gt;   }\n   ...&gt; }\njshell&gt; Maybe.&lt;String&gt;none().map(wordToMaybeInt)\n$.. ==&gt; []\njshell&gt; Maybe.&lt;String&gt;some(\"\").map(wordToMaybeInt)\n$.. ==&gt; [[]]\njshell&gt; Maybe.&lt;String&gt;some(\"one\").map(wordToMaybeInt)\n$.. ==&gt; [[1]]\njshell&gt; Maybe&lt;Maybe&lt;Integer&gt;&gt; m = Maybe.&lt;String&gt;some(\"one\").map(wordToMaybeInt)\n\njshell&gt; Transformer&lt;Object,Integer&gt; toHashCode = new Transformer&lt;&gt;() {\n   ...&gt;   public Integer transform(Object x) {\n   ...&gt;     return x.hashCode();\n   ...&gt;   }\n   ...&gt; }\njshell&gt; Maybe&lt;Integer&gt; m = Maybe.&lt;String&gt;none().map(toHashCode)\n$.. ==&gt; []\njshell&gt; Maybe&lt;Integer&gt; m = Maybe.&lt;String&gt;some(\"cs2030s\").map(toHashCode)\n$.. ==&gt; [1008560200]\n</code></pre> <p>You can test your code by running the <code>Test2.java</code> provided.  The following should compile without errors or warnings.  Make sure your code follows the CS2030S Java style.</p> <pre><code>$ javac -Xlint:rawtypes Test2.java\n$ java Test2\n$ java -jar ~cs2030s/bin/checkstyle.jar -c ~cs2030s/bin/cs2030_checks.xml cs2030s/fp/*.java\n</code></pre> <p>Remember to make your methods as flexible as it could be in the type that it accepts.</p>"},{"location":"labs/lab5-question.html#flatmap","title":"flatMap","text":"<p>Consider a <code>Transformer</code> that might return a <code>Maybe&lt;T&gt;</code> itself (as <code>wordToMaybeInt</code> above).  Using <code>map</code> on such a <code>Transformer</code> would lead to a value wrapped around a <code>Maybe</code> twice.</p> <p>Create a abstract method <code>flatMap</code> in <code>Maybe&lt;T&gt;</code> (and implements it in both <code>None</code> and <code>Some&lt;T&gt;</code>) that takes in a <code>Transfomer&lt;..&gt;</code> as the parameter.  The <code>Transformer</code> object transforms the value of type <code>T</code> in <code>Maybe&lt;T&gt;</code> into a value of type <code>Maybe&lt;U&gt;</code>, for some type <code>U</code>.  The method <code>flatMap</code>, however, returns a value of type <code>Maybe&lt;U&gt;</code> (instead of <code>Maybe&lt;Maybe&lt;U&gt;&gt;</code> as in the case of <code>map</code>).</p> <p>Remember to apply PECS in your method signature so that <code>flatMap</code> is as flexible as possible.  We no longer explicitly test for it in our public test cases.</p> <pre><code>jshell&gt; Map&lt;String,Integer&gt; map = Map.of(\"one\", 1, \"two\", 2);\njshell&gt; Transformer&lt;String,Maybe&lt;Integer&gt;&gt; wordToMaybeInt = new Transformer&lt;&gt;() {\n   ...&gt;   public Maybe&lt;Integer&gt; transform(String x) {\n   ...&gt;     return Maybe.of(map.get(x));\n   ...&gt;   }\n   ...&gt; }\njshell&gt; Maybe.&lt;String&gt;none().flatMap(wordToMaybeInt)\n$.. ==&gt; []\njshell&gt; Maybe.&lt;String&gt;some(\"\").flatMap(wordToMaybeInt)\n$.. ==&gt; []\njshell&gt; Maybe.&lt;String&gt;some(\"one\").flatMap(wordToMaybeInt)\n$.. ==&gt; [1]\njshell&gt; Maybe&lt;Number&gt; m = Maybe.&lt;String&gt;some(\"one\").flatMap(wordToMaybeInt)\n</code></pre> <p>You can test your code by running the <code>Test3.java</code> provided.  The following should compile without errors or warnings.  Make sure your code follows the CS2030S Java style.</p> <pre><code>$ javac -Xlint:rawtypes Test3.java\n$ java Test3\n$ java -jar ~cs2030s/bin/checkstyle.jar -c ~cs2030s/bin/cs2030_checks.xml cs2030s/fp/*.java\n</code></pre>"},{"location":"labs/lab5-question.html#or-else","title":"Or Else","text":"<p>Since <code>Maybe</code> is an abstraction for a possibly missing value, it would be useful to provide methods that decide what to do if the value is missing.</p> <p>Add an abstract method <code>orElse</code> in <code>Maybe&lt;T&gt;</code>.  Implement it in <code>None</code> and <code>Some&lt;T&gt;</code>, such that <code>None</code> returns a given value that is a subtype of <code>T</code>, while <code>Some&lt;T&gt;</code> just returns the value inside.  For example,</p> <pre><code>jshell&gt; Maybe.&lt;Number&gt;none().orElse(4)\n$.. ==&gt; 4\njshell&gt; Maybe.&lt;Integer&gt;some(1).orElse(4)\n$.. ==&gt; 1\n</code></pre> <p>Add an abstract method <code>orElseGet</code> in <code>Maybe&lt;T&gt;</code>.  <code>orElseGet</code> takes in a producer.  Implements <code>orElseGet</code> in <code>None</code> and <code>Some&lt;T&gt;</code>, such that <code>None</code> returns a value that is a subtype of <code>T</code> produced by the producer, while <code>Some&lt;T&gt;</code> just returns the value inside.  For example,</p> <pre><code>jshell&gt; Producer&lt;Double&gt; zero = new Producer&lt;&gt;() {\n   ...&gt;   public Double produce() {\n   ...&gt;     return 0.0;\n   ...&gt;   }\n   ...&gt; }\njshell&gt; Maybe.&lt;Number&gt;none().orElseGet(zero);\n$.. ==&gt; 0.0\njshell&gt; Maybe.&lt;Number&gt;some(1).orElseGet(zero);\n$.. ==&gt; 1\n</code></pre> <p>Add an abstract method <code>ifPresent</code> in <code>Maybe&lt;T&gt;</code>.  <code>ifPresent</code> takes in a consumer.  Implements <code>ifPresent</code> in <code>None</code> and <code>Some&lt;T&gt;</code>, such that the given consumer does nothing for <code>None</code> and consumes the value inside for <code>Some&lt;T&gt;</code>.</p> <pre><code>jshell&gt; List&lt;Object&gt; list = new ArrayList&lt;&gt;();\njshell&gt; Consumer&lt;Object&gt; addToList = new Consumer&lt;&gt;() {\n   ...&gt;   public void consume(Object o) {\n   ...&gt;     list.add(o);\n   ...&gt;   }\n   ...&gt; }\njshell&gt; Maybe.&lt;Number&gt;none().ifPresent(addToList);\njshell&gt; list\nlist ==&gt; []\njshell&gt; Maybe.&lt;Number&gt;some(1).ifPresent(addToList);\njshell&gt; list\nlist ==&gt; [1]\n</code></pre> <p>You can test your code by running the <code>Test4.java</code> provided.  The following should compile without errors or warnings.  Make sure your code follows the CS2030S Java style.</p> <pre><code>$ javac -Xlint:rawtypes Test4.java\n$ java Test4\n$ java -jar ~cs2030s/bin/checkstyle.jar -c ~cs2030s/bin/cs2030_checks.xml cs2030s/fp/*.java\n</code></pre>"},{"location":"labs/lab5-question.html#using-maybe","title":"Using <code>Maybe</code>","text":"<p>Now that we have our <code>Maybe</code> class, let's try to use it to do something more meaningful.</p> <p>It is a common idiom (although not a good one) for a method to return a value if successful and return a <code>null</code> otherwise.  It is up to the caller to check and make sure that the return value is not <code>null</code> before using it, to prevent receiving a run-time <code>NullPointerException</code>.</p> <p>One example of this is the <code>Map&lt;K,V&gt;</code> implements in Java.  You have seen above that <code>Map::get</code> returns <code>null</code> if the key that you are looking for does not exist.</p> <p>We have given you a program <code>Lab5.java</code> that uses multiple layers of <code>Map</code> to store information about students, their modules, and their assessment grades.  There is a method <code>getGrade</code> that, given this map, a student, a module, and an assessment, look up the corresponding grade.  There are multiple checks if a returned value is <code>null</code> in this method.</p> <p>Our new <code>Maybe&lt;T&gt;</code> class provides a good abstraction for the returned value from <code>Map::get</code> since the value returned is either some value or none!</p> <p>Your final task is to modify <code>getGrade</code> so that it uses <code>Maybe&lt;T&gt;</code> instead:</p> <ul> <li>Declare and initialize two <code>Transformer</code> instances using anonymous classes.  </li> <li>Use the two <code>Transformers</code>, <code>Maybe::of</code>, <code>Maybe::flatMap</code>, and <code>Maybe::orElse</code> to achieve the same functionality as the given <code>getGrade</code> in a single return statement.   In other words, your <code>getGrade</code> should consists of three Java statements: two to create two Transformers, and one <code>return</code> statement.   The skeleton has been given.</li> <li>Your code should not have any more conditional statements or references to <code>null</code>.</li> </ul> <p>Compile your edited <code>Lab5</code> class.  The following should compile without errors or warnings.  Make sure your code follows the CS2030S Java style.</p> <pre><code>$ javac -Xlint:rawtypes Lab5.java\n$ java Lab5\n$ java -jar ~cs2030s/bin/checkstyle.jar -c ~cs2030s/bin/cs2030_checks.xml Lab5.java\n</code></pre>"},{"location":"labs/lab5-question.html#files","title":"Files","text":"<p>A set of empty files have been given to you.  You should only edit these files.  You must not add any additional files.</p> <p>The files <code>Test1.java</code>, <code>Test2.java</code>, etc., as well as <code>CS2030STest.java</code>, are provided for testing.  You can edit them to add your test cases, but they will not be submitted.</p>"},{"location":"labs/lab5-question.html#following-cs2030s-style-guide","title":"Following CS2030S Style Guide","text":"<p>You should make sure that your code follows the given Java style guide</p>"},{"location":"labs/lab5-question.html#grading","title":"Grading","text":"<p>This lab is worth 12 marks and contributes 3% to your final grade.  The marking scheme is as follows:</p> <ul> <li>Style: 2 marks</li> <li>Everything Else: 10 marks</li> </ul> <p>We will deduct 1 mark for each unnecessary use of <code>@SuppressWarnings</code> and each raw type.  <code>@SuppressWarnings</code> should be used appropriately and not abused to remove compilation warnings.</p> <p>Note that the style marks are conditioned on the evidence of efforts in solving Lab 5.</p>"},{"location":"labs/lab5-question.html#warning","title":"WARNING \u2757\ufe0f","text":"<p>We would like to remind you of the following:</p> <ul> <li>Use only the <code>submit-labX</code> script to submit your lab.  Failure to do so will lead to a 50% penalty on your lab grade.</li> <li>The grace period for getting used to the submission system is over.  We will not waive the late penalty if students fail to submit properly.  Please check your repo after running <code>submit-labX</code> to ensure that your files have been added correctly. The URL to your repo is given after you run <code>submit-labX</code>.</li> </ul>"},{"location":"labs/lab6-question.html","title":"Lab 6: Lazy","text":"<ul> <li>Deadline: 21 March, 2023, Tuesday, 23:59, SST</li> <li>Marks: 12</li> <li>Weightage: 3%</li> </ul>"},{"location":"labs/lab6-question.html#prerequisite","title":"Prerequisite","text":"<ul> <li>Caught up to Unit 32 of Lecture Notes</li> <li>Completed Lab 5</li> </ul>"},{"location":"labs/lab6-question.html#files","title":"Files","text":"<p>The following functional interfaces are already provided: - <code>cs2030s.fp.Combiner</code> - <code>cs2030s.fp.Transformer</code> - <code>cs2030s.fp.BooleanCondition</code> - <code>cs2030s.fp.Producer</code></p> <p>Copy your implementation of <code>cs2030s.fp.Maybe</code> (as well as the interface <code>cs2030s.fp.Consumer</code>) from Lab 5 over before you get started with Lab 6.  A skeleton for <code>Lazy&lt;T&gt;</code> as well as a wrongly-implemented copy of <code>LazyList.java</code> is provided.</p> <p>The files <code>Test1.java</code>, <code>Test2.java</code>, etc., as well as <code>CS2030STest.java</code>, are provided for testing.  You can edit them to add your test cases, but they will not be submitted.</p>"},{"location":"labs/lab6-question.html#documenting-your-code","title":"Documenting Your Code","text":"<p>Now that we are beginning to build our own package that others can use, we should start to produce documentation on our code.</p> <p>From Lab 6 onwards, you are required to document your classes and methods with Javadoc comments. You have seen examples from the skeleton code in Lab 1 given earlier. For more details, see the JavaDoc guide. The checkstyle tool now checks for JavaDoc-related style as well.</p> <p>For Lab 6, you should write javadoc documentation for all your methods in <code>Lazy.java</code>.  Documenting the code your wrote previously for Lab 5 is encouraged but optional.</p>"},{"location":"labs/lab6-question.html#lazy","title":"Lazy","text":"<p>Programming languages such as Scala support lazy values, where the expression that produces a lazy value is not evaluated until the value is needed.  Lazy value is useful for cases where producing the value is expensive, but the value might not eventually be used.  Java, however, does not provide a similar abstraction.  So, you are going to build one.</p> <p>This task is divided into several stages.  You are highly encouraged to read through all the stages to see how the different levels are related.</p> <p>You are required to design a single <code>Lazy</code> class as part of the <code>cs2030s.fp</code> package with two fields.  You are not allowed to add additional fields to <code>Lazy</code>.</p> <pre><code>public class Lazy&lt;T&gt; {\n  private Producer&lt;? extends T&gt; producer;\n  private Maybe&lt;T&gt; value;\n\n   :\n}\n</code></pre> <p>Take note of the following constraints:</p> <ul> <li>Avoid using the protected <code>Maybe::get</code> method and avoid access the classes <code>Maybe.Some&lt;T&gt;</code> or <code>Maybe.None</code> directly.</li> <li>Since <code>Maybe</code> has internalized <code>if-else</code> checks for whether the value is there or not, you must not use any form of conditional statements to compare if <code>value</code> contains something or not.</li> <li>You are not allowed to use any raw types.</li> <li>You don't need any <code>@SuppressWarnings</code> for this lab, but if you do, it must be used responsibly.</li> </ul>"},{"location":"labs/lab6-question.html#the-basics-of-being-lazy","title":"The Basics of Being Lazy","text":"<p>Define a generic <code>Lazy</code> class to encapsulate a value with the following operations:</p> <ul> <li>static <code>of(T v)</code> method that initializes the <code>Lazy</code> object with the given value.</li> <li>static <code>of(Producer&lt;T&gt; s)</code> method that takes in a producer that produces the value when needed.</li> <li><code>get()</code> method that is called when the value is needed.  If the value is already available, return that value; otherwise, compute the value and return it.  The computation should only be done once for the same value.</li> <li><code>toString()</code>: returns <code>\"?\"</code> if the value is not yet available; returns the string representation of the value otherwise.</li> </ul> <p>Note that for our class to be immutable and to make the memorization of the value transparent, <code>toString</code> should call <code>get()</code> and should never return <code>\"?\"</code>.  We break the rules of immutability and encapsulation here, just so that it is easier to debug and test the laziness of your implementation.</p> <p>Hint: You may find the method <code>valueOf</code> from the class <code>String</code> useful.</p> <pre><code>jshell&gt; import cs2030s.fp.Producer\njshell&gt; import cs2030s.fp.Lazy\n\njshell&gt; Lazy&lt;Integer&gt; eight = Lazy.of(8)\njshell&gt; eight\neight ==&gt; 8\njshell&gt; eight.get()\n$.. ==&gt; 8\n\njshell&gt; Producer&lt;String&gt; s = () -&gt; \"hello\"\njshell&gt; Lazy&lt;Object&gt; hello = Lazy.of(s)\njshell&gt; Lazy&lt;String&gt; hello = Lazy.of(s)\njshell&gt; hello\nhello ==&gt; ?\njshell&gt; hello.get()\n$.. ==&gt; \"hello\"\n\njshell&gt; s = () -&gt; { System.out.println(\"world!\"); return \"hello\"; }\njshell&gt; Lazy&lt;String&gt; hello = Lazy.of(s)\njshell&gt; hello\nhello ==&gt; ?\njshell&gt; hello.get()\nworld!\n$.. ==&gt; \"hello\"\n\njshell&gt; // check that \"world!\" should not be printed again.\njshell&gt; hello.get()\n$.. ==&gt; \"hello\"\n\njshell&gt; Random rng = new Random(1)\njshell&gt; Producer&lt;Integer&gt; r = () -&gt; rng.nextInt()\njshell&gt; Lazy&lt;Integer&gt; random = Lazy.of(r)\n\njshell&gt; // check that random value should not be available\njshell&gt; random\nrandom ==&gt; ?\n\njshell&gt; // check that random value is obtained only once\njshell&gt; random.get().equals(random.get())\n$.. ==&gt; true\n\njshell&gt; // should handle null\njshell&gt; Lazy&lt;Object&gt; n = Lazy.of((Object)null)\njshell&gt; n.toString()\n$.. ==&gt; \"null\"\njshell&gt; n.get()\n$.. ==&gt; null\n\njshell&gt; Lazy&lt;Integer&gt; n = Lazy.of((Producer&lt;Integer&gt;)() -&gt; null)\njshell&gt; n\nn ==&gt; ?\njshell&gt; n.get()\n$.. ==&gt; null\n</code></pre> <p>You can test your code by running the <code>Test1.java</code> provided.  The following should compile without errors or warnings.  Make sure your code follows the CS2030S Java style and can generate the documentation without error. <pre><code>$ javac cs2030s/fp/*java\n$ javac -Xlint:rawtypes Test1.java\n$ java Test1\n$ java -jar ~cs2030s/bin/checkstyle.jar -c ~cs2030s/bin/cs2030_checks.xml Lazy.java\n$ javadoc -quiet -private -d docs cs2030s/fp/Lazy.java\n</code></pre></p>"},{"location":"labs/lab6-question.html#map-and-flatmap","title":"Map and FlatMap","text":"<p>Now let's add the <code>map</code> and <code>flatMap</code> method.  Remember that <code>Lazy</code> should not evaluate anything until <code>get()</code> is called, so the function <code>f</code> passed into <code>Lazy</code> through <code>map</code> and <code>flatMap</code> should not be evaluated until <code>get()</code> is called.  Furthermore, they should be evaluated once.  That result from <code>map</code> and <code>flatMap</code>, once evaluated, should be cached (also called memoized), so that function must not be called again.</p> <pre><code>jshell&gt; import cs2030s.fp.Lazy\njshell&gt; import cs2030s.fp.Producer\njshell&gt; import cs2030s.fp.Transformer\n\njshell&gt; Producer&lt;String&gt; s = () -&gt; \"123456\"\njshell&gt; Lazy&lt;String&gt; lazy = Lazy.of(s)\njshell&gt; lazy.map(str -&gt; str.substring(0, 1))\n$.. ==&gt; ?\njshell&gt; lazy\n$.. ==&gt; ?\njshell&gt; lazy.map(str -&gt; str.substring(0, 1)).get()\n$.. ==&gt; \"1\"\njshell&gt; lazy.get()\n$.. ==&gt; \"123456\"\n\njshell&gt; Transformer&lt;String, String&gt; substr = str -&gt; {\n   ...&gt;   System.out.println(\"substring\");\n   ...&gt;   return str.substring(0, 1);\n   ...&gt; }\njshell&gt; lazy = lazy.map(substr)\njshell&gt; lazy.get()\nsubstring\n$.. ==&gt; \"1\"\njshell&gt; lazy.get()\n$.. ==&gt; \"1\"\n\njshell&gt; Lazy&lt;Integer&gt; lazy = Lazy.of(10)\njshell&gt; lazy = lazy.map(i -&gt; i + 1)\njshell&gt; lazy = lazy.flatMap(j -&gt; Lazy.of(j + 3))\njshell&gt; lazy\nlazy ==&gt; ?\njshell&gt; lazy.get()\n$.. ==&gt; 14\njshell&gt; lazy\nlazy ==&gt; 14\n\njshell&gt; Transformer&lt;Object, Integer&gt; hash = x -&gt; x.hashCode();\njshell&gt; Lazy&lt;Number&gt; lazy = Lazy.&lt;String&gt;of(\"sunday\").map(hash);\njshell&gt; Transformer&lt;Object, Lazy&lt;Integer&gt;&gt; hash = x -&gt; Lazy.&lt;Integer&gt;of(x.hashCode());\njshell&gt; Lazy&lt;Number&gt; lazy = Lazy.&lt;String&gt;of(\"sunday\").flatMap(hash);\n</code></pre> <p>You can test your code by running the <code>Test2.java</code> provided.  The following should compile without errors or warnings.  Make sure your code follows the CS2030S Java style and can generate the documentation without error. <pre><code>$ javac cs2030s/fp/*java\n$ javac -Xlint:rawtypes Test2.java\n$ java Test2\n$ java -jar ~cs2030s/bin/checkstyle.jar -c ~cs2030s/bin/cs2030_checks.xml Lazy.java\n$ javadoc -quiet -private -d docs cs2030s/fp/Lazy.java\n</code></pre></p>"},{"location":"labs/lab6-question.html#filter","title":"Filter","text":"<p>Write a <code>filter</code> method, which takes in a <code>BooleanCondition</code> and lazily tests if the value passes the test or not.  Returns a <code>Lazy&lt;Boolean&gt;</code> object.  The <code>BooleanCondition</code> must be executed at most once.</p> <p>Then write an <code>equals</code>, which overrides the <code>equals</code> method in the <code>Object</code> class.  <code>equals</code> is an eager operation that causes the values to be evaluated (if not already cached).  <code>equals</code> should return true only both objects being compared are <code>Lazy</code> and the value contains within are equals (according to their <code>equals()</code> methods).</p> <pre><code>jshell&gt; import cs2030s.fp.Lazy\n\njshell&gt; Lazy&lt;Integer&gt; fifty = Lazy.of(50)\njshell&gt; Lazy&lt;Boolean&gt; even = fifty.filter(i -&gt; i % 2 == 0)\njshell&gt; even\neven ==&gt; ?\njshell&gt; even.get()\n$.. ==&gt; true\njshell&gt; even\neven ==&gt; true\n\njshell&gt; // equals\njshell&gt; fifty.equals(Lazy.of(5).map(i -&gt; i * 10))\n$.. ==&gt; true\njshell&gt; fifty.equals(50)\n$.. ==&gt; false\njshell&gt; fifty.equals(Lazy.of(\"50\"))\n$.. ==&gt; false\njshell&gt; even.equals(Lazy.of(true))\n$.. ==&gt; true\n\njshell&gt; BooleanCondition&lt;String&gt; isHello = s -&gt; {\n   ...&gt;   System.out.println(s);\n   ...&gt;   return s.equals(\"hello\");\n   ...&gt; }\njshell&gt; Lazy&lt;Boolean&gt; same = Lazy.of(\"hi\").filter(isHello)\njshell&gt; same\nsame ==&gt; ?\njshell&gt; same.get()\nhi\n$.. ==&gt; false\njshell&gt; same.get()\n$.. ==&gt; false\n\njshell&gt; BooleanCondition&lt;Object&gt; alwaysFalse = s -&gt; false\njshell&gt; Lazy&lt;Boolean&gt; same = Lazy.&lt;String&gt;of(\"hi\").filter(alwaysFalse)\n</code></pre> <p>You can test your code by running the <code>Test3.java</code> provided.  The following should compile without errors or warnings.  Make sure your code follows the CS2030S Java style and can generate the documentation without error. <pre><code>$ javac cs2030s/fp/*java\n$ javac -Xlint:rawtypes Test3.java\n$ java Test3\n$ java -jar ~cs2030s/bin/checkstyle.jar -c ~cs2030s/bin/cs2030_checks.xml *.java\n$ javadoc -quiet -private -d docs cs2030s/fp/Lazy.java\n</code></pre></p>"},{"location":"labs/lab6-question.html#combine","title":"Combine","text":"<p>We have provided an interface called <code>Combiner&lt;S, T, R&gt;</code> in <code>cs2030s.fp</code>, with a single <code>combine</code> method to combine two values, of type <code>S</code> and <code>T</code> respectively, into a result of type <code>R</code>.</p> <p>Add a method called <code>combine</code> into <code>Lazy</code>.  The <code>combine</code> method takes in another <code>Lazy</code> object and a <code>Combiner</code> implementation to lazily combine the two <code>Lazy</code> objects (which may contain values of different types) and return a new <code>Lazy</code> object.</p> <pre><code>jshell&gt; import cs2030s.fp.Lazy\njshell&gt; Lazy&lt;Integer&gt; five, ten, fifty, hundred\njshell&gt; ten = Lazy.of(10)\njshell&gt; five = Lazy.of(5)\njshell&gt; // combine (same types)\njshell&gt; Combiner&lt;Integer, Integer, Integer&gt; add = (x, y) -&gt; {\n   ...&gt;   System.out.println(\"combine\");\n   ...&gt;   return x + y;\n   ...&gt; }\njshell&gt; fifty = five.combine(ten, (x, y) -&gt; x * y)\njshell&gt; fifty\nfifty ==&gt; ?\njshell&gt; hundred = fifty.combine(fifty, add)\njshell&gt; hundred\nhundred ==&gt; ?\njshell&gt; // combine (different types)\njshell&gt; Combiner&lt;Integer,Double,String&gt; f = (x, y) -&gt; Integer.toString(x) + \" \" + Double.toString(y)\njshell&gt; Lazy&lt;String&gt; s = Lazy.of(10).combine(Lazy.of(0.01), f)\njshell&gt; s\ns ==&gt; ?\njshell&gt; s.get()\n$.. ==&gt; \"10 0.01\"\n\njshell&gt; Combiner&lt;Object,Object,Integer&gt; f = (x, y) -&gt; x.hashCode() + y.hashCode()\njshell&gt; Lazy&lt;Number&gt; n = Lazy.&lt;String&gt;of(\"hello\").combine(Lazy.&lt;Integer&gt;of(123), f);\n</code></pre> <p>You can test your code by running the <code>Test4.java</code> provided.  The following should compile without errors or warnings.  Make sure your code follows the CS2030S Java style and can generate the documentation without error. <pre><code>$ javac cs2030s/fp/*java\n$ javac -Xlint:rawtypes Test4.java\n$ java Test4\n$ java -jar ~cs2030s/bin/checkstyle.jar -c ~cs2030s/bin/cs2030_checks.xml Lazy.java\n$ javadoc -quiet -private -d docs cs2030s/fp/Lazy.java\n</code></pre></p>"},{"location":"labs/lab6-question.html#lazy-list","title":"Lazy List","text":"<p>The <code>Lazy</code> class can be used to build a lazy-evaluated list.</p> <p>Consider the class <code>EagerList</code> below.  Given <code>n</code>, the size of the list, <code>seed</code>, the initial value, and <code>f</code>, an operation, we can generate an <code>EagerList</code> as [seed, f(seed), f(f(seed)), f(f(f(seed))), ... ], up to <code>n</code> elements.</p> <p>We can then use the method <code>get(i)</code> to find the i-th element in this list, or <code>indexOf(obj)</code> to find the index of <code>obj</code> in the list.</p> <pre><code>class EagerList&lt;T&gt; {\nprivate List&lt;T&gt; list;\nprivate EagerList(List&lt;T&gt; list) {\nthis.list = list;\n}\n\npublic static &lt;T&gt; EagerList&lt;T&gt; generate(int n, T seed, Transformer&lt;T, T&gt; f) {\nEagerList&lt;T&gt; eagerList = new EagerList&lt;&gt;(new ArrayList&lt;&gt;());\nT curr = seed;\nfor (int i = 0; i &lt; n; i++ ) {\neagerList.list.add(curr);\ncurr = f.transform(curr);\n}\nreturn eagerList;\n}\n\npublic T get(int i) {\nreturn this.list.get(i);\n}\n\npublic int indexOf(T v) {\nreturn this.list.indexOf(v);\n}\n\n@Override\npublic String toString() {\nreturn this.list.toString();\n}\n}\n</code></pre> <p>But suppose <code>f()</code> is an expensive computation, and we ended up just needing to <code>get(k)</code> where <code>k</code> is much smaller than <code>N</code>, then, we would have wasted our time computing all the remaining elements in the list!  Similarly, if the <code>obj</code> that we want to find using <code>indexOf</code> is near the beginning of the list, there is no need to compute the remaining elements of the list.</p> <p>Change the <code>EagerList</code> class into a new class called <code>LazyList</code>, making use of the <code>Lazy</code> class you have constructed, so that <code>get()</code> and <code>indexOf()</code> causes evaluation of <code>f()</code> only as many times as necessary.  Hint: you only need to make minimal changes.  Neither a new field nor a new loop is necessary.</p> <pre><code>jshell&gt; /open LazyList.java\njshell&gt; Transformer&lt;Integer, Integer&gt; incr = x -&gt; {\n   ...&gt;   System.out.println(\"x + 1\");\n   ...&gt;   return x + 1;\n   ...&gt; }\njshell&gt; LazyList&lt;Integer&gt; l = l.generate(1000000, 0, incr);\njshell&gt; l\nl ==&gt; [0, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,  ...\njshell&gt; l.indexOf(4);\nx + 1\nx + 1\nx + 1\nx + 1\n$9 ==&gt; 4\njshell&gt; l\nl ==&gt; [0, 1, 2, 3, 4, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ...\njshell&gt; l.get(8)\nx + 1\nx + 1\nx + 1\nx + 1\n$11 ==&gt; 8\njshell&gt; l\nl ==&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ...\njshell&gt; l.get(2)\n$13 ==&gt; 2\njshell&gt; l\nl ==&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ...\njshell&gt; l.indexOf(4);\n$15 ==&gt; 4\njshell&gt; l\nl ==&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ...\njshell&gt;\n</code></pre> <p>You can test your code by running the <code>Test5.java</code> provided.  The following should compile without errors or warnings.  Make sure your code follows the CS2030S Java style and can generate the documentation without error. <pre><code>$ javac cs2030s/fp/*java\n$ javac -Xlint:rawtypes Test5.java\n$ java Test5\n$ java -jar ~cs2030s/bin/checkstyle.jar -c ~cs2030s/bin/cs2030_checks.xml LazyList.java\n$ javadoc -quiet -private -d docs LazyList.java\n</code></pre></p>"},{"location":"labs/lab6-question.html#following-cs2030s-style-guide","title":"Following CS2030S Style Guide","text":"<p>You should make sure that your code follows the given Java style guide and the given Java documentation guide</p>"},{"location":"labs/lab6-question.html#grading","title":"Grading","text":"<p>This lab is worth 12 marks and contributes 3% to your final grade.  The marking scheme is as follows:</p> <ul> <li>Documentation: 2 marks</li> <li>Everything Else: 10 marks</li> </ul> <p>We will deduct 1 mark for each unnecessary use of <code>@SuppressWarnings</code> and each raw type.  <code>@SuppressWarnings</code> should be used appropriately and not abused to remove compilation warnings.</p> <p>Note that style marks are no longer awarded.  You should know how to follow the prescribed Java style by now.  We will deduct up to 2 marks if there are serious violations of styles.</p>"},{"location":"labs/lab6-question.html#warning","title":"WARNING \u2757\ufe0f","text":"<p>We would like to remind you of the following:</p> <ul> <li>Use only the <code>submit-labX</code> script to submit your lab.  Failure to do so will lead to a 50% penalty on your lab grade.</li> <li>The grace period for getting used to the submission system is over.  We will not waive the late penalty if students fail to submit properly.  Please check your repo after running <code>submit-labX</code> to ensure that your files have been added correctly. The URL to your repo is given after you run <code>submit-labX</code>.</li> </ul>"},{"location":"labs/lab7-question.html","title":"Lab 7: InfiniteList","text":"<ul> <li>Deadline: 4 April 2023, Tuesday, 23:59, SST</li> <li>Marks: 24</li> <li>Weightage: 6%</li> </ul>"},{"location":"labs/lab7-question.html#prerequisite","title":"Prerequisite","text":"<ul> <li>Caught up to Unit 34 of Lecture Notes</li> <li>Completed Lab 6</li> </ul>"},{"location":"labs/lab7-question.html#files","title":"Files","text":"<p>The following functional interfaces are already provided:</p> <ul> <li><code>cs2030s.fp.Combiner</code></li> <li><code>cs2030s.fp.Transformer</code></li> <li><code>cs2030s.fp.BooleanCondition</code></li> <li><code>cs2030s.fp.Producer</code></li> <li><code>cs2030s.fp.Consumer</code></li> </ul> <p>Copy your implementation of <code>cs2030s.fp.Maybe</code> and <code>cs2030s.fp.Lazy</code> over before you start Lab 7.  A skeleton for for <code>InfiniteList&lt;T&gt;</code> is provided.</p> <p>You may add a new method <code>consumeWith</code> to <code>Maybe&lt;T&gt;</code> to help with solving this lab. <pre><code>  /**\n   * If the value within this Maybe is missing, do nothing. \n   * Otherwise, consume the value with the given consumer.\n   *\n   * @param consumer The consumer to consume the value \n   */\npublic abstract void consumeWith(Consumer&lt;? super T&gt; consumer);\n</code></pre></p> <p>The files <code>Test1.java</code>, <code>Test2.java</code>, etc., as well as <code>CS2030STest.java</code>, are provided for testing.  You can edit them to add your test cases, but they will not be submitted.</p>"},{"location":"labs/lab7-question.html#documenting-your-code","title":"Documenting Your Code","text":"<p>Write javadoc documentation for all your methods in <code>InfiniteList.java</code>.  Documenting the code you wrote previously for Lab 6 is encouraged but optional.</p>"},{"location":"labs/lab7-question.html#infinitelist","title":"InfiniteList","text":"<p>You have seen in class a poorly implemented version of <code>InfiniteList</code>.  Recall that there are two issues: (i) It uses <code>null</code> to represent a missing value.  This design prevents us from having <code>null</code> as elements in the list; (ii) Produced values are not memoized.  This design results in repeated computation of the same value.</p> <p>Fortunately, you have built <code>Maybe&lt;T&gt;</code> in Lab 5, which will solve (i), and <code>Lazy&lt;T&gt;</code> in Lab 6, which will solve (ii).  We will use them to build a better version of <code>InfiniteList</code> here.</p> <p>You are required to implement a single <code>InfiniteList</code> class as part of the <code>cs2030s.fp</code> package with only two instance fields.  No other instance fields are needed and allowed.  You may add one class field (see below).</p> <pre><code>public class InfiniteList&lt;T&gt; {\nprivate Lazy&lt;Maybe&lt;T&gt;&gt; head;\nprivate Lazy&lt;InfiniteList&lt;T&gt;&gt; tail;\n}\n</code></pre> <p>Take note of the following constraints:</p> <ul> <li>You are not allowed to use any raw types.</li> <li><code>@SuppressWarnings</code> must be used responsibly.</li> <li>You must not use <code>java.util.stream.Stream</code> to solve this lab.</li> <li>Where possible, use the methods provided by <code>Maybe&lt;T&gt;</code> to handle the conditions where the value is there or not there, instead of using <code>if-else</code>.</li> </ul>"},{"location":"labs/lab7-question.html#the-basics","title":"The Basics","text":"<p>Write the static <code>generate</code> and <code>iterate</code> methods that create an <code>InfiniteList</code>.</p> <p>To access the elements of the list, provide the <code>head</code> and <code>tail</code> method that produces the head and tail of the infinite list.</p> <p>To help with debugging, a <code>toString</code> method has been provided for you.</p> <pre><code>jshell&gt; import cs2030s.fp.InfiniteList;\njshell&gt; import cs2030s.fp.Transformer;\njshell&gt; import cs2030s.fp.Producer;\n\njshell&gt; InfiniteList.generate(() -&gt; 1)\n$.. ==&gt; [? ?]\njshell&gt; InfiniteList.generate(() -&gt; 1).head()\n$.. ==&gt; 1\njshell&gt; InfiniteList.generate(() -&gt; null).tail().head()\n$.. ==&gt; null\njshell&gt; InfiniteList.iterate(\"A\", x -&gt; x + \"Z\").head()\n$.. ==&gt; \"A\"\njshell&gt; InfiniteList.iterate(\"A\", x -&gt; x + \"Z\").tail().head()\n$.. ==&gt; \"AZ\"\njshell&gt; InfiniteList.iterate(\"A\", x -&gt; x + \"Z\").tail().tail().head()\n$.. ==&gt; \"AZZ\"\n\njshell&gt; Transformer&lt;Integer, Integer&gt; incr = x -&gt; {\n...&gt;     System.out.println(\"    iterate: \" + x);\n...&gt;     return x + 1;\n...&gt; }\njshell&gt; InfiniteList&lt;Integer&gt; numbers = InfiniteList.iterate(1, incr)\njshell&gt; numbers\nnumbers ==&gt; [[1] ?]\n\njshell&gt; numbers.head() $.. ==&gt; 1\njshell&gt; numbers\nnumbers ==&gt; [[1] ?]\n\njshell&gt; numbers.tail().head() iterate: 1\n$.. ==&gt; 2\njshell&gt; numbers\nnumbers ==&gt; [[1] [[2] ?]]\n\njshell&gt; numbers.tail().head() $.. ==&gt; 2\njshell&gt; numbers\nnumbers ==&gt; [[1] [[2] ?]]\n\njshell&gt; numbers.tail().tail().head() iterate: 2\n$.. ==&gt; 3\njshell&gt; numbers\nnumbers ==&gt; [[1] [[2] [[3] ?]]]\n\njshell&gt; numbers.tail().head() $.. ==&gt; 2\njshell&gt; numbers\nnumbers ==&gt; [[1] [[2] [[3] ?]]]\n\njshell&gt; Producer&lt;Integer&gt; zero = () -&gt; {\n...&gt;     System.out.println(\"    generate: 0\");\n...&gt;     return 0;\n...&gt; }\njshell&gt; InfiniteList&lt;Integer&gt; zeros = InfiniteList.generate(zero)\njshell&gt; zeros\nzeros ==&gt; [? ?]\n\njshell&gt; zeros.head() generate: 0\n$.. ==&gt; 0\njshell&gt; zeros\nzeros ==&gt; [[0] ?]\n\njshell&gt; zeros.tail().head() generate: 0\n$.. ==&gt; 0\njshell&gt; zeros\nzeros ==&gt; [[0] [[0] ?]]\n\njshell&gt; zeros.head()\n$.. ==&gt; 0\njshell&gt; zeros\nzeros ==&gt; [[0] [[0] ?]]\n\njshell&gt; zeros.tail().head()\n$.. ==&gt; 0\njshell&gt; zeros\nzeros ==&gt; [[0] [[0] ?]]\n\njshell&gt; zeros.tail().tail().head() generate: 0\n$.. ==&gt; 0\njshell&gt; zeros\nzeros ==&gt; [[0] [[0] [[0] ?]]]\n\njshell&gt; zeros.tail().head()\n$.. ==&gt; 0\njshell&gt; zeros\nzeros ==&gt; [[0] [[0] [[0] ?]]]\n</code></pre> <p>You can test your code by running the <code>Test1.java</code> provided.  The following should compile without errors or warnings.  Make sure your code follows the CS2030S Java style and can generate the documentation without error. <pre><code>$ javac -Xlint:rawtypes cs2030s/fp/*java\n$ javac -Xlint:rawtypes Test1.java\n$ java Test1\n$ java -jar ~cs2030s/bin/checkstyle.jar -c ~cs2030s/bin/cs2030_checks.xml cs2030s/fp/InfiniteList.java\n$ javadoc -quiet -private -d docs cs2030s/fp/InfiniteList.java\n</code></pre></p>"},{"location":"labs/lab7-question.html#map","title":"<code>map</code>","text":"<p>Now let's add the <code>map</code> method.  The <code>map</code> method (lazily) applies the given transformation to each element in the list and returns the resulting <code>InfiniteList</code>.</p> <pre><code>jshell&gt; import cs2030s.fp.InfiniteList;\njshell&gt; import cs2030s.fp.Transformer;\njshell&gt; import cs2030s.fp.Producer;\n\njshell&gt; InfiniteList.generate(() -&gt; 1).map(x -&gt; x * 2)\n$.. ==&gt; [? ?]\njshell&gt; InfiniteList.iterate(1, x -&gt; x + 1).map(x -&gt; x * 2)\n$.. ==&gt; [? ?]\njshell&gt; InfiniteList.generate(() -&gt; 1).map(x -&gt; x * 2).tail().head()\n$.. ==&gt; 2\njshell&gt; InfiniteList.iterate(1, x -&gt; x + 1).map(x -&gt; x * 2).head()\n$.. ==&gt; 2\njshell&gt; InfiniteList.iterate(1, x -&gt; x + 1).map(x -&gt; x * 2).tail().head()\n$.. ==&gt; 4\njshell&gt; InfiniteList.iterate(1, x -&gt; x + 1).map(x -&gt; x * 2).map(x -&gt; x - 1).head()\n$.. ==&gt; 1\njshell&gt; InfiniteList.iterate(1, x -&gt; x + 1).map(x -&gt; x * 2).map(x -&gt; x - 1).tail().head()\n$.. ==&gt; 3\njshell&gt; InfiniteList.iterate(1, x -&gt; x + 1).map(x -&gt; x % 2 == 0 ? null : x).tail().head()\n$.. ==&gt; null\n\njshell&gt; Producer&lt;Integer&gt; one = () -&gt; {\n...&gt;     System.out.println(\"    generate: 1\");\n...&gt;     return 1;\n...&gt; }\njshell&gt; Transformer&lt;Integer,Integer&gt; doubler = x -&gt; {\n...&gt;     System.out.println(\"    map x * 2: \" + x);\n...&gt;     return x * 2;\n...&gt; }\n\njshell&gt; InfiniteList.generate(one).map(doubler).tail().head()\ngenerate: 1\nmap x * 2: 1\ngenerate: 1\nmap x * 2: 1\n$.. ==&gt; 2\n\njshell&gt; InfiniteList&lt;Integer&gt; ones = InfiniteList.generate(one)\njshell&gt; InfiniteList&lt;Integer&gt; twos = ones.map(doubler)\njshell&gt; ones\nones ==&gt; [? ?]\njshell&gt; twos\ntwos ==&gt; [? ?]\n\njshell&gt; twos.tail().head()\ngenerate: 1\nmap x * 2: 1\ngenerate: 1\nmap x * 2: 1\n$.. ==&gt; 2\njshell&gt; ones\nones ==&gt; [[1] [[1] ?]]\njshell&gt; twos\ntwos ==&gt; [[2] [[2] ?]]\n\njshell&gt; twos.head()\n$.. ==&gt; 2\njshell&gt; twos.tail().head()\n$.. ==&gt; 2\n</code></pre> <p>You can test your code by running the <code>Test2.java</code> provided.  The following should compile without errors or warnings.  Make sure your code follows the CS2030S Java style and can generate the documentation without error.</p> <pre><code>$ javac -Xlint:rawtypes cs2030s/fp/*java\n$ javac -Xlint:rawtypes Test2.java\n$ java Test2\n$ java -jar ~cs2030s/bin/checkstyle.jar -c ~cs2030s/bin/cs2030_checks.xml cs2030s/fp/InfiniteList.java\n$ javadoc -quiet -private -d docs cs2030s/fp/InfiniteList.java\n</code></pre>"},{"location":"labs/lab7-question.html#filter","title":"<code>filter</code>","text":"<p>Add the <code>filter</code> method to filter out elements in the list that fail a given <code>BooleanCondition</code>.  <code>filter</code> should mark any filtered (i.e., removed) element as <code>Maybe.none()</code> instead of <code>null</code>.  The resulting (lazily) filtered <code>InfiniteList</code> is returned.</p> <pre><code>jshell&gt; import cs2030s.fp.BooleanCondition\njshell&gt; import cs2030s.fp.InfiniteList\njshell&gt; import cs2030s.fp.Transformer\n\njshell&gt; InfiniteList.generate(() -&gt; 1).filter(x -&gt; x % 2 == 0)\n$.. ==&gt; [? ?]\njshell&gt; InfiniteList.iterate(1, x -&gt; x + 1).filter(x -&gt; x % 2 == 0)\n$.. ==&gt; [? ?]\njshell&gt; InfiniteList.iterate(1, x -&gt; x + 1).filter(x -&gt; x % 2 == 0).head()\n$.. ==&gt; 2\njshell&gt; InfiniteList.iterate(1, x -&gt; x + 1).filter(x -&gt; x % 2 == 0).filter(x -&gt; x &gt; 4).head()\n$.. ==&gt; 6\n\njshell&gt; Transformer&lt;Integer, Integer&gt; incr = x -&gt; {\n...&gt;   System.out.println(\"    iterate: \" + x);\n...&gt;   return x + 1;\n...&gt; }\n\njshell&gt; BooleanCondition&lt;Integer&gt; isEven = x -&gt; {\n...&gt;   System.out.println(\"    filter x % 2 == 0: \" + x);\n...&gt;   return x % 2 == 0;\n...&gt; }\n\njshell&gt; InfiniteList.iterate(1, incr).filter(isEven).tail().head()\nfilter x % 2 == 0: 1\niterate: 1\nfilter x % 2 == 0: 2\niterate: 2\nfilter x % 2 == 0: 3\niterate: 3\nfilter x % 2 == 0: 4\n$.. ==&gt; 4\n\njshell&gt; InfiniteList&lt;Integer&gt; nums = InfiniteList.iterate(1, x -&gt; x + 1)\njshell&gt; InfiniteList&lt;Integer&gt; evens = nums.filter(x -&gt; x % 2 == 0)\n\njshell&gt; evens.tail().head()\n$.. ==&gt; 4\njshell&gt; nums.toString()\n$.. ==&gt; \"[[1] [[2] [[3] [[4] ?]]]]\"\njshell&gt; evens.toString()\n$.. ==&gt; \"[[] [[2] [[] [[4] ?]]]]\"\n\njshell&gt; nums.tail().head()\n$.. ==&gt; 2\njshell&gt; evens.tail().head()\n$.. ==&gt; 4\n\njshell&gt; BooleanCondition&lt;Integer&gt; moreThan5 = x -&gt; { ...&gt;   System.out.println(\"    filter x &gt; 5: \" + x);\n...&gt;   return x &gt; 5;\n...&gt; }\njshell&gt; BooleanCondition&lt;Integer&gt; isEven = x -&gt; { ...&gt;   System.out.println(\"    filter x % 2 == 0: \" + x);\n...&gt;   return x % 2 == 0;\n...&gt; }\njshell&gt; Transformer&lt;Integer, Integer&gt; doubler = x -&gt; {\n...&gt;   System.out.println(\"    map x * 2: \" + x);\n...&gt;   return x * 2;\n...&gt; }\n\njshell&gt; InfiniteList.iterate(1, incr).filter(moreThan5).filter(isEven).head()\nfilter x &gt; 5: 1\niterate: 1\nfilter x &gt; 5: 2\niterate: 2\nfilter x &gt; 5: 3\niterate: 3\nfilter x &gt; 5: 4\niterate: 4\nfilter x &gt; 5: 5\niterate: 5\nfilter x &gt; 5: 6\nfilter x % 2 == 0: 6\n$.. ==&gt; 6\njshell&gt; InfiniteList.iterate(1, incr).map(doubler).filter(moreThan5).filter(isEven).tail().head()\nmap x * 2: 1\nfilter x &gt; 5: 2\niterate: 1\nmap x * 2: 2\nfilter x &gt; 5: 4\niterate: 2\nmap x * 2: 3\nfilter x &gt; 5: 6\nfilter x % 2 == 0: 6\niterate: 3\nmap x * 2: 4\nfilter x &gt; 5: 8\nfilter x % 2 == 0: 8\n$.. ==&gt; 8\njshell&gt; InfiniteList.iterate(1, incr).filter(isEven).map(doubler).filter(moreThan5).head()\nfilter x % 2 == 0: 1\niterate: 1\nfilter x % 2 == 0: 2\nmap x * 2: 2\nfilter x &gt; 5: 4\niterate: 2\nfilter x % 2 == 0: 3\niterate: 3\nfilter x % 2 == 0: 4\nmap x * 2: 4\nfilter x &gt; 5: 8\n$.. ==&gt; 8\n</code></pre> <p>You can test your code by running the <code>Test3.java</code> provided.  The following should compile without errors or warnings.  Make sure your code follows the CS2030S Java style and can generate the documentation without error.</p> <pre><code>$ javac -Xlint:rawtypes cs2030s/fp/*java\n$ javac -Xlint:rawtypes Test3.java\n$ java Test3\n$ java -jar ~cs2030s/bin/checkstyle.jar -c ~cs2030s/bin/cs2030_checks.xml cs2030s/fp/InfiniteList.java\n$ javadoc -quiet -private -d docs cs2030s/fp/InfiniteList.java\n</code></pre>"},{"location":"labs/lab7-question.html#sentinel-and-issentinel","title":"<code>sentinel</code> and <code>isSentinel</code>","text":"<p>We now consider the situation where the list can be finite.  In this case, we need to mark the end of the list with a special tail (aka a sentinel).  Create a static nested class in <code>InfiniteList&lt;T&gt;</code> called <code>Sentinel</code> to represent a list that contains nothing and is used to mark the end of the list. You may add one final class field <code>SENTINEL</code> (similar to EMPTY from Lab 4 and NONE from Lab 5) in your <code>InfiniteList</code> to cache a single instance of the sentinel. Override the <code>toString</code> method so that a sentinel returns <code>\"-\"</code>.</p> <p>Provide a boolean <code>isSentinel</code> method that returns true if the list is an instance of <code>Sentinel</code> and returns false otherwise.  Note that <code>isSentinel</code> is a lazy operation and should not trigger the evaluation of the infinite list.</p> <p>Provide an <code>sentinel</code> method that returns a sentinel.</p> <pre><code>jshell&gt; import cs2030s.fp.BooleanCondition\njshell&gt; import cs2030s.fp.InfiniteList\njshell&gt; import cs2030s.fp.Transformer\njshell&gt; import cs2030s.fp.Producer\n\njshell&gt; InfiniteList.iterate(1, x -&gt; x + 1).isSentinel()\n$.. ==&gt; false\njshell&gt; InfiniteList.generate(() -&gt; 2).isSentinel()\n$.. ==&gt; false\njshell&gt; InfiniteList.generate(() -&gt; 2).filter(x -&gt; x % 3 == 0).isSentinel()\n$.. ==&gt; false\njshell&gt; InfiniteList.iterate(1, x -&gt; x + 1).map(x -&gt; 2).isSentinel()\n$.. ==&gt; false\njshell&gt; InfiniteList.iterate(1, x -&gt; x + 1).filter(x -&gt; x % 2 == 0).isSentinel()\n$.. ==&gt; false\n\njshell&gt; InfiniteList.sentinel()\n$.. ==&gt; -\njshell&gt; InfiniteList.sentinel().isSentinel()\n$.. ==&gt; true\njshell&gt; InfiniteList.sentinel().map(x -&gt; 2).isSentinel()\n$.. ==&gt; true\njshell&gt; InfiniteList.sentinel().filter(x -&gt; true).isSentinel()\n$.. ==&gt; true\njshell&gt; InfiniteList.sentinel().filter(x -&gt; false).isSentinel()\n$.. ==&gt; true\n</code></pre>"},{"location":"labs/lab7-question.html#limit-tolist","title":"<code>limit</code>, <code>toList</code>","text":"<p>Now that we have a way to terminate an infinite list into a finite list, write a <code>limit</code> method that takes in a value <code>n</code> and truncate the <code>InfiniteList&lt;T&gt;</code> to a finite list with at most <code>n</code> elements. Your <code>limit</code> method must not count elements that are filtered out by <code>filter</code>, if any.</p> <p>Now, provide a terminal <code>toList</code> method that collects the elements in the <code>InfiniteList&lt;T&gt;</code> into a <code>java.util.List</code>.  You may refer to <code>java.util.ArrayList</code> for methods that might be useful for implementing this method.</p> <pre><code>jshell&gt; import cs2030s.fp.BooleanCondition\njshell&gt; import cs2030s.fp.InfiniteList\njshell&gt; import cs2030s.fp.Transformer\njshell&gt; import cs2030s.fp.Producer\n\njshell&gt; InfiniteList.sentinel().limit(4).isSentinel()\n$.. ==&gt; true\njshell&gt; InfiniteList.iterate(1, x -&gt; x + 1).limit(0).isSentinel()\n$.. ==&gt; true\njshell&gt; InfiniteList.iterate(1, x -&gt; x + 1).limit(1).isSentinel()\n$.. ==&gt; false\njshell&gt; InfiniteList.iterate(1, x -&gt; x + 1).limit(10).isSentinel()\n$.. ==&gt; false\njshell&gt; InfiniteList.iterate(1, x -&gt; x + 1).limit(-1).isSentinel()\n$.. ==&gt; true\njshell&gt; InfiniteList.iterate(1, x -&gt; x + 1).limit(0).isSentinel()\n$.. ==&gt; true\njshell&gt; InfiniteList.iterate(1, x -&gt; x + 1).limit(1).isSentinel()\n$.. ==&gt; false\njshell&gt; InfiniteList.iterate(1, x -&gt; x + 1).limit(10).isSentinel()\n$.. ==&gt; false\n\njshell&gt; InfiniteList.generate(() -&gt; 1).limit(4)\n$.. ==&gt; [? ?]\njshell&gt; InfiniteList.iterate(1, x -&gt; x + 1).limit(4)\n$.. ==&gt; [[1] ?]\njshell&gt; InfiniteList.iterate(1, x -&gt; x + 1).limit(1).head()\n$.. ==&gt; 1\njshell&gt; InfiniteList.iterate(1, x -&gt; x + 1).limit(4).head()\n$.. ==&gt; 1\n\njshell&gt; &lt;T&gt; T run(Producer&lt;T&gt; p) {\n...&gt;   try {\n...&gt;     return p.produce();\n...&gt;   } catch (Exception e) {\n...&gt;     System.out.println(e);\n...&gt;     return null;\n...&gt;   }\n...&gt; }\n\njshell&gt; run(() -&gt; InfiniteList.iterate(1, x -&gt; x + 1).limit(1).tail().head());\njava.util.NoSuchElementException\n$.. ==&gt; null\njshell&gt; run(() -&gt; InfiniteList.iterate(1, x -&gt; x + 1).limit(0).head()); java.util.NoSuchElementException\n$.. ==&gt; null\njshell&gt; run(() -&gt; InfiniteList.iterate(1, x -&gt; x + 1).limit(4).tail().tail().head());\n$.. ==&gt; 3\njshell&gt; run(() -&gt; InfiniteList.iterate(1, x -&gt; x + 1).limit(4).limit(1).tail().head());\njava.util.NoSuchElementException\n$.. ==&gt; null\njshell&gt; run(() -&gt; InfiniteList.iterate(1, x -&gt; x + 1).limit(1).limit(4).tail().head());\njava.util.NoSuchElementException\n$.. ==&gt; null\n\njshell&gt; run(() -&gt; InfiniteList.iterate(1, x -&gt; x + 1).filter(x -&gt; x % 2 == 0).limit(0).head());\njava.util.NoSuchElementException\n$.. ==&gt; null\njshell&gt; run(() -&gt; InfiniteList.iterate(1, x -&gt; x + 1).filter(x -&gt; x % 2 == 0).limit(1).head());\n$.. ==&gt; 2\njshell&gt; run(() -&gt; InfiniteList.iterate(1, x -&gt; x + 1).limit(1).filter(x -&gt; x % 2 == 0).head());\njava.util.NoSuchElementException\n$.. ==&gt; null\njshell&gt; run(() -&gt; InfiniteList.iterate(1, x -&gt; x + 1).limit(2).filter(x -&gt; x % 2 == 0).head());\n$.. ==&gt; 2\n\njshell&gt; run(() -&gt; InfiniteList.iterate(\"A\", s -&gt; s + \"Z\").limit(2).map(s -&gt; s.length()).head());\n$.. ==&gt; 1\njshell&gt; run(() -&gt; InfiniteList.iterate(\"A\", s -&gt; s + \"Z\").limit(2).map(s -&gt; s.length()).tail().head());\n$.. ==&gt; 2\njshell&gt; run(() -&gt; InfiniteList.iterate(\"A\", s -&gt; s + \"Z\").limit(2).map(s -&gt; s.length()).tail().tail().head());\njava.util.NoSuchElementException\n$.. ==&gt; null\n\njshell&gt; run(() -&gt; InfiniteList.iterate(\"A\", s -&gt; s + \"Z\").map(s -&gt; s.length()).limit(2).head());\n$.. ==&gt; 1\njshell&gt; run(() -&gt; InfiniteList.iterate(\"A\", s -&gt; s + \"Z\").map(s -&gt; s.length()).limit(2).tail().head());\n$.. ==&gt; 2\njshell&gt; run(() -&gt; InfiniteList.iterate(\"A\", s -&gt; s + \"Z\").map(s -&gt; s.length()).limit(2).tail().tail().head());\njava.util.NoSuchElementException\n$.. ==&gt; null\n\njshell&gt; InfiniteList.&lt;String&gt;sentinel().toList()\n$.. ==&gt; []\njshell&gt; InfiniteList.iterate(\"A\", s -&gt; s + \"Z\").map(s -&gt; s.length()).limit(2).toList()\n$.. ==&gt; [1, 2]\njshell&gt; InfiniteList.iterate(\"A\", s -&gt; s + \"Z\").limit(2).map(s -&gt; s.length()).toList()\n$.. ==&gt; [1, 2]\njshell&gt; InfiniteList.iterate(1, x -&gt; x + 1).limit(2).filter(x -&gt; x % 2 == 0).toList()\n$.. ==&gt; [2]\njshell&gt; InfiniteList.iterate(1, x -&gt; x + 1).filter(x -&gt; x % 2 == 0).limit(2).toList()\n$.. ==&gt; [2, 4]\njshell&gt; InfiniteList.iterate(0, x -&gt; x + 1).filter(x -&gt; x &gt; 10).map(x -&gt; x.hashCode() % 30).filter(x -&gt; x &lt; 20).limit(5).toList()\n$.. ==&gt; [11, 12, 13, 14, 15]\njshell&gt; Random rng = new Random(1)\njshell&gt; InfiniteList.generate(() -&gt; rng.nextInt() % 100).filter(x -&gt; x &gt; 10).limit(4).toList()\n$.. ==&gt; [76, 95, 26, 69]\njshell&gt; InfiniteList.generate(() -&gt; null).limit(4).limit(1).toList()\n$.. ==&gt; [null]\njshell&gt; InfiniteList.generate(() -&gt; null).limit(1).limit(4).toList()\n$.. ==&gt; [null]\n</code></pre> <p>You can test your code by running the <code>Test4.java</code> provided.  The following should compile without errors or warnings.  Make sure your code follows the CS2030S Java style and can generate the documentation without error.</p> <pre><code>$ javac -Xlint:rawtypes cs2030s/fp/*java\n$ javac -Xlint:rawtypes Test4.java\n$ java Test4\n$ java -jar ~cs2030s/bin/checkstyle.jar -c ~cs2030s/bin/cs2030_checks.xml cs2030s/fp/InfiniteList.java\n$ javadoc -quiet -private -d docs cs2030s/fp/InfiniteList.java\n</code></pre>"},{"location":"labs/lab7-question.html#takewhile","title":"<code>takeWhile</code>","text":"<p>Now, implement the <code>takeWhile</code> method.  The method takes in a <code>BooleanCondition&lt;T&gt;</code>, and truncates the list as soon as it finds an element that evaluates the condition to false.</p> <p>Just like <code>limit</code>, the <code>takeWhile</code> method should ignore elements that have been filtered out by <code>filter</code>.</p> <pre><code>jshell&gt; import cs2030s.fp.InfiniteList;\njshell&gt; import cs2030s.fp.Transformer;\njshell&gt; import cs2030s.fp.Producer;\njshell&gt; import cs2030s.fp.BooleanCondition;\n\njshell&gt; Transformer&lt;Integer, Integer&gt; incr = x -&gt; { ...&gt;   System.out.println(\"    iterate: \" + x);\n...&gt;   return x + 1;\n...&gt; };\njshell&gt; BooleanCondition&lt;Integer&gt; lessThan0 = x -&gt; { ...&gt;   System.out.println(\"    takeWhile x &lt; 0: \" + x);\n...&gt;   return x &lt; 0;\n...&gt; };\njshell&gt; BooleanCondition&lt;Integer&gt; lessThan2 = x -&gt; { ...&gt;   System.out.println(\"    takeWhile x &lt; 2: \" + x);\n...&gt;   return x &lt; 2;\n...&gt; };\njshell&gt; BooleanCondition&lt;Integer&gt; lessThan5 = x -&gt; { ...&gt;   System.out.println(\"    takeWhile x &lt; 5: \" + x);\n...&gt;   return x &lt; 5;\n...&gt; };\njshell&gt; BooleanCondition&lt;Integer&gt; lessThan10 = x -&gt; { ...&gt;   System.out.println(\"    takeWhile x &lt; 10: \" + x);\n...&gt;   return x &lt; 10;\n...&gt; };\njshell&gt; BooleanCondition&lt;Integer&gt; isEven = x -&gt; { ...&gt;   System.out.println(\"    filter x % 2 == 0: \" + x);\n...&gt;   return x % 2 == 0;\n...&gt; };\n\njshell&gt; &lt;T&gt; T run(Producer&lt;T&gt; p) {\n...&gt;   try {\n...&gt;     return p.produce();\n...&gt;   } catch (Exception e) {\n...&gt;     System.out.println(e);\n...&gt;     return null;\n...&gt;   }\n...&gt; }\n\njshell&gt; InfiniteList.&lt;Integer&gt;sentinel().takeWhile(lessThan0).isSentinel()\n$.. ==&gt; true\njshell&gt; InfiniteList.iterate(1, incr).takeWhile(lessThan0).isSentinel()\n$.. ==&gt; false\njshell&gt; InfiniteList.iterate(1, incr).takeWhile(lessThan2).isSentinel()\n$.. ==&gt; false\njshell&gt; InfiniteList.iterate(1, incr).takeWhile(lessThan5).takeWhile(lessThan2).toList()\ntakeWhile x &lt; 5: 1\ntakeWhile x &lt; 2: 1\niterate: 1\ntakeWhile x &lt; 5: 2\ntakeWhile x &lt; 2: 2\n$.. ==&gt; [1]\njshell&gt; InfiniteList.iterate(1, incr).filter(isEven).takeWhile(lessThan10).toList()\nfilter x % 2 == 0: 1\niterate: 1\nfilter x % 2 == 0: 2\ntakeWhile x &lt; 10: 2\niterate: 2\nfilter x % 2 == 0: 3\niterate: 3\nfilter x % 2 == 0: 4\ntakeWhile x &lt; 10: 4\niterate: 4\nfilter x % 2 == 0: 5\niterate: 5\nfilter x % 2 == 0: 6\ntakeWhile x &lt; 10: 6\niterate: 6\nfilter x % 2 == 0: 7\niterate: 7\nfilter x % 2 == 0: 8\ntakeWhile x &lt; 10: 8\niterate: 8\nfilter x % 2 == 0: 9\niterate: 9\nfilter x % 2 == 0: 10\ntakeWhile x &lt; 10: 10\n$.. ==&gt; [2, 4, 6, 8]\n\njshell&gt; run(() -&gt; InfiniteList.generate(() -&gt; 2).takeWhile(lessThan0));\n$.. ==&gt; [? ?]\njshell&gt; run(() -&gt; InfiniteList.iterate(1, incr).takeWhile(lessThan0));\n$.. ==&gt; [? ?]\njshell&gt; run(() -&gt; InfiniteList.iterate(1, incr).takeWhile(lessThan0).head());\ntakeWhile x &lt; 0: 1\njava.util.NoSuchElementException\n$.. ==&gt; null\njshell&gt; run(() -&gt; InfiniteList.iterate(1, incr).takeWhile(lessThan2).head());\ntakeWhile x &lt; 2: 1\n$.. ==&gt; 1\njshell&gt; run(() -&gt; InfiniteList.iterate(1, incr).takeWhile(lessThan2).tail().head());\ntakeWhile x &lt; 2: 1\niterate: 1\ntakeWhile x &lt; 2: 2\njava.util.NoSuchElementException\n$.. ==&gt; null\njshell&gt; run(() -&gt; InfiniteList.iterate(1, incr).takeWhile(lessThan2).takeWhile(lessThan0).head());\ntakeWhile x &lt; 2: 1\ntakeWhile x &lt; 0: 1\njava.util.NoSuchElementException\n$.. ==&gt; null\njshell&gt; run(() -&gt; InfiniteList.iterate(1, incr).takeWhile(lessThan0).takeWhile(lessThan2).head());\ntakeWhile x &lt; 0: 1\njava.util.NoSuchElementException\n$.. ==&gt; null\njshell&gt; run(() -&gt; InfiniteList.iterate(1, incr).takeWhile(lessThan5).takeWhile(lessThan2).tail().head());\ntakeWhile x &lt; 5: 1\ntakeWhile x &lt; 2: 1\niterate: 1\ntakeWhile x &lt; 5: 2\ntakeWhile x &lt; 2: 2\njava.util.NoSuchElementException\n$.. ==&gt; null\njshell&gt; run(() -&gt; InfiniteList.iterate(1, incr).filter(isEven).takeWhile(lessThan10).head());\nfilter x % 2 == 0: 1\niterate: 1\nfilter x % 2 == 0: 2\ntakeWhile x &lt; 10: 2\n$.. ==&gt; 2\njshell&gt; run(() -&gt; InfiniteList.iterate(1, incr).filter(isEven).takeWhile(lessThan10).tail().head());\nfilter x % 2 == 0: 1\niterate: 1\nfilter x % 2 == 0: 2\ntakeWhile x &lt; 10: 2\niterate: 2\nfilter x % 2 == 0: 3\niterate: 3\nfilter x % 2 == 0: 4\ntakeWhile x &lt; 10: 4\n$.. ==&gt; 4\n\njshell&gt; InfiniteList&lt;Integer&gt; list = InfiniteList.iterate(1, incr).takeWhile(lessThan10)\n\njshell&gt; list.tail().tail().head()\ntakeWhile x &lt; 10: 1\niterate: 1\ntakeWhile x &lt; 10: 2\niterate: 2\ntakeWhile x &lt; 10: 3\n$.. ==&gt; 3\njshell&gt; list.head()\n$.. ==&gt; 1\njshell&gt; list\nlist ==&gt; [[1] [[2] [[3] ?]]]\n\njshell&gt; list.tail().head()\n$.. ==&gt; 2\njshell&gt; list.tail().tail().tail().head()\niterate: 3\ntakeWhile x &lt; 10: 4\n$.. ==&gt; 4\njshell&gt; list\nlist ==&gt; [[1] [[2] [[3] [[4] ?]]]]\n</code></pre> <p>You can test your code by running the <code>Test5.java</code> provided.  The following should compile without errors or warnings.  Make sure your code follows the CS2030S Java style and can generate the documentation without error.</p> <pre><code>$ javac -Xlint:rawtypes cs2030s/fp/*java\n$ javac -Xlint:rawtypes Test5.java\n$ java Test5\n$ java -jar ~cs2030s/bin/checkstyle.jar -c ~cs2030s/bin/cs2030_checks.xml cs2030s/fp/InfiniteList.java\n$ javadoc -quiet -private -d docs cs2030s/fp/InfiniteList.java\n</code></pre>"},{"location":"labs/lab7-question.html#reduce-and-count","title":"<code>reduce</code> and <code>count</code>","text":"<p>Finally, we are going to implement the terminal operations: <code>count</code> and <code>reduce</code>.  To imitate <code>java.util.stream.Stream</code>, the <code>count</code> method should return a <code>long</code>.</p> <p>Note: In Java, any integral value with suffix <code>L</code> is treated as a <code>long</code> value.  For instance, <code>123</code> has the type <code>int</code>, but <code>123L</code> has the type <code>long</code>.</p> <pre><code>jshell&gt; import cs2030s.fp.InfiniteList;\n\njshell&gt; InfiniteList.&lt;Integer&gt;sentinel().reduce(0, (x, y) -&gt; x + y)\n$.. ==&gt; 0\njshell&gt; InfiniteList.iterate(0, x -&gt; x + 1).limit(5).reduce(0, (x, y) -&gt; x + y)\n$.. ==&gt; 10\njshell&gt; InfiniteList.iterate(0, x -&gt; x + 1).limit(0).reduce(0, (x, y) -&gt; x + y)\n$.. ==&gt; 0\njshell&gt; InfiniteList.iterate(1, x -&gt; x + 1).map(x -&gt; x * x).limit(5).reduce(1, (x, y) -&gt; x * y)\n$.. ==&gt; 14400\n\njshell&gt; InfiniteList.&lt;Integer&gt;sentinel().count()\n$.. ==&gt; 0\njshell&gt; InfiniteList.iterate(0, x -&gt; x + 1).limit(0).count()\n$.. ==&gt; 0\njshell&gt; InfiniteList.iterate(0, x -&gt; x + 1).limit(1).count()\n$.. ==&gt; 1\n\njshell&gt; InfiniteList.iterate(0, x -&gt; x + 1).filter(x -&gt; x % 2 == 1).limit(10).count()\n$.. ==&gt; 10\njshell&gt; InfiniteList.iterate(0, x -&gt; x + 1).limit(10).filter(x -&gt; x % 2 == 1).count()\n$.. ==&gt; 5\njshell&gt; InfiniteList.iterate(0, x -&gt; x + 1).takeWhile(x -&gt; x &lt; 10).count()\n$.. ==&gt; 10\njshell&gt; InfiniteList.iterate(0, x -&gt; x + 1).takeWhile(x -&gt; x &lt; 10).filter(x -&gt; x % 2 == 0).count()\n$.. ==&gt; 5\n</code></pre> <p>You can test your code by running the <code>Test6.java</code> provided.  The following should compile without errors or warnings.  Make sure your code follows the CS2030S Java style and can generate the documentation without error.</p> <pre><code>$ javac -Xlint:rawtypes cs2030s/fp/*java\n$ javac -Xlint:rawtypes Test6.java\n$ java Test6\n$ java -jar ~cs2030s/bin/checkstyle.jar -c ~cs2030s/bin/cs2030_checks.xml cs2030s/fp/InfiniteList.java\n$ javadoc -quiet -private -d docs InfiniteList.java\n</code></pre>"},{"location":"labs/lab7-question.html#following-cs2030s-style-guide","title":"Following CS2030S Style Guide","text":"<p>You should make sure that your code follows the given Java style guide and the give Java documentation guide.</p>"},{"location":"labs/lab7-question.html#grading","title":"Grading","text":"<p>This lab is worth 24 marks and contributes 6% to your final grade.  The marking scheme is as follows:</p> <ul> <li>Documentation: 2 marks</li> <li>Everything Else: 22 marks</li> </ul> <p>We will deduct 1 mark for each unnecessary use of <code>@SuppressWarnings</code> and each raw type.  <code>@SuppressWarnings</code> should be used appropriately and not abused to remove compilation warnings.</p> <p>Note that style marks are no longer awarded.  You should know how to follow the prescribed Java style by now.  We will deduct up to 2 marks if there are serious violations of styles.</p>"},{"location":"labs/lab7-question.html#warning","title":"WARNING \u2757\ufe0f","text":"<p>We would like to remind you of the following:</p> <ul> <li>Use only the <code>submit-labX</code> script to submit your lab.  Failure to do so will lead to a 50% penalty on your lab grade.</li> <li>The grace period for getting used to the submission system is over.  We will not waive the late penalty if students fail to submit properly.  Please check your repo after running <code>submit-labX</code> to ensure that your files have been added correctly. The URL to your repo is given after you run <code>submit-labX</code>.</li> </ul>"},{"location":"labs/lab8-question.html","title":"Lab 8: Keep Your World Moving","text":"<ul> <li>Deadline: 14 April 2023, Friday, 23:59, SST </li> <li>No late penalty until: 18 April 2023, Tuesday, 23:59, SST </li> <li>Mark: 12</li> <li>Weightage: 4%</li> </ul>"},{"location":"labs/lab8-question.html#prerequisite","title":"Prerequisite","text":"<ul> <li>Caught up to Unit 39 of Lecture Notes</li> </ul>"},{"location":"labs/lab8-question.html#problem-description","title":"Problem Description","text":"<p>We have a Web API online for querying bus services and bus stops in Singapore.  You can go ahead and try:</p> <ul> <li>https://cs2030-bus-api.herokuapp.com/bus_services/96 returns the list of bus stops (id followed by description) served by Bus 96.</li> <li>https://cs2030-bus-api.herokuapp.com/bus_stops/16189 returns the description of the stop followed by a list of bus services that serve the stop.</li> </ul> <p>(note: our database is years old though -- don't rely on this for your daily commute!)</p> <p>In this lab, we will write a program that uses the Web API to do the following: Given the current stop <code>S</code>, and a search string <code>Q</code>, returns the list of buses serving <code>S</code> that also serves any stop with a description containing <code>Q</code>.  For instance, given <code>16189</code> and <code>Clementi</code>, the program will output</p> <pre><code>Search for: 16189  &lt;-&gt; Clementi:\nFrom 16189 \n- Can take 96A to:\n  - 17009 Clementi Int\n- Can take 96B to:\n  - 17171 Clementi Stn Exit A\n  - 17091 Aft Clementi Ave 1\n- Can take 96 to:\n  - 17171 Clementi Stn Exit A\n  - 17091 Aft Clementi Ave 1\n  - 17009 Clementi Int\n- Can take 151 to:\n  - 17091 Aft Clementi Ave 1\n\nTook 7,433ms\n</code></pre> <p>The pairs of <code>S</code> and <code>Q</code> can be either entered through the standard input or given to the program in a text file, with every pair of <code>S</code> and <code>Q</code> in a separate line.</p> <p>A program to query the bus API and given a query has been written.  Study the program carefully to understand what it does and how it works.</p> <p>The given program, however, is written synchronously.  Every query to the Web API is done one-by-one, and the program has to wait until one query completes before it can continue the execution of the program.  As a result, the program is slower than it should.</p> <p>Your task, for this lab, is to change the given program so that it executes asynchronously.  Doing so can significantly speed up the program.  </p> <p>The root of synchronous Web API access can be found in the method <code>httpGet</code> in <code>BusAPI.java</code>, in which the invocation of method send from the class HttpClient is done synchronously (i.e., it blocks until the response returns).    </p> <p><code>HttpClient</code> also provides an asynchronous version of <code>send</code> called sendAsync, which is the same as <code>send</code> excepts that it is asynchronous and returns a <code>CompletableFuture&lt;HttpResponse&lt;T&gt;&gt;</code> instead of <code>HttpResponse&lt;T&gt;</code>.  (You do not need to get into the nitty-gritty details of the <code>HttpClient</code> and <code>HttpResponse</code> for this lab -- but they are good to know, read up about them at your leisure).</p> <p>To make the program asynchronous, you should first change the invocation of <code>send</code> in <code>BusAPI</code> to <code>sendAsync</code>.  All other changes will be triggered by this.  The list of things you should change are:</p> <ul> <li><code>BusAPI::getBusStopsServedBy</code> now returns a <code>CompletableFuture&lt;String&gt;</code></li> <li><code>BusAPI::getBusServicesAt</code> now returns a <code>CompletableFuture&lt;String&gt;</code></li> <li><code>BusStop::getBusServices</code> now returns a <code>CompletableFuture&lt;Set&lt;BusService&gt;&gt;</code></li> <li><code>BusService::getBusStops</code> now returns a <code>CompletableFuture&lt;Set&lt;BusStop&gt;&gt;</code></li> <li><code>BusService::findStopsWith</code> now returns a <code>CompletableFuture&lt;Set&lt;BusStop&gt;&gt;</code></li> <li><code>BusRoutes</code> now stores a <code>CompletableFuture&lt;Set&lt;BusStop&gt;&gt;</code> instead.</li> <li><code>BusRoutes::description</code> now returns a <code>CompletableFuture&lt;String&gt;</code> (hint: use <code>thenCombine</code>)</li> <li><code>BusSg::findBusServicesBetween</code> now returns a <code>CompletableFuture&lt;BusRoutes&gt;</code></li> </ul> <p>It is important that at no point in any of the code above, you call <code>CompletableFuture::join</code> (or <code>get</code>) on any of the <code>CompletableFuture</code>, so everything that has been done so far, from the lower-level Web API calls to the higher-level logic of searching for bus services, is done asynchronously.</p> <p>For this lab, the only place where you should <code>join</code> is in <code>main()</code>, where you now have multiple <code>CompletableFuture</code> objects, one from each call to <code>findBusServicesBetween</code>.  As the final step, you should change <code>main()</code> so that it waits for all the <code>CompletableFuture</code> objects to complete using <code>allOf</code> and <code>join</code>, followed by printing out the description of the bus routes found.</p> <p>The speed up your would experience for the asynchronous version depends on the complexity of the inputs.  For the following test input: <pre><code>8031 Orchard\n17009 NUS\n17009 MRT\n15131 Stn\n8031 Int\n12345 Dummy\n</code></pre> I reduced the time from around 120-180 seconds to 10-15 seconds, more than 10 times speedup.  Your mileage may vary, but you should see some speed up in the total query time.</p> <p>Your code should produce the exact same set of bus routes as the synchronous version, although it can be in a different order.</p> <pre><code>$ javac *java\n$ java Main &lt; test1.in\n$ java Main &lt; test2.in\n$ java -jar ~cs2030s/bin/checkstyle.jar -c ~cs2030s/bin/cs2030_checks.xml *.java\n</code></pre>"},{"location":"labs/lab8-question.html#following-cs2030s-style-guide","title":"Following CS2030S Style Guide","text":"<p>You should make sure that your code follows the given Java style guide and the give Java documentation guide.</p>"},{"location":"labs/lab8-question.html#grading","title":"Grading","text":"<p>This lab is worth 12 marks and contributes 4% to your final grade.</p> <p>We will deduct 1 mark for each unnecessary use of <code>@SuppressWarnings</code> and each raw type.  <code>@SuppressWarnings</code> should be used appropriately and not abused to remove compilation warnings.</p> <p>Note that style marks are no longer awarded.  You should know how to follow the prescribed Java style by now.  We will deduct up to 2 marks if there are serious violations of styles.</p>"},{"location":"labs/lab8-question.html#warning","title":"WARNING \u2757\ufe0f","text":"<p>We would like to remind you of the following:</p> <ul> <li>Use only the <code>submit-labX</code> script to submit your lab.  Failure to do so will lead to a 50% penalty on your lab grade.</li> <li>The grace period for getting used to the submission system is over.  We will not waive the late penalty if students fail to submit properly.  Please check your repo after running <code>submit-labX</code> to ensure that your files have been added correctly. The URL to your repo is given after you run <code>submit-labX</code>.</li> </ul>"},{"location":"practice/mock-pe2-question.html","title":"CS2030S MOCK PRACTICAL ASSESSMENT II","text":""},{"location":"practice/mock-pe2-question.html#ay202223-semester-2","title":"AY2022/23 Semester 2","text":""},{"location":"practice/mock-pe2-question.html#instructions","title":"INSTRUCTIONS","text":"<ol> <li> <p>Accept the practice question here </p> </li> <li> <p>Log into the PE nodes and run <code>~cs2030s/get-mockpe2</code> to get the practice question.</p> </li> <li> <p>There is no submission script</p> </li> <li> <p>You should see the following in your home directory.</p> <ul> <li>The files <code>Test1.java</code> and <code>CS2030STest.java</code> for testing your solution.</li> <li>The skeleton files for the question: <code>Main.java</code></li> <li>The following files to solve the question are provided <code>Circle.java</code>, and <code>Point.java</code></li> <li>The file <code>StreamAPI.md</code> contains information about the <code>Stream</code> class from the <code>java.util.stream</code> package.</li> </ul> </li> <li> <p>Solve the programming tasks by editing <code>Main.java</code>. </p> </li> </ol>"},{"location":"practice/mock-pe2-question.html#streams","title":"Streams","text":""},{"location":"practice/mock-pe2-question.html#marking-criteria","title":"Marking Criteria","text":"<ul> <li>Functionality and type correctness (12 marks)</li> <li>Style (3 marks)</li> </ul>"},{"location":"practice/mock-pe2-question.html#your-task","title":"Your Task","text":"<p>There are four parts to this question that may or may not be dependent on each other. You will need to write four single line <code>Stream</code> pipelines to generate certain <code>Stream</code>s and solve certain computations. The last part of this question will get you to re-solve the Lab 0 (Pi Estimation) using only a <code>Stream</code> and some supporting classes.</p> <p>The Stream API is included in the file <code>StreamAPI.md</code>.</p> <p>You are provided with a <code>Point</code>, <code>Circle</code>, and <code>Main</code> class. These <code>Point</code>, and <code>Circle</code> classes are similar to those used in Lab 0.  Take a look at them to see what are the methods available.</p> <p>All of your single line pipelines will be written in the <code>Main.java</code> skeleton file. Each method body must contain only a single return statement.</p>"},{"location":"practice/mock-pe2-question.html#implement-the-pointstream-method","title":"Implement the <code>pointStream</code> method.","text":"<p>The method <code>pointStream</code> has two arguments: <code>point</code> of type <code>Point</code> and <code>f</code> of type <code>Function&lt;Point,Point&gt;</code>.  Recall that <code>Function</code> is the Java equivalent of our <code>Transformer</code> functional interface which has the single abstract method <code>apply</code> instead of <code>transform</code>.  The method should return a <code>Stream&lt;Point&gt;</code> which contains the point <code>p</code>, followed by <code>f(p)</code>, and then <code>f(f(p))</code>, and so on.  Implement this method body using a single stream pipeline.</p> <p>Some examples of use are shown below:</p> <pre><code>jshell&gt; pointStream(new Point(0, 0), p -&gt; new Point(p.getX(), p.getY() + 1)).limit(3).forEach(System.out::println)\n(0.0, 0.0)\n(0.0, 1.0)\n(0.0, 2.0)\n\njshell&gt; pointStream(new Point(0, 0), p -&gt; new Point(p.getX() + 1, p.getY())).limit(3).forEach(System.out::println)\n(0.0, 0.0)\n(1.0, 0.0)\n(2.0, 0.0)\n\njshell&gt; pointStream(new Point(0, 0), p -&gt; new Point(p.getX() + 1, p.getY() + 1)).limit(3).forEach(System.out::println)\n(0.0, 0.0)\n(1.0, 1.0)\n(2.0, 2.0)\n</code></pre> <p>You can test your code by running the <code>Test1.java</code> provided.  Make sure your code follows the CS2030S Java style.</p> <pre><code>$ javac Test1.java\n$ java Test1\n$ java -jar ~cs2030s/bin/checkstyle.jar -c ~cs2030s/bin/cs2030_checks.xml Main.java\n</code></pre>"},{"location":"practice/mock-pe2-question.html#implement-the-generategrid-method","title":"Implement the <code>generateGrid</code> method.","text":"<p>The method <code>generateGrid</code> has two arguments: <code>point</code> of type <code>Point</code> and <code>n</code> which is of type <code>int</code>. This method should return a finite stream of type <code>Stream&lt;Point&gt;</code> containing the <code>n * n</code> points that define a grid starting from the point <code>point</code> and then incrementing both <code>x</code> and <code>y</code> cordinates by one. For example: a grid of size <code>3</code> starting from a point <code>(0,0)</code> should look like the following: <pre><code>(0,0) (0,1) (0,2)\n(1,0) (1,1) (1,2)\n(2,0) (2,1) (2,2)\n</code></pre></p> <p>When in the stream they should appear in the order of the row first i.e. <code>(0,0) (0,1) (0,2) (1,0) (1,1) (1,2) (2,0) (2,1) (2,2)</code>. </p> <p>Implement this method body using a single stream pipeline.</p> <p>Some examples of use are shown below: <pre><code>jshell&gt; generateGrid(new Point(0, 0), 2).forEach(System.out::println)\n(0.0, 0.0)\n(0.0, 1.0)\n(1.0, 0.0)\n(1.0, 1.0)\n\njshell&gt; generateGrid(new Point(0, 0), 3).forEach(System.out::println)\n(0.0, 0.0)\n(0.0, 1.0)\n(0.0, 2.0)\n(1.0, 0.0)\n(1.0, 1.0)\n(1.0, 2.0)\n(2.0, 0.0)\n(2.0, 1.0)\n(2.0, 2.0)\n\njshell&gt; generateGrid(new Point(-1, 0), 2).forEach(System.out::println)\n(-1.0, 0.0)\n(-1.0, 1.0)\n(0.0, 0.0)\n(0.0, 1.0)\n</code></pre></p> <p>You can test your code by running the <code>Test1.java</code> provided.  Make sure your code follows the CS2030S Java style.</p> <pre><code>$ javac Test1.java\n$ java Test1\n$ java -jar ~cs2030s/bin/checkstyle.jar -c ~cs2030s/bin/cs2030_checks.xml Main.java\n</code></pre>"},{"location":"practice/mock-pe2-question.html#implement-the-concentriccircles-method","title":"Implement the <code>concentricCircles</code> method.","text":"<p>The method <code>concentricCircles</code> has two arguments: <code>circle</code> of type <code>Circle</code> and <code>f</code> which is of type <code>Function&lt;Double,Double&gt;</code>.  The method should return a <code>Stream&lt;Circle&gt;</code> which contains the first circle <code>circle</code>, followed by the circle with a radius given by <code>f(circle.getRadius())</code>, and then <code>f(f(circle.getRadius())</code>, and so on. In this way, we will have a stream of concentric circles (circles with a common center but with different radii - much like a target in archery).</p> <p>Implement this method body using a single stream pipeline.</p> <p>Some examples of use are shown below: <pre><code>jshell&gt; concentricCircles(new Circle(new Point(1, 1), 1.0),x -&gt; x + 1).limit(3).forEach(System.out::println)\n{ center: (1.0, 1.0), radius: 1.0 }\n{ center: (1.0, 1.0), radius: 2.0 }\n{ center: (1.0, 1.0), radius: 3.0 }\n\njshell&gt; concentricCircles(new Circle(new Point(0, 0), 1.0),x -&gt; x + 0.5).limit(3).forEach(System.out::println)\n{ center: (0.0, 0.0), radius: 1.0 }\n{ center: (0.0, 0.0), radius: 1.5 }\n{ center: (0.0, 0.0), radius: 2.0 }\n</code></pre></p> <p>You can test your code by running the <code>Test1.java</code> provided.  Make sure your code follows the CS2030S Java style.</p> <pre><code>$ javac Test1.java\n$ java Test1\n$ java -jar ~cs2030s/bin/checkstyle.jar -c ~cs2030s/bin/cs2030_checks.xml Main.java\n</code></pre>"},{"location":"practice/mock-pe2-question.html#implement-the-pointstreamfromcircle-method","title":"Implement the <code>pointStreamFromCircle</code> method.","text":"<p>The method <code>pointStreamFromCircle</code> has one argument: <code>circles</code> of type <code>Stream&lt;Circle&gt;</code>. The method should return a <code>Stream&lt;Point&gt;</code> which contains the centers of all the circles in the <code>circles</code> list. Implement this method body using a single stream pipeline.</p> <p>An example of use is shown below: <pre><code>jshell&gt; pointStreamFromCircle(Stream.of(new Circle(new Point(0, 0), 1), new Circle(new Point(1, 1), 2), new Circle(new Point(-1, -1), 1))).forEach(System.out::println)\n(0.0, 0.0)\n(1.0, 1.0)\n(-1.0, -1.0)\n</code></pre></p> <p>You can test your code by running the <code>Test1.java</code> provided.  Make sure your code follows the CS2030S Java style.</p> <pre><code>$ javac Test1.java\n$ java Test1\n$ java -jar ~cs2030s/bin/checkstyle.jar -c ~cs2030s/bin/cs2030_checks.xml Main.java\n</code></pre>"},{"location":"practice/practice-pe1-expression.html","title":"Practice PE1 Question: Expression","text":""},{"location":"practice/practice-pe1-expression.html#adapted-from-pe1-of-2021-semester-1","title":"Adapted from PE1 of 20/21 Semester 1","text":""},{"location":"practice/practice-pe1-expression.html#instructions-to-grab-practice-pe-question","title":"Instructions to grab Practice PE Question:","text":"<ol> <li>Accept the practice question here </li> <li>Log into the PE nodes and run <code>~cs2030s/get-pe1-expression</code> to get the practice question.</li> <li>There is no submission script</li> </ol> <p>You should see the following in your home directory.</p> <ul> <li>The files <code>Test1.java</code>, <code>Test2.java</code>, and <code>CS2030STest.java</code> for testing your solution.</li> <li>The skeleton files for this question: <code>Operand.java</code> <code>InvalidOperandException.java</code> <code>Operation.java</code> </li> </ul>"},{"location":"practice/practice-pe1-expression.html#background","title":"Background","text":"<p>An expression is an entity that can be evaluated into a value.</p> <p>We consider two types of expression in this question:</p> <ul> <li>An operand, which itself is a value.</li> <li>A binary operation, which is a mathematical function that takes in two expressions and produces an output value.</li> </ul> <p>For instance,</p> <ul> <li>3 is an expression that evaluates to 3.</li> <li>3 + 2 is an expression that evaluates to 5</li> <li>(3 + 2) + 3 is also an expression that evaluates to 8</li> </ul> <p>An operand is not necessarily an integer.  It can be of any type. An expression can be evaluated to any type.</p> <p>Three skeleton files are provided for you: <code>Operand.java</code>, <code>Operation.java</code>, and <code>InvalidOperandException.java</code>.   If you need extra classes or interfaces, create the necessary additional Java files yourself.</p>"},{"location":"practice/practice-pe1-expression.html#operand","title":"Operand","text":"<p>Create a class called <code>Operand</code> that encapsulates the operands of an operation.  The <code>Operand</code> class can contain references to a value of any reference type.  </p> <p>You may create additional parent classes or interfaces if you think it is appropriate.</p> <p>The Operand has an <code>eval</code> method that returns its value.</p> <pre><code>jshell&gt; new Operand(5).eval()\n$.. ==&gt; 5\njshell&gt; new Operand(\"string\").eval()\n$.. ==&gt; \"string\"\njshell&gt; new Operand(true).eval()\n$.. ==&gt; true\n</code></pre>"},{"location":"practice/practice-pe1-expression.html#invalidoperandexception","title":"InvalidOperandException","text":"<p>Create an unchecked exception named <code>InvalidOperandException</code> that behaves as follows:</p> <pre><code>jshell&gt; InvalidOperandException e = new InvalidOperandException('!')\njshell&gt; e.getMessage();\n$.. ==&gt; \"ERROR: Invalid operand for operator !\"\n</code></pre> <p>The constructor for <code>InvalidOperandException</code> takes in a <code>char</code> which is the corresponding symbol for the operation that is invalid.  </p> <p>Recall that all unchecked exceptions are a subclass of <code>java.lang.RuntimeException</code>.  The class <code>RuntimeException</code> has the following constructor:</p> <pre><code>RuntimeException(String message)\n</code></pre> <p>that constructs a new runtime exception with the specified detail message <code>message</code>. The message can be retrieved by the <code>getMessage()</code> method.</p> <p>You can test your code by running the <code>Test1.java</code> provided.  Make sure your code follows the CS2030S Java style.</p> <pre><code>$ javac Test1.java\n$ java Test1\n$ java -jar ~cs2030s/bin/checkstyle.jar -c ~cs2030s/bin/cs2030_checks.xml *.java\n</code></pre>"},{"location":"practice/practice-pe1-expression.html#operation","title":"Operation","text":"<p>Create an abstract class called <code>Operation</code> with the following fields and methods:</p> <ul> <li> <p>two private fields that correspond to two expressions (an expression is as defined at the beginning of this question).</p> </li> <li> <p>a class factory method <code>of</code>, which returns the appropriate subclass that implements a specific operation.  The first parameter of the <code>of</code> methods is a <code>char</code> to indicate the operation to be performed.  You need to support three operations:</p> </li> <li> <p>if the first parameter is <code>*</code>, return an operation that performs multiplication on integers</p> </li> <li>if the first parameter is <code>+</code>, return an operation that performs concatenation on strings</li> <li>if the first parameter is <code>^</code>, return an operation that performs XOR on booleans</li> <li>if the first parameter is none of the above, return <code>null</code></li> </ul> <p>Note that the operator to perform XOR on two boolean variables is <code>^</code>.</p> <p>For instance,</p> <pre><code>jshell&gt; Operation o = Operation.of('*', new Operand(2), new Operand(3));\njshell&gt; o.eval()\n$.. ==&gt; 6\n\njshell&gt; Operation o = Operation.of('+', new Operand(\"hello\"), new Operand(\"world\"));\njshell&gt; o.eval()\n$.. ==&gt; \"helloworld\"\n\njshell&gt; Operation o = Operation.of('^', new Operand(true), new Operand(false));\njshell&gt; o.eval()\n$.. ==&gt; true\n\njshell&gt; Operation.of('!', new Operand(2), new Operand(3));\n$.. ==&gt; null\n\njshell&gt; Operation o1 = Operation.of('*', new Operand(2), new Operand(3));\njshell&gt; Operation o = Operation.of('*', o1, new Operand(4));\njshell&gt; o.eval()\n$.. ==&gt; 24\n\njshell&gt; Operation o2 = Operation.of('*', new Operand(2), new Operand(4));\njshell&gt; Operation o = Operation.of('*', o1, o2);\njshell&gt; o.eval()\n$.. ==&gt; 48\n</code></pre> <p>If the operands are not of the correct type, <code>eval</code> must throw an unchecked <code>InvalidOperandException</code> exception.  </p> <p>For instance,</p> <pre><code>jshell&gt; Operation o = Operation.of('*', new Operand(\"1\"), new Operand(3));\njshell&gt; try {\n   ...&gt;   o.eval();\n   ...&gt; } catch (InvalidOperandException e) {\n   ...&gt;   System.out.println(e.getMessage());\n   ...&gt; }\nERROR: Invalid operand for operator *\n\njshell&gt; Operation o = Operation.of('+', new Operand(1), new Operand(4));\njshell&gt; try {\n   ...&gt;   o.eval();\n   ...&gt; } catch (InvalidOperandException e) {\n   ...&gt;   System.out.println(e.getMessage());\n   ...&gt; }\nERROR: Invalid operand for operator +\n\njshell&gt; Operation o = Operation.of('^', new Operand(false), new Operand(3));\njshell&gt; try {\n   ...&gt;   o.eval();\n   ...&gt; } catch (InvalidOperandException e) {\n   ...&gt;   System.out.println(e.getMessage());\n   ...&gt; }\nERROR: Invalid operand for operator ^\n\njshell&gt; Operation o1 = Operation.of('*', new Operand(1), new Operand(3));\njshell&gt; Operation o2 = Operation.of('^', new Operand(false), new Operand(false));\njshell&gt; Operation o = Operation.of('+', o1, o2);\njshell&gt; try {\n   ...&gt;   o.eval();\n   ...&gt; } catch (InvalidOperandException e) {\n   ...&gt;   System.out.println(e.getMessage());\n   ...&gt; }\nERROR: Invalid operand for operator +\n\njshell&gt; Operation o1 = Operation.of('*', new Operand(1), new Operand(\"3\"));\njshell&gt; Operation o2 = Operation.of('^', new Operand(false), new Operand(false));\njshell&gt; Operation o = Operation.of('+', o1, o2);\njshell&gt; try {\n   ...&gt;   o.eval();\n   ...&gt; } catch (InvalidOperandException e) {\n   ...&gt;   System.out.println(e.getMessage());\n   ...&gt; }\nERROR: Invalid operand for operator *\n</code></pre> <p>You can test your code by running the <code>Test2.java</code> provided.  Make sure your code follows the CS2030S Java style.</p> <pre><code>$ javac Test2.java\n$ java Test2\n$ java -jar ~cs2030s/bin/checkstyle.jar -c ~cs2030s/bin/cs2030_checks.xml *.java\n</code></pre>"},{"location":"practice/practice-pe1-ride.html","title":"Practice PE1 Question: Snatch A Ride","text":""},{"location":"practice/practice-pe1-ride.html#adapted-from-pe1-of-1920-semester-1","title":"Adapted from PE1 of 19/20 Semester 1","text":""},{"location":"practice/practice-pe1-ride.html#instructions-to-grab-practice-pe-question","title":"Instructions to grab Practice PE Question:","text":"<ol> <li>Accept the practice question here </li> <li>Log into the PE nodes and run <code>~cs2030s/get-pe1-ride</code> to get the practice question.</li> <li>There is no submission script</li> </ol> <p>You should see the following in your home directory.</p> <ul> <li>The files <code>Test1.java</code>, <code>Test2.java</code>, <code>Test3.java</code>, and <code>CS2030STest.java</code> for testing your solution.</li> <li>No skeleton files are provided for this question.</li> </ul>"},{"location":"practice/practice-pe1-ride.html#background","title":"Background","text":"<p>Snatch Pte Ltd is a transport service provider trying to vie for a place in the public transport arena.  Snatch provides three types of ride services:</p> <p><code>JustRide</code>: <code>JustRide</code> charges a fare based on the distance traveled, at 22 cents per km, and the fare is the same regardless of the number of passengers. There is a surcharge of 500 cents if a ride request is issued between 0600 hours and 0900 hours, both inclusive.</p> <p><code>TakeACab</code>: <code>TakeACab</code> charges its fare based on distance traveled, at 33 cents per km, but there is a booking fee of 200 cents.  The fair is the same regardless of the number of passengers.  There is no peak hour surcharge.</p> <p><code>ShareARide</code>: The fare depends on the number of passengers and is calculated as follows: the base fare is 50 cents per km, but the passengers pay less if they share the ride.  The paid fare is the base fare divided by the number of passengers with any fractional part of the fare (after division) is absorbed by the driver.  There is a surcharge of 500 cents if a ride request is issued between 0600 hours and 0900 hours, both inclusive.</p> <p>In addition, there are two types of cars under Snatch.  A <code>Cab</code> can provide only <code>JustRide</code> and <code>TakeACab</code> services.  A <code>PrivateCar</code> can provide only <code>JustRide</code> and <code>ShareARide</code> services.</p> <p>A customer can issue a Snatch ride request, specified by the distance of the ride, the number of passengers, and the time of the request.  A booking is made when a request is matched with a car under a particular ride service.</p> <p>To get full marks, your code not only needs to be correct (including passing all the test cases) but its design must be extensible.  In case, Snatch decides to provide additional types of ride services, support additional types of cars, or change the fare structure, your code should require minimal changes to support the new requirements.</p>"},{"location":"practice/practice-pe1-ride.html#task","title":"Task","text":""},{"location":"practice/practice-pe1-ride.html#request","title":"Request","text":"<p>Implement a <code>Request</code> class that encapsulates a request for a ride.  The constructor for <code>Request</code> takes in three <code>int</code> parameters, the distance of the ride, the number of passengers, and the time of the request.  </p>"},{"location":"practice/practice-pe1-ride.html#services","title":"Services","text":"<p>Implement the three classes <code>JustRide</code>, <code>TakeACab</code>, and <code>ShareARide</code>.  These classes should implement a <code>computeFare</code> method that takes in a <code>Request</code> instance as a parameter and returns the fare in cents.</p> <pre><code>jshell&gt; new JustRide().computeFare(new Request(20, 3, 1000))\n$.. ==&gt; 440\njshell&gt; new JustRide().computeFare(new Request(10, 1, 900))\n$.. ==&gt; 720\njshell&gt; new TakeACab().computeFare(new Request(20, 3, 1000))\n$.. ==&gt; 860\njshell&gt; new TakeACab().computeFare(new Request(10, 1, 900))\n$.. ==&gt; 530\njshell&gt; new ShareARide().computeFare(new Request(20, 3, 1000))\n$.. ==&gt; 333\njshell&gt; new ShareARide().computeFare(new Request(10, 1, 900))\n$.. ==&gt; 1000\n</code></pre> <p>In addition, each class should override <code>toString</code> to return the name of the service.</p> <pre><code>jshell&gt; new JustRide().toString()\n$.. ==&gt; \"JustRide\"\njshell&gt; new TakeACab().toString()\n$.. ==&gt; \"TakeACab\"\njshell&gt; new ShareARide().toString()\n$.. ==&gt; \"ShareARide\"\n</code></pre> <p>You can test your code by running the <code>Test1.java</code> provided.  Make sure your code follows the CS2030S Java style.</p> <pre><code>$ javac Test1.java\n$ java Test1\n$ java -jar ~cs2030s/bin/checkstyle.jar -c ~cs2030s/bin/cs2030_checks.xml *.java\n</code></pre>"},{"location":"practice/practice-pe1-ride.html#cars","title":"Cars","text":"<p>Implement two classes <code>Cab</code> and <code>PrivateCar</code>.  Their constructors should take in a <code>String</code> instance that corresponds to the license plate and the time (in minutes) until the driver is available.  In addition, each class should override <code>toString</code> to return the type of car, the license plate, and the time until the driver is available.  The string should be formatted as shown in the examples below.</p> <pre><code>jshell&gt; new Cab(\"SHA1234\", 5).toString()\n$.. ==&gt; \"Cab SHA1234 (5 mins away)\"\njshell&gt; new Cab(\"SHA1234\", 1).toString()\n$.. ==&gt; \"Cab SHA1234 (1 min away)\"\njshell&gt; new PrivateCar(\"SU4032\", 4).toString()\n$.. ==&gt; \"PrivateCar SU4032 (4 mins away)\"\njshell&gt; new PrivateCar(\"SU4032\", 1).toString()\n$.. ==&gt; \"PrivateCar SU4032 (1 min away)\"\n</code></pre> <p>You can test your code by running the <code>Test2.java</code> provided.  Make sure your code follows the CS2030S Java style.</p> <pre><code>$ javac Test2.java\n$ java Test2\n$ java -jar ~cs2030s/bin/checkstyle.jar -c ~cs2030s/bin/cs2030_checks.xml *.java\n</code></pre>"},{"location":"practice/practice-pe1-ride.html#bookings","title":"Bookings","text":"<p>Implement a class <code>Booking</code> that encapsulates a car, a service, and a request.  A booking should implement the <code>Comparable&lt;Booking&gt;</code> interface.  A booking is compared to another booking based on the fare, breaking ties by the waiting time.  If two bookings have the same fare and waiting time, you can break ties arbitrarily.</p> <pre><code>jshell&gt; Comparable&lt;Booking&gt; b = new Booking(new Cab(\"SHA1234\", 5), new JustRide(), new Request(20, 3, 1000));\njshell&gt; Booking b1 = new Booking(new Cab(\"SHA1234\", 3), new JustRide(), new Request(20, 3, 1000));\njshell&gt; Booking b2 = new Booking(new Cab(\"SBC8888\", 5), new JustRide(), new Request(20, 3, 1000));\njshell&gt; Booking b3 = new Booking(new PrivateCar(\"SU4032\", 5), new ShareARide(), new Request(20, 3, 1000));\njshell&gt; b3.compareTo(b2) &lt; 0\n$33 ==&gt; true\njshell&gt; b1.compareTo(b3) &lt; 0\n$34 ==&gt; false\njshell&gt; b1.compareTo(b2) &lt; 0\n$35 ==&gt; true\n</code></pre> <p>If a booking is created with a car and a service that is not compatible (i.e., the type of car does not provide the given service), throw an <code>IllegalArgumentException</code>.  Construct an <code>IllegalArgumentException</code> instance by passing in a message (of type <code>String</code>) into its constructor. This message can be retrieved by the <code>getMessage()</code> method.</p> <pre><code>jshell&gt; try {\n   ...&gt;   new Booking(new Cab(\"SHA1234\", 5), new ShareARide(), new Request(20, 3, 1000));\n   ...&gt; } catch (IllegalArgumentException e) {\n   ...&gt;   System.out.println(e.getMessage());\n   ...&gt; }\nCab SHA1234 (5 mins away) does not provide the ShareARide service.\n</code></pre> <p>You can test your code by running the <code>Test3.java</code> provided.  Make sure your code follows the CS2030S Java style.</p> <pre><code>$ javac Test3.java\n$ java Test3\n$ java -jar ~cs2030s/bin/checkstyle.jar -c ~cs2030s/bin/cs2030_checks.xml *.java\n</code></pre>"},{"location":"practice/practice-pe1-sourcelist.html","title":"Practice PE1 Question: SourceList","text":""},{"location":"practice/practice-pe1-sourcelist.html#adapted-from-pe1-of-2021-semester-1","title":"Adapted from PE1 of 20/21 Semester 1","text":""},{"location":"practice/practice-pe1-sourcelist.html#instructions-to-grab-practice-pe-question","title":"Instructions to grab Practice PE Question:","text":"<ol> <li>Accept the practice question here </li> <li>Log into the PE nodes and run <code>~cs2030s/get-pe1-list</code> to get the practice question.</li> <li>There is no submission script</li> </ol> <p>You should see the following in your home directory.</p> <ul> <li>The files <code>Test1.java</code>, <code>Test2.java</code>, <code>Test3.java</code> and <code>CS2030STest.java</code> for testing your solution.</li> <li>The skeleton files for this question: <code>EmptyList.java</code>, <code>SourceList.java</code>, and <code>Pair.java</code>.</li> <li>The following files are also provided: <code>IntegerToString.java</code> , <code>GreaterThanTwo.java</code>, <code>BooleanCondition.java</code> and <code>Transformer.java</code></li> </ul>"},{"location":"practice/practice-pe1-sourcelist.html#background","title":"Background","text":"<p>In this question, you will create a generic list using a <code>Pair</code> class which is similar to what you saw in lectures. Note: This generic list is different and unrelated to the <code>java.util.List</code> interface.  We will not use that here.  </p> <p>We will call this generic list <code>SourceList</code> (after the Source language used in the module CS1101S).</p> <p>This question also uses the <code>Transformer</code> and <code>BooleanCondition</code> interfaces from Lab 4.  The code for these two classes has been provided for you.</p> <p>Remember the <code>Pair</code> class from lectures with a <code>first</code> and a <code>second</code> value. The implementation of <code>Pair</code> used in this question is different from that in the lectures, in that it has only one type parameter <code>T</code>.  Using this implementation it is possible to create a list using pairs: The generic list <code>SourceList</code> is just a <code>Pair</code> object, whose second value is either itself a <code>Pair</code> object, or an <code>EmptyList</code> object.</p> <p>This chain of pairs constitutes a <code>SourceList</code>. Each chain of pairs is terminated with an <code>EmptyList</code> object.</p> <p>Consider some examples:</p> <pre><code>jshell&gt; SourceList&lt;Integer&gt; list = new EmptyList&lt;&gt;();\njshell&gt; list\nlist ==&gt; EmptyList\n\njshell&gt; SourceList&lt;String&gt; list = new Pair&lt;&gt;(\"Hello\", new EmptyList&lt;&gt;());\njshell&gt; list\nlist ==&gt; Hello, EmptyList\n\njshell&gt; SourceList&lt;Integer&gt; list = new Pair&lt;&gt;(1, new Pair&lt;&gt;(2, new Pair&lt;&gt;(3, new EmptyList&lt;&gt;())));\njshell&gt; list\nlist ==&gt; 1, 2, 3, EmptyList\n\njshell&gt; list.getFirst()\n$.. ==&gt; 1\njshell&gt; list.getSecond().getFirst()\n$.. ==&gt; 2\njshell&gt; list.getSecond().getSecond().getFirst()\n$.. ==&gt; 3\njshell&gt;\n</code></pre> <p>You have been provided with the following skeletons:</p> <ul> <li>The <code>SourceList</code> interface: <code>SourceList.java</code></li> <li>The <code>EmptyList</code> class: <code>EmptyList.java</code></li> <li>The <code>Pair</code> class: <code>Pair.java</code></li> </ul> <p>Familiarise yourself with these files.</p> <p>The <code>Pair::toString</code> method has already been implemented for you.  Read and understand how this method works by recursively calling the <code>toString</code> method of the next pair in the pair chain.  </p> <p>You will now implement more methods for your <code>SourceList</code> interface in the <code>Pair</code> class.</p>"},{"location":"practice/practice-pe1-sourcelist.html#implement-the-length-method","title":"Implement the <code>length</code> method","text":"<p>An important <code>SourceList</code> operation is to calculate the length of the list.</p> <p>Implement the <code>length</code> method which takes in no arguments and returns an <code>int</code> which is the length of the list.</p> <p>Consider some examples:</p> <pre><code>jshell&gt; SourceList&lt;String&gt; strList = new Pair&lt;&gt;(\"AAA\", new Pair&lt;&gt;(\"AA\", new Pair&lt;&gt;(\"A\", new EmptyList&lt;&gt;())))\njshell&gt; strList.length()\n$.. ==&gt; 3\n\njshell&gt; EmptyList&lt;Integer&gt; intEmpty = new EmptyList&lt;&gt;()\njshell&gt; intEmpty.length()\n$.. ==&gt; 0\n</code></pre>"},{"location":"practice/practice-pe1-sourcelist.html#implement-the-equals-method","title":"Implement the <code>equals</code> method","text":"<p>Implement the <code>equals</code> method which takes in an argument of type <code>Object</code> and returns a <code>boolean</code>. This equals method should return <code>true</code> when the two <code>SourceList</code> are equal, and <code>false</code> otherwise. A <code>SourceList</code> is equal if, in all <code>Pairs</code> of the <code>SourceList</code>, the first values are equal.  All <code>EmptyLists</code> are equal.</p> <p>Consider the following example:</p> <pre><code>jshell&gt; Object intList1 = new Pair&lt;&gt;(1, new Pair&lt;&gt;(2, new Pair&lt;&gt;(3, new EmptyList&lt;&gt;())));\njshell&gt; Object intList2 = new Pair&lt;&gt;(1, new Pair&lt;&gt;(2, new Pair&lt;&gt;(3, new EmptyList&lt;&gt;())));\njshell&gt; intList1.equals(intList1)\n$.. ==&gt; true\njshell&gt; intList1.equals(intList2)\n$.. ==&gt; true\njshell&gt; intList1.equals(new Pair&lt;&gt;(\"1\", new Pair&lt;&gt;(\"2\", new Pair&lt;&gt;(\"3\", new EmptyList&lt;&gt;()))))\n$.. ==&gt; false\njshell&gt; intList1.equals(new EmptyList&lt;&gt;())\n$.. ==&gt; false\njshell&gt; new EmptyList&lt;Integer&gt;().equals(new EmptyList&lt;String&gt;())\n$.. ==&gt; true\njshell&gt;\n</code></pre> <p>Note: you may only use one <code>@SuppressWarnings</code> for this method. Nowhere else in your source code may you use any <code>@SuppressWarnings</code>.</p> <p>You can test your code by running the <code>Test1.java</code> provided.  Make sure your code follows the CS2030S Java style.</p> <pre><code>$ javac Test1.java\n$ java Test1\n$ java -jar ~cs2030s/bin/checkstyle.jar -c ~cs2030s/bin/cs2030_checks.xml *.java\n</code></pre>"},{"location":"practice/practice-pe1-sourcelist.html#implement-the-filter-method","title":"Implement the <code>filter</code> method","text":"<p>Implement the <code>filter</code> method which takes in a parameter of type <code>BooleanCondition</code> and returns a new <code>SourceList</code> containing only the elements which match the <code>BooleanCondition</code>. Note: that this should create new pairs and not change the current <code>SourceList</code>. Consider some examples:</p> <pre><code>jshell&gt; SourceList&lt;Integer&gt; intList = new Pair&lt;&gt;(1, new Pair&lt;&gt;(2, new Pair&lt;&gt;(3, new Pair&lt;&gt;(4, new EmptyList&lt;&gt;()))));\njshell&gt; intList.filter(new GreaterThanTwo())\n$.. ==&gt; 3, 4, EmptyList\n\njshell&gt; intList\nintList ==&gt; 1, 2, 3, 4, EmptyList\njshell&gt; intList.filter(new GreaterThanTwo()) == intList\n$.. ==&gt; false\n\njshell&gt; SourceList&lt;Integer&gt; l = intList.filter(new GreaterThanTwo())\njshell&gt; SourceList&lt;String&gt; l = intList.filter(new GreaterThanTwo())\n|  Error:\n|  incompatible types: SourceList&lt;java.lang.Integer&gt; cannot be converted to SourceList&lt;java.lang.String&gt;\n|  SourceList&lt;String&gt; l = intList.filter(new GreaterThanTwo());\n|                         ^----------------------------------^\n\njshell&gt; new EmptyList&lt;Integer&gt;().filter(new GreaterThanTwo())\n$.. ==&gt; EmptyList\n\njshell&gt; SourceList&lt;Integer&gt; l = new EmptyList&lt;Integer&gt;().filter(new GreaterThanTwo())\njshell&gt; SourceList&lt;String&gt; l = new EmptyList&lt;Integer&gt;().filter(new GreaterThanTwo())\n|  Error:\n|  incompatible types: SourceList&lt;java.lang.Integer&gt; cannot be converted to SourceList&lt;java.lang.String&gt;\n|  SourceList&lt;String&gt; l = new EmptyList&lt;Integer&gt;().filter(new GreaterThanTwo());\n|                         ^---------------------------------------------------^\n\njshell&gt; intList.filter(new GreaterThanTwo()).filter(new GreaterThanTwo());\n$.. ==&gt; 3, 4, EmptyList\njshell&gt; new EmptyList&lt;Integer&gt;().filter(new GreaterThanTwo()).filter(new GreaterThanTwo())\n$.. ==&gt; EmptyList\n</code></pre> <p>Make sure your <code>filter</code> method is as flexible as you can make it.</p> <pre><code>jshell&gt; class A implements BooleanCondition&lt;Object&gt; {\n   ...&gt;   public boolean test(Object o) {\n   ...&gt;     return false;\n   ...&gt;   }\n   ...&gt; }\njshell&gt; intList.filter(new A());\njshell&gt;\n</code></pre> <p>You can test your code by running the <code>Test2.java</code> provided.  Make sure your code follows the CS2030S Java style.</p> <pre><code>$ javac Test2.java\n$ java Test2\n$ java -jar ~cs2030s/bin/checkstyle.jar -c ~cs2030s/bin/cs2030_checks.xml *.java\n</code></pre>"},{"location":"practice/practice-pe1-sourcelist.html#implement-the-map-method","title":"Implement the <code>map</code> method","text":"<p>Implement the <code>map</code> method which takes in a parameter of type <code>Transformer</code> and returns a new <code>SourceList</code> where all elements of the new <code>SourceList</code> are the result of applying the <code>Transformer</code> to all the elements of the original <code>SourceList</code>. Note: that this should create new pairs and not change the current <code>SourceList</code>.</p> <p>Consider the following examples:</p> <pre><code>jshell&gt; SourceList&lt;Integer&gt; intList = new Pair&lt;&gt;(1, new Pair&lt;&gt;(2, new Pair&lt;&gt;(3, new Pair&lt;&gt;(4, new EmptyList&lt;&gt;()))))\njshell&gt; intList.map(new IntegerToString())\n$.. ==&gt; \"1\", \"2\", \"3\", \"4\", EmptyList\njshell&gt; intList\nintList ==&gt; 1, 2, 3, 4, EmptyList\n\njshell&gt; SourceList&lt;Integer&gt; intList = new Pair&lt;&gt;(1, new Pair&lt;&gt;(2, new Pair&lt;&gt;(3, new Pair&lt;&gt;(4, new EmptyList&lt;&gt;()))))\njshell&gt; SourceList&lt;String&gt; l = intList.map(new IntegerToString())\n\njshell&gt; SourceList&lt;Integer&gt; l = intList.map(new IntegerToString())\n|  Error:\n|  incompatible types: inference variable U has incompatible bounds\n|      equality constraints: java.lang.Integer\n|      lower bounds: java.lang.String\n|  SourceList&lt;Integer&gt; l = intList.map(new IntegerToString());\n|                          ^--------------------------------^\n\njshell&gt; new EmptyList&lt;Integer&gt;().map(new IntegerToString())\n$.. ==&gt; EmptyList\n\njshell&gt; SourceList&lt;String&gt; l = new EmptyList&lt;Integer&gt;().map(new IntegerToString())\n\njshell&gt; SourceList&lt;Integer&gt; l = new EmptyList&lt;Integer&gt;().map(new IntegerToString())\n|  Error:\n|  incompatible types: inference variable U has incompatible bounds\n|      equality constraints: java.lang.Integer\n|      lower bounds: java.lang.String\n|  SourceList&lt;Integer&gt; l = new EmptyList&lt;Integer&gt;().map(new IntegerToString());\n|                          ^-------------------------------------------------^\n</code></pre> <p>Make sure your <code>map</code> method is as flexible as you can make it.</p> <pre><code>jshell&gt; class A implements Transformer&lt;Object,Integer&gt; {\n   ...&gt;   public Integer transform(Object o) {\n   ...&gt;     return 0;\n   ...&gt;   }\n   ...&gt; }\njshell&gt; SourceList&lt;Object&gt; l = strList.map(new A());\njshell&gt;\n</code></pre>"},{"location":"practice/practice-pe1-sourcelist.html#implement-a-stringtolength-class","title":"Implement a <code>StringToLength</code> class","text":"<p>This class should implement the <code>Transformer</code> interface. The method of the class should take in a <code>String</code> and return an <code>Integer</code> which is the length of the <code>String</code>.</p> <p>Hint: The<code>java.lang.String ``length()</code> method may come in handy.</p> <p>Consider the following example:</p> <pre><code>jshell&gt; SourceList&lt;String&gt; strList = new Pair&lt;&gt;(\"AA\", new Pair&lt;&gt;(\"A\", new Pair&lt;&gt;(\"\", new EmptyList&lt;&gt;())));\njshell&gt; strList.map(new StringToLength())\n$.. ==&gt; 2, 1, 0, EmptyList\n\njshell&gt; SourceList&lt;Integer&gt; l = strList.map(new StringToLength())\njshell&gt; SourceList&lt;String&gt; l = strList.map(new StringToLength())\n|  Error:\n|  incompatible types: inference variable U has incompatible bounds\n|      equality constraints: java.lang.String\n|      lower bounds: java.lang.Integer\n|  SourceList&lt;String&gt; l = strList.map(new StringToLength());\n|                         ^-------------------------------^\n\njshell&gt; SourceList&lt;Integer&gt; intList = new Pair&lt;&gt;(1, new Pair&lt;&gt;(2, new Pair&lt;&gt;(3, new Pair&lt;&gt;(4, new EmptyList&lt;&gt;()))))\njshell&gt; intList.map(new IntegerToString()).map(new StringToLength())\n$.. ==&gt; 3, 3, 3, 3, EmptyList\njshell&gt; new EmptyList&lt;Integer&gt;().map(new IntegerToString()).map(new StringToLength())\n$.. ==&gt; EmptyList\njshell&gt; strList.map(new StringToLength()).filter(new GreaterThanTwo())\n$.. ==&gt; EmptyList\njshell&gt; intList.filter(new GreaterThanTwo()).map(new IntegerToString())\n$.. ==&gt; \"3\", \"4\", EmptyList\n</code></pre> <p>You can test your code by running the <code>Test3.java</code> provided.  Make sure your code follows the CS2030S Java style.</p> <pre><code>$ javac Test3.java\n$ java Test3\n$ java -jar ~cs2030s/bin/checkstyle.jar -c ~cs2030s/bin/cs2030_checks.xml *.java\n</code></pre>"},{"location":"practice/practice-pe1-stack.html","title":"Practice PE1 Question: ArrayStack","text":""},{"location":"practice/practice-pe1-stack.html#adapted-from-pe1-of-2122-semester-1","title":"Adapted from PE1 of 21/22 Semester 1","text":""},{"location":"practice/practice-pe1-stack.html#instructions-to-grab-practice-pe-question","title":"Instructions to grab Practice PE Question:","text":"<ol> <li>Accept the practice question here </li> <li>Log into the PE nodes and run <code>~cs2030s/get-pe1-stack</code> to get the practice question.</li> <li>There is no submission script</li> </ol> <p>You should see the following in your home directory.</p> <ul> <li>The files <code>Test1.java</code>, <code>Test2.java</code>, and <code>CS2030STest.java</code> for testing your solution.</li> <li>The skeleton files for this question: <code>ArrayStack.java</code>, and <code>Stack.java</code></li> <li>You may add new classes/interfaces as needed by the design.</li> </ul>"},{"location":"practice/practice-pe1-stack.html#background","title":"Background","text":"<p>Recall the Stack, a First-In-Last-Out (FILO) data structure. You can pop an item off the top of the stack, and push an item on to the stack. In this question, we will implement a generic stack using an array.</p> <p>In this question you are not permitted to use <code>java.util.Stack</code> or <code>java.util.ArrayList</code>.</p>"},{"location":"practice/practice-pe1-stack.html#create-a-new-generic-interface-stack-and-an-arraystack","title":"Create a new generic interface <code>Stack</code> and an <code>ArrayStack</code>","text":"<p>We first need to create a <code>Stack&lt;T&gt;</code> interface. It is a generic interface, with three abstract methods: - A <code>pop</code> method which returns an object of type <code>T</code> and has no arguments - A <code>push</code> method which returns nothing and has a single argument of type <code>T</code> - A <code>getStackSize</code> method returns an <code>int</code> and has no arguments</p> <p>Next, create a class <code>ArrayStack&lt;T&gt;</code> which implements <code>Stack&lt;T&gt;</code> using an array. The order of the items in the array dictates the order of items in the stack. This class has a constructor which takes in a single <code>int</code> which represents the maximum depth of the stack. The <code>push</code> method should put an item on top of the stack. If there is no more space in the stack, the <code>push</code> method should disregard the item being pushed on to the stack. The <code>pop</code> method should remove an item from the top of the stack and return it. If there are no items on the stack, the <code>pop</code> method should return <code>null</code>. The <code>getStackSize</code> method should return how many items are in the stack. Finally, the <code>toString</code> method should show the contents of the stack.</p> <p>If you find yourself in a situation where the compilers generate an unchecked type warning, but you are sure that your code is type safe, you can use <code>@SuppressWarnings(\"unchecked\")</code> (responsibly) to suppress the warning.</p> <p>Study the sample calls below to understand what is expected for the constructor, <code>toString</code> and other methods of <code>ArrayStack</code>.  Implement your class so that it outputs in the same way.</p> <pre><code>jshell&gt; Stack&lt;Integer&gt; st = new ArrayStack&lt;&gt;(3);\nst ==&gt; Stack:\njshell&gt; st.push(1);\njshell&gt; st;\nst ==&gt; Stack: 1\njshell&gt; st.push(1);\njshell&gt; st;\nst ==&gt; Stack: 1 1\njshell&gt; st.push(2);\njshell&gt; st;\nst ==&gt; Stack: 1 1 2\njshell&gt; st.getStackSize();\n$.. ==&gt; 3\njshell&gt; st.push(3);\njshell&gt; st;\nst ==&gt; Stack: 1 1 2\njshell&gt; st.pop();\n$.. ==&gt; 2\njshell&gt; st;\nst ==&gt; Stack: 1 1\njshell&gt; st.getStackSize();\n$.. ==&gt; 2\njshell&gt; st.pop();\n$.. ==&gt; 1\njshell&gt; st\nst ==&gt; Stack: 1\njshell&gt; st.getStackSize();\n$.. ==&gt; 1\njshell&gt; st.pop();\n$.. ==&gt; 1\njshell&gt; st\nst ==&gt; Stack:\njshell&gt; st.pop();\n$.. ==&gt; null\njshell&gt; st\nst ==&gt; Stack:\njshell&gt; st.pop();\n$.. ==&gt; null\njshell&gt; st\nst ==&gt; Stack:\njshell&gt; st.push(2);\njshell&gt; st;\nst ==&gt; Stack: 2\njshell&gt; Stack&lt;String&gt; st2 = new ArrayStack&lt;&gt;(10);\nst2 ==&gt; Stack:\njshell&gt; st2.push(\"Hello\");\njshell&gt; st2;\nst2 ==&gt; Stack: Hello\njshell&gt; st2.push(\"World\");\njshell&gt; st2;\nst2 ==&gt; Stack: Hello World\njshell&gt; st2.pop();\n$.. ==&gt; \"World\"\njshell&gt; st2.pop();\n$.. ==&gt; \"Hello\"\n</code></pre> <p>You can test your code by running the <code>Test1.java</code> provided.  Make sure your code follows the CS2030S Java style.</p> <pre><code>$ javac -Xlint:rawtypes -Xlint:unchecked Test1.java\n$ java Test1\n$ java -jar ~cs2030s/bin/checkstyle.jar -c ~cs2030s/bin/cs2030_checks.xml *.java\n</code></pre>"},{"location":"practice/practice-pe1-stack.html#creating-a-factory-method-of-and-a-pushall-method","title":"Creating a factory method <code>of</code> and a <code>pushAll</code> method","text":"<p>We will now implement a factory method <code>of</code>, this method will take in an array of items and an <code>int</code> which represents the maximum depth of the stack, and return a <code>ArrayStack</code> with the items pushed onto the stack in the order that they are present in the array. If the array length is greater than the size of the stack, only include the first <code>n</code> items of the array, where <code>n</code> is the stack size. For compatibility with <code>Test1.java</code>, you should not make your original constructor private.</p> <p>We will also create a <code>pushAll</code> method that has a single argument which is an <code>ArrayStack</code>.  <code>pushAll</code> repeatedly pops one item from the given <code>ArrayStack</code> and pushes them onto the target <code>ArrayStack</code>, until the given <code>ArrayStack</code> is empty.  Note that if the target <code>ArrayStack</code> is full, the pushed items will be lost.</p> <p>In addition, we will create a <code>popAll</code> method that has a single argument which is an <code>ArrayStack</code>.  <code>popAll</code> repeatedly pops one item from the target <code>ArrayStack</code> and pushes them onto the given <code>ArrayStack</code>, until the target <code>ArrayStack</code> is empty.  Note that if the given <code>ArrayStack</code> is full, the pushed items will be lost.</p> <p>Study the sample calls below to understand what is expected for the new methods of <code>ArrayStack</code>.  Implement your class so that it outputs in the same way.</p> <pre><code>jshell&gt; ArrayStack.of(new Integer[] {1, 2, 3}, 10);\n$.. ==&gt; Stack: 1 2 3\njshell&gt; ArrayStack.of(new Object[] {1, \"foo\", \"bar\"}, 10);\n$.. ==&gt; Stack: 1 foo bar\njshell&gt; ArrayStack&lt;Integer&gt; as0 = ArrayStack.of(new Integer[] {1, 2, 3, 4}, 2); \nas0$ ==&gt; Stack: 1 2\njshell&gt; ArrayStack&lt;Integer&gt; as1 = ArrayStack.of(new Integer[] {4, 5, 6}, 10);\nas1 ==&gt; Stack: 4 5 6\njshell&gt; ArrayStack&lt;Integer&gt; as2 = ArrayStack.of(new Integer[] {1, 2, 3}, 10);\nas2 ==&gt; Stack: 1 2 3\njshell&gt; as2.pushAll(as1);\njshell&gt; as2;\nas2 ==&gt; Stack: 1 2 3 6 5 4\njshell&gt; as1;\nas1 ==&gt; Stack:\njshell&gt; as1 = ArrayStack.of(new Integer[] {4, 5, 6}, 10);\nas1 ==&gt; Stack: 4 5 6\njshell&gt; ArrayStack&lt;Integer&gt; as3 = ArrayStack.of(new Integer[] {1, 2, 3}, 5);\nas3 ==&gt; Stack: 1 2 3\njshell&gt; as3.pushAll(as1);\njshell&gt; as3;\nas3 ==&gt; Stack: 1 2 3 6 5\njshell&gt; ArrayStack&lt;Number&gt; asn = new ArrayStack&lt;&gt;(10);\nasn ==&gt; Stack:\njshell&gt; asn.pushAll(as2);\njshell&gt; asn\nasn ==&gt; Stack: 4 5 6 3 2 1\njshell&gt; ArrayStack&lt;String&gt; as4 = ArrayStack.of(new String[] {\"d\", \"e\", \"f\"}, 10);\nas4 ==&gt; Stack: d e f\njshell&gt; ArrayStack&lt;String&gt; as5 = ArrayStack.of(new String[] {\"a\", \"b\", \"c\"}, 10);\nas5 ==&gt; Stack: a b c\njshell&gt; as4.popAll(as5);\njshell&gt; as5;\nas5 ==&gt; Stack: a b c f e d\njshell&gt; as4 = ArrayStack.of(new String[] {\"d\", \"e\", \"f\"}, 10);\nas4 ==&gt; Stack: d e f\njshell&gt; ArrayStack&lt;String&gt; as6 = ArrayStack.of(new String[] {\"a\", \"b\", \"c\"}, 5);\nas6 ==&gt; Stack: a b c\njshell&gt; as4.popAll(as6);\njshell&gt; as6;\nas6 ==&gt; Stack: a b c f e\njshell&gt; ArrayStack&lt;Integer&gt; as7 = ArrayStack.of(new Integer[] {7, 8, 9}, 5);\nas7 ==&gt; Stack: 7 8 9\njshell&gt; as7.popAll(asn);\njshell&gt; asn;\nasn ==&gt; Stack: 4 5 6 3 2 1 9 8 7\n</code></pre> <p>You can test your code by running the <code>Test2.java</code> provided.  Make sure your code follows the CS2030S Java style.</p> <pre><code>$ javac -Xlint:rawtypes -Xlint:unchecked Test2.java\n$ java Test2\n$ java -jar ~cs2030s/bin/checkstyle.jar -c ~cs2030s/bin/cs2030_checks.xml *.java\n</code></pre>"},{"location":"practice/practice-pe2-query.html","title":"Practice PE2 Question: Query","text":""},{"location":"practice/practice-pe2-query.html#adapted-from-pe2-of-2122-semester-2","title":"Adapted from PE2 of 21/22 Semester 2","text":""},{"location":"practice/practice-pe2-query.html#instructions-to-grab-practice-pe-question","title":"Instructions to grab Practice PE Question:","text":"<ol> <li>Accept the practice question here </li> <li>Log into the PE nodes and run <code>~cs2030s/get-pe2-query</code> to get the practice question.</li> <li>There is no submission script</li> </ol> <p>You should see the following in your home directory.</p> <ul> <li>The files <code>Test1.java</code>, <code>Test2.java</code>, and <code>CS2030STest.java</code> for testing your solution.</li> <li>The skeleton file for this question: <code>Query.java</code>.</li> <li>The following files are also provided: <code>StreamAPI.md</code></li> </ul>"},{"location":"practice/practice-pe2-query.html#background","title":"Background","text":"<p>In computing, we commonly organize data into tables for processing.  In this question, we would like to explore how we can process and manipulate data stored in tables using Streams. </p> <p>Consider the following table of customer records from a store.   Each row of the table contains the name of a customer, and a list of purchases (identified by purchase ids, which are integers).</p> <p>We will call this table the \"Customer Table\".</p> Names Purchase Ids Michelle 12, 56 Enzio 34, 90 Michael 78 <p>Each purchase has a cost.  The cost of each purchase is stored in another table called the \"Sales Table\".  Each row in this table contains a purchase id and the corresponding cost of the purchase.</p> Purchase Ids Cost 12 12.0 34 6.0 56 7.5 78 9.0 90 17.0 <p>In this question, we will implement these tables using <code>Map</code>. Recall that a <code>Map</code> is an abstraction over a set of (key, value) pairs. Each pair (key, value) is a <code>Map.Entry</code> stored in the <code>Map</code>.  Given a <code>Map.Entry</code>, we can retrieve the key with the <code>getKey()</code> method and retrieve the value with the <code>getValue()</code> method.</p> <p>Treating each name as a key and the list of purchases as the value, the Customer Table can be represented as a <code>Map</code> from a <code>String</code> (Names) to a <code>List&lt;Integer&gt;</code> (Purchase Ids).</p> <pre><code>Map&lt;String, List&lt;Integer&gt;&gt; customerTable;\ncustomerTable = Map.of(\n    \"Michelle\", List.of(12, 56), \n    \"Enzio\",    List.of(34, 90), \n    \"Michael\",  List.of(78));\n</code></pre> <p>We can get the value of a <code>key</code> by using the <code>get</code> method. <pre><code>customerTable.get(\"Michelle\") // returns a List.of(12, 56)\n</code></pre></p> <p>Java <code>Map</code> provides methods to create a stream out of a <code>Map</code> entries, keys, and values. <pre><code>customerTable.entrySet().stream() // returns a stream of `Map.Entry`\ncustomerTable.keySet().stream()   // returns a stream of the Map keys\ncustomerTable.values().stream()   // returns a stream of the Map values\n</code></pre></p> <p>Given the customers, list of their purchases, and the costs, we want to be able to build a table that maps between the name of the customer and the cost, as you can see below.</p> Customer name Cost Michelle 12.0 Michelle 7.5 Enzio 6.0 Enzio 17.0 Michael 9.0 <p>Our final goal is to sum up the total cost of all the purchases made by each customer, as demonstrated below.</p> Customer name Cost Michelle 19.5 Enzio 23.0 Michael 9.0"},{"location":"practice/practice-pe2-query.html#your-task","title":"Your Task","text":"<p>In this question, you are to write five <code>Stream</code> methods to operate on the Customer and Sales tables. Each method should only contain a single Stream pipeline.  Nothing more.  No local variables or classes can be defined.</p> <p>You may call the methods you create when solving other parts of this questions.</p>"},{"location":"practice/practice-pe2-query.html#getfilteredbykey","title":"getFilteredByKey","text":"<p>To get started, implement the <code>getFilteredByKey</code> methods. We have provided the skeleton for this first method in the <code>Query.java</code> file.</p> <p>The <code>getFilteredByKey</code> takes in a table with type <code>Map&lt;T, S&gt;</code> and a predicate of type <code>Predicate&lt;T&gt;</code>.  It returns a stream of entries (or rows) with the type <code>Stream&lt;Map.Entry&lt;T, S&gt;&gt;</code>, containing only rows in the original table for which the key passes the predicate.</p> <p>Note that you do not have to worry about PECS for this question.</p> <p>Study carefully how this method can be used in the examples below:</p> <pre><code>jshell&gt; /open Query.java\njshell&gt; Map&lt;String, List&lt;Integer&gt;&gt; customerTable = Map.of(\n   ...&gt;     \"Michelle\", List.of(12, 56), \n   ...&gt;     \"Enzio\",    List.of(34, 90), \n   ...&gt;     \"Michael\",  List.of(78));\njshell&gt; Query.getFilteredByKey(customerTable, x -&gt; x.equals(\"Enzio\")).forEach(System.out::println)\nEnzio=[34, 90]\njshell&gt; Query.getFilteredByKey(customerTable, x -&gt; x.startsWith(\"Mic\")).forEach(System.out::println)\nMichelle=[12, 56]\nMichael=[78]\njshell&gt; Query.getFilteredByKey(customerTable, x -&gt; x.startsWith(\"A\")).forEach(System.out::println)\n</code></pre>"},{"location":"practice/practice-pe2-query.html#getidsfromname","title":"getIdsFromName","text":"<p>We now write a method to get all of the purchase ids for a given customer name.  </p> <p>Write the method <code>getIdsFromName</code> which takes in the Customer Table of type <code>Map&lt;String, List&lt;Integer&gt;&gt;</code> and a customer name (a <code>String</code>).  It returns a <code>Stream&lt;Integer&gt;</code> containng all purchase ids for the given customer name.  We can assume that there is at most one customer with the given name.</p> <pre><code>jshell&gt; /open Query.java\njshell&gt; Map&lt;String, List&lt;Integer&gt;&gt; customerTable = Map.of(\n   ...&gt;     \"Michelle\", List.of(12, 56), \n   ...&gt;     \"Enzio\",    List.of(34, 90), \n   ...&gt;     \"Michael\",  List.of(78));\njshell&gt; Stream&lt;Integer&gt; purchaseIDs = Query.getIdsFromName(customerTable, \"Michelle\")\njshell&gt; purchaseIDs.collect(Collectors.toList());\n$.. ==&gt; [12, 56]\njshell&gt; Stream&lt;Integer&gt; purchaseIDs = Query.getIdsFromName(customerTable, \"Sam\")\njshell&gt; purchaseIDs.collect(Collectors.toList());\n$.. ==&gt; []\n</code></pre>"},{"location":"practice/practice-pe2-query.html#getcostsfromids","title":"getCostsFromIDs","text":"<p>With the list of purchase IDs, we will now get the cost of each of these purchases.  Write the method <code>getCostsFromIDs</code> that takes a Sales Table (of type <code>Map&lt;Integer, Double&gt;</code>) and a list of purchase ids (of type <code>Stream&lt;Integer&gt;</code>), and returns the cost of each purchase as a <code>Stream&lt;Double&gt;</code>.  The costs returned must be in the same order as the corresponding purchase IDs.</p> <p>Study carefully how these methods can be used in the examples below: <pre><code>jshell&gt; /open Query.java\njshell&gt; Map&lt;Integer, Double&gt; salesTable = Map.of(\n   ...&gt;     12, 12.0,\n   ...&gt;     34, 6.0,\n   ...&gt;     56, 7.5,\n   ...&gt;     78, 9.0,\n   ...&gt;     90, 17.0)\njshell&gt; Stream&lt;Double&gt; costs = Query.getCostsFromIDs(salesTable, Stream.of(12))\njshell&gt; costs.collect(Collectors.toList());\n$.. ==&gt; [12.0]\njshell&gt; Stream&lt;Double&gt; costs = Query.getCostsFromIDs(salesTable, Stream.of(12, 90))\njshell&gt; costs.collect(Collectors.toList());\n$.. ==&gt; [12.0, 17.0]\njshell&gt; Stream&lt;Double&gt; costs = Query.getCostsFromIDs(salesTable, Stream.of(7))\njshell&gt; costs.collect(Collectors.toList());\n$.. ==&gt; []\n</code></pre></p> <p>You can also test your code with <code>Test1.java</code>: <pre><code>$ javac Query.java\n$ javac Test1.java\n$ java Test1\n$ java -jar ~cs2030s/bin/checkstyle.jar -c ~cs2030s/bin/cs2030_checks.xml Query.java\n</code></pre></p>"},{"location":"practice/practice-pe2-query.html#allcustomercosts","title":"allCustomerCosts","text":"<p>We will now put the information retrieved from the two tables together, and create a new table showing, on each row, the name of each customer and the cost of each purchase by the customer.  </p> <p>We will represent the output table as a <code>Stream&lt;String&gt;</code>, where every string in the stream is a row of the new table.</p> <p>Write a method <code>allCustomerCosts</code> to do this.  The method takes in a \"Customer Table\" and a \"Sales Table\" and returns a <code>Stream&lt;String&gt;</code> representing the new table.  The order of the rows in the output does not matter.</p> <p>Study carefully how this method can be used in the examples below: <pre><code>jshell&gt; /open Query.java\njshell&gt; Map&lt;String, List&lt;Integer&gt;&gt; customerTable = Map.of(\n   ...&gt;     \"Michelle\", List.of(12, 56), \n   ...&gt;     \"Enzio\",    List.of(34, 90), \n   ...&gt;     \"Michael\",  List.of(78));\njshell&gt; Map&lt;Integer, Double&gt; salesTable = Map.of(\n   ...&gt;     12, 12.0,\n   ...&gt;     34, 6.0,\n   ...&gt;     56, 7.5,\n   ...&gt;     78, 9.0,\n   ...&gt;     90, 17.0)\njshell&gt; Map&lt;String, List&lt;Integer&gt;&gt; badCustomerTable = Map.of(\n   ...&gt;     \"Bill\", List.of(17),\n   ...&gt;     \"Sam\", List.of(19));\njshell&gt; Map&lt;Integer, Double&gt; badSalesTable = Map.of(\n   ...&gt;     99, 3.0,\n   ...&gt;     98, 2.0);\njshell&gt; Query.allCustomerCosts(customerTable, salesTable).forEach(System.out::println);\nMichelle: 12.0\nMichelle: 7.5\nMichael: 9.0\nEnzio: 6.0\nEnzio: 17.0\njshell&gt; Query.allCustomerCosts(customerTable, badSalesTable).forEach(System.out::println);\njshell&gt; Query.allCustomerCosts(badCustomerTable, salesTable).forEach(System.out::println);\n</code></pre></p>"},{"location":"practice/practice-pe2-query.html#totaledcustomercosts","title":"totaledCustomerCosts","text":"<p>Finally, we will now create a new table to show the name of each customer and the total cost of the purchases by the customer.  We will again represent the output table as a <code>Stream&lt;String&gt;</code>, where every string in the stream is a row of the table.</p> <p>Write a method <code>totaledCustomerCosts</code> to do this.  The method takes in a \"Customer Table\" and a \"Sales Table\" and returns a <code>Stream&lt;String&gt;</code> representing the new table.  The order of the rows in the output does not matter.</p> <p>Study carefully how this method can be used in the examples below: <pre><code>jshell&gt; /open Query.java\njshell&gt; Map&lt;String, List&lt;Integer&gt;&gt; customerTable = Map.of(\n   ...&gt;     \"Michelle\", List.of(12, 56), \n   ...&gt;     \"Enzio\",    List.of(34, 90), \n   ...&gt;     \"Michael\",  List.of(78));\njshell&gt; Map&lt;Integer, Double&gt; salesTable = Map.of(\n   ...&gt;     12, 12.0,\n   ...&gt;     34, 6.0,\n   ...&gt;     56, 7.5,\n   ...&gt;     78, 9.0,\n   ...&gt;     90, 17.0)\njshell&gt; Map&lt;String, List&lt;Integer&gt;&gt; badCustomerTable = Map.of(\n   ...&gt;     \"Bill\", List.of(17),\n   ...&gt;     \"Sam\", List.of(19));\njshell&gt; Map&lt;Integer, Double&gt; badSalesTable = Map.of(\n   ...&gt;     99, 3.0,\n   ...&gt;     98, 2.0);\njshell&gt; Query.totaledCustomerCosts(customerTable, salesTable).forEach(System.out::println);\nMichelle: 19.5\nMichael: 9.0\nEnzio: 23.0\njshell&gt; Query.totaledCustomerCosts(customerTable, badSalesTable).forEach(System.out::println);\nMichelle: 0.0\nMichael: 0.0\nEnzio: 0.0\njshell&gt; Query.totaledCustomerCosts(badCustomerTable, badSalesTable).forEach(System.out::println);\nBill: 0.0\nSam: 0.0\n</code></pre></p> <p>You can also test your code with <code>Test2.java</code>: <pre><code>$ javac Query.java\n$ javac Test2.java\n$ java Test2\n$ java -jar ~cs2030s/bin/checkstyle.jar -c ~cs2030s/bin/cs2030_checks.xml Query.java\n</code></pre></p>"},{"location":"practice/practice-pe2-try.html","title":"Practice PE2 Question: Try","text":""},{"location":"practice/practice-pe2-try.html#adapted-from-pe2-of-2021-semester-2","title":"Adapted from PE2 of 20/21 Semester 2","text":""},{"location":"practice/practice-pe2-try.html#instructions-to-grab-practice-pe-question","title":"Instructions to grab Practice PE Question:","text":"<ol> <li>Accept the practice question here </li> <li>Log into the PE nodes and run <code>~cs2030s/get-pe2-try</code> to get the practice question.</li> <li>There is no submission script</li> </ol> <p>You should see the following in your home directory.</p> <ul> <li>The files <code>Test1.java</code>, <code>Test2.java</code>, <code>Test3.java</code>, <code>Test4.java</code>, and <code>CS2030STest.java</code> for testing your solution.</li> <li>The skeleton file for this question: <code>cs2030s/fp/Try.java</code>.</li> <li>The following files are also provided: <code>Circle.java</code> , <code>Point.java</code>, <code>Consumer.java</code>, <code>Runnable.java</code>, <code>Producer.java</code>, and <code>Transformer.java</code></li> </ul>"},{"location":"practice/practice-pe2-try.html#background","title":"Background","text":"<p>In Java, we handle exceptions with <code>try</code> and <code>catch</code>.  For example, <pre><code>Circle c;\ntry {\n  c = new Circle(point, radius);\n} catch (IllegalArgumentException e) {\n  System.err.println(e.getMessage());\n}\n</code></pre></p> <p>When we code with the functional paradigm, however, we prefer to chain our operations and keep our functions pure.  A more functional way to write this block of code is to use the <code>Try</code> monad: <pre><code>Try&lt;Circle&gt; c = Try.of(() -&gt; new Circle(point, radius))\n</code></pre></p> <p>The <code>Try</code> monad is a way to encapsulate the result of the computation if it is successful, or the reason for failure if the computational failed.  We refer to these two possibilities as success and failure respectively.  In the example above, the <code>Try&lt;Circle&gt;</code> instance would contain the new circle if it is a success, or an <code>IllegalArgumentException</code> if it fails.</p> <p>The reason for failure can be encapsulated as an instance of the <code>Throwable</code> class.  This class is defined in the <code>java.lang</code> package and it is the parent class of <code>Exception</code> and <code>Error</code>.  A <code>Throwable</code> instance can be thrown and caught.  Note that:  - <code>cs2030s.fp.Producer::produce</code> and <code>cs2030s.fp.Runnable::run</code> now throw a <code>Throwable</code>.  - You don't need to call any methods or access any fields related to <code>Throwable</code> beyond catching, throwing, and converting to string.</p>"},{"location":"practice/practice-pe2-try.html#your-task","title":"Your Task","text":"<p>You will implement the <code>Try</code> monad in this question as part of the <code>cs2030s.fp</code> package.</p> <p>We break down the tasks you need to do into several sections.  We suggest that you read through the whole question, plan your solution carefully before starting.</p> <p>Please be reminded of the following:</p> <ul> <li> <p>You should design your code so that it is extensible to other possible states of computation in the future, beyond just success and failure. </p> </li> <li> <p>Your code should be type-safe and catch as many type mismatches as possible during compile time.</p> </li> </ul>"},{"location":"practice/practice-pe2-try.html#assumption","title":"Assumption","text":"<p>You can assume that everywhere a method of <code>Try</code> accepts a functional interface or a <code>Throwable</code> as a parameter, the argument we pass in will not be <code>null</code>.  When a value is expected, however, there is a possibility that we pass in a <code>null</code> as an argument.</p>"},{"location":"practice/practice-pe2-try.html#the-basics","title":"The Basics","text":"<p>First, please implement the following methods:</p> <ul> <li> <p>The <code>of</code> factory method, which allows us to create a new <code>Try</code> monad with a producer of type <code>Producer</code> (imported from the package <code>cs2030s.fp.Producer</code>).    Returns success if the producer produces a value successfully, or a failure containing the throwable if the producer throws an exception.</p> </li> <li> <p>The <code>success</code> factory method, which allows us to create a new <code>Try</code> monad with a value.  A <code>Try</code> monad created this way is always a success.</p> </li> <li> <p>The <code>failure</code> factory method, which allows us to create a new <code>Try</code> monad with a <code>Throwable</code>.  A <code>Try</code> monad created this way is always a failure.</p> </li> <li> <p>Override the <code>equals</code> method in <code>Object</code> so that it checks if two different <code>Try</code> instances are equal.  Two <code>Try</code> instances are equal if (i) they are both a success and the values contained in them equal to each other, or (ii) they are both a failure and the <code>Throwable</code>s contained in them have the same string representation.</p> </li> <li> <p>Implement the method <code>get()</code>. <code>get()</code> returns the value if the <code>Try</code> is a success.  It throws the <code>Throwable</code> if it is a failure.</p> </li> </ul> <p>Study carefully how these methods can be used in the examples below: <pre><code>jshell&gt; import cs2030s.fp.Producer\njshell&gt; import cs2030s.fp.Try\n\njshell&gt; Try.success(1).get();\n$.. ==&gt; 1\n\njshell&gt; try {\n   ...&gt;   Try.failure(new Error()).get();\n   ...&gt; } catch (Error e) { \n   ...&gt;   System.out.println(e);\n   ...&gt; }\njava.lang.Error\n\njshell&gt; Try.&lt;Number&gt;of((Producer&lt;Integer&gt;) () -&gt; 2).get();\n$.. ==&gt; 2\n\njshell&gt; try {\n   ...&gt;   Try&lt;Number&gt; t = Try.of(() -&gt; 4/0);\n   ...&gt; } catch (java.lang.ArithmeticException e) { \n   ...&gt;   System.out.println(e);\n   ...&gt; }\n\njshell&gt; Try.success(3).equals(Try.success(3))\n$.. ==&gt; true\njshell&gt; Try.success(null).equals(Try.success(null))\n$.. ==&gt; true\njshell&gt; Try.success(3).equals(Try.success(null))\n$.. ==&gt; false\njshell&gt; Try.success(null).equals(Try.success(3))\n$.. ==&gt; false\njshell&gt; Try.success(3).equals(Try.success(\"3\"))\n$.. ==&gt; false\njshell&gt; Try.success(3).equals(3)\n$.. ==&gt; false\njshell&gt; Try.failure(new Error()).equals(new Error())\n$.. ==&gt; false\njshell&gt; Try.failure(new Error()).equals(Try.success(3))\n$.. ==&gt; false\njshell&gt; Try.failure(new Error()).equals(Try.success(new Error()))\n$.. ==&gt; false\njshell&gt; Try.success(new Error()).equals(Try.failure(new Error()))\n$.. ==&gt; false\njshell&gt; Try.failure(new ArithmeticException()).equals(Try.failure(new Error()))\n$.. ==&gt; false\njshell&gt; Try.failure(new ArithmeticException()).equals(Try.failure(new ArithmeticException()))\n$.. ==&gt; true\n</code></pre></p> <p>You can also test your code with <code>Test1.java</code>: <pre><code>$ javac -Xlint:unchecked -Xlint:rawtypes cs2030s/fp/Try.java\n$ javac Test1.java\n$ java Test1\n$ java -jar ~cs2030s/bin/checkstyle.jar -c ~cs2030s/bin/cs2030_checks.xml cs2030s/fp/Try.java\n</code></pre></p> <p>Write the javadoc documentation for <code>of</code>, <code>success</code>, and <code>failure</code> for <code>Try</code>.  Note that since we do not require you to write javadoc for every class and methods, <code>checkstyle</code> no longer warns about missing javadoc for your class and methods.</p>"},{"location":"practice/practice-pe2-try.html#map","title":"map","text":"<p>Now, implement the <code>map</code> method so that we can apply a computation on the content of <code>Try</code>.  If <code>map</code> is called on a <code>Try</code> instance that is a failure, the same instance of <code>Try</code> is returned.  Otherwise, if it is a success, the lambda expression is applied to the value contained within <code>Try</code>.  If this lambda expression throws a <code>Throwable</code>, the calling <code>Try</code> becomes a failure containing the <code>Throwable</code> thrown.</p> <p>Study carefully how <code>map</code> can be used in the examples below: <pre><code>jshell&gt; import cs2030s.fp.Producer\njshell&gt; import cs2030s.fp.Transformer\njshell&gt; import cs2030s.fp.Try\n\njshell&gt; Try.success(4).map(x -&gt; x + 1).get();\n$.. ==&gt; 5\n\njshell&gt; try {\n   ...&gt;   Try.failure(new NullPointerException()).map(x -&gt; x.toString()).get();\n   ...&gt; } catch (NullPointerException e) {\n   ...&gt;   System.out.println(e);\n   ...&gt; }\njava.lang.NullPointerException\n\njshell&gt; Try.failure(new IOException()).map(x -&gt; x.toString()).equals(Try.failure(new IOException()));\n$.. ==&gt; true\n\njshell&gt; Try.success(4).map(x -&gt; 8 / x).map(x -&gt; x + 1).get();\n$.. ==&gt; 3\n\njshell&gt; try {\n   ...&gt;   Try.success(0).map(x -&gt; 8 / x).map(x -&gt; x + 1).get();\n   ...&gt; } catch (ArithmeticException e) {\n   ...&gt;   System.out.println(e);\n   ...&gt; }\njava.lang.ArithmeticException: / by zero\n\njshell&gt; Transformer&lt;Object, Integer&gt; hash = x -&gt; x.hashCode();\njshell&gt; Try.success(\"hello\").map(hash).get()\n$.. ==&gt; 99162322\n\njshell&gt; try {\n   ...&gt;   Try.&lt;Integer&gt;success(null).map(hash).get();\n   ...&gt; } catch (NullPointerException e) {\n   ...&gt;   System.out.println(e);\n   ...&gt; }\njava.lang.NullPointerException\n</code></pre></p> <p>You can also test your code with <code>Test2.java</code>: <pre><code>$ javac -Xlint:unchecked -Xlint:rawtypes cs2030s/fp/Try.java\n$ javac Test2.java\n$ java Test2\n$ java -jar ~cs2030s/bin/checkstyle.jar -c ~cs2030s/bin/cs2030_checks.xml cs2030s/fp/Try.java\n</code></pre></p>"},{"location":"practice/practice-pe2-try.html#flatmap","title":"flatMap","text":"<p>Now, make <code>Try</code> a monad.  Implement the <code>flatMap</code> method so that we can compose multiple methods that produce a <code>Try</code> together.  If <code>flatMap</code> is called on a failure, return the failure.  Otherwise, if it is a success, apply the lambda expression on the value contained within <code>Try</code> and return the result.</p> <p>Study carefully how <code>map</code> can be used in the examples below: <pre><code>jshell&gt; import cs2030s.fp.Producer\njshell&gt; import cs2030s.fp.Transformer\njshell&gt; import cs2030s.fp.Try\n\njshell&gt; Try.success(4).flatMap(x -&gt; Try.success(x + 1)).get();\n$.. ==&gt; 5\n\njshell&gt; try {\n   ...&gt;   Try.success(4)\n   ...&gt;       .flatMap(x -&gt; Try.failure(new IOException()))\n   ...&gt;       .get();\n   ...&gt; } catch (IOException e) {\n   ...&gt;   System.out.println(e);\n   ...&gt; }\njava.io.IOException\n\njshell&gt; try {\n   ...&gt;   Try.failure(new NullPointerException())\n   ...&gt;       .flatMap(x -&gt; Try.success(x.toString()))\n   ...&gt;       .get();\n   ...&gt; } catch (NullPointerException e) {\n   ...&gt;   System.out.println(e);\n   ...&gt; }\njava.lang.NullPointerException\n\njshell&gt; Try.failure(new IOException()).flatMap(x -&gt; Try.success(x.toString())).equals(Try.failure(new IOException()));\n$.. ==&gt; true\n\njshell&gt; try {\n   ...&gt;   Try.failure(new NullPointerException())\n   ...&gt;       .flatMap(x -&gt; Try.failure(new IOException()))\n   ...&gt;       .get();\n   ...&gt; } catch (NullPointerException e) {\n   ...&gt;   System.out.println(e);\n   ...&gt; }\njava.lang.NullPointerException\n\njshell&gt; Transformer&lt;Object, Try&lt;Integer&gt;&gt; hash = x -&gt; Try.success(x.hashCode());\njshell&gt; Try&lt;Number&gt; t = Try.success(\"hello\").flatMap(hash);\n</code></pre></p> <p>You can also test your code with <code>Test3.java</code>: <pre><code>$ javac -Xlint:unchecked -Xlint:rawtypes cs2030s/fp/Try.java\n$ javac Test3.java\n$ java Test3\n$ java -jar ~cs2030s/bin/checkstyle.jar -c ~cs2030s/bin/cs2030_checks.xml cs2030s/fp/Try.java\n</code></pre></p>"},{"location":"practice/practice-pe2-try.html#dealing-with-failures","title":"Dealing with failures","text":"<p>The methods <code>map</code> and <code>flatMap</code> apply the given lambda to the value contained within the <code>Try</code> monad where it is a success.  Write the following method to deal with failure:</p> <ul> <li><code>onFailure</code>: Return this instance if the calling <code>Try</code> instance is a success.  Consume the <code>Throwable</code> with a <code>Consumer</code> if it is a failure, and then either (i) return this instance if the consumer runs successfully, or (ii) return a failure instance containing the error/exception when consuming the <code>Throwable</code>.   </li> </ul> <p>For example, we can use <code>onFailure</code> to replace this snippet  <pre><code>Circle c;\ntry {\n  c = new Circle(point, radius);\n} catch (IllegalArgumentException e) {\n  System.err.println(e.getMessage());\n}\n</code></pre></p> <p>with: <pre><code>Try&lt;Circle&gt; c = Try.of(() -&gt; new Circle(point, radius))\n                   .onFailure(System.err::println);\n</code></pre></p> <p>We can also recover from the failure, by turning the <code>Try</code> into a success.  Write the following method:</p> <ul> <li><code>recover</code>: Return this instance if it is a success.  If this <code>Try</code> instance is a failure.  Apply the given <code>Transformer</code> to the <code>Throwable</code>, if the transformation is a success, return the resulting <code>Try</code>, otherwise, return a failure containing the error/exception when transforming the <code>Throwable</code>.</li> </ul> <p>For example, we can use <code>recover</code> to replace this snippet  <pre><code>Circle c;\ntry {\n  c = new Circle(point, radius);\n} catch (IllegalArgumentException e) {\n  c = new Circle(point, 1);\n}\n</code></pre></p> <p>with: <pre><code>Try&lt;Circle&gt; c = Try.of(() -&gt; new Circle(point, radius))\n                   .recover(e -&gt; new Circle(point, 1));\n</code></pre></p> <p>Study carefully how <code>onFailure</code> and <code>recover</code> can be used in the examples below: <pre><code>jshell&gt; import cs2030s.fp.Consumer\njshell&gt; import cs2030s.fp.Producer\njshell&gt; import cs2030s.fp.Transformer\njshell&gt; import cs2030s.fp.Try\n\njshell&gt; Try.success(4).onFailure(System.out::println).get()\n$.. ==&gt; 4\n\njshell&gt; try {\n   ...&gt;   Try.failure(new IOException()).onFailure(System.out::println).get();\n   ...&gt; } catch (IOException e) {\n   ...&gt;   System.out.println(e);\n   ...&gt; }\njava.io.IOException\njava.io.IOException\n\njshell&gt; try {\n   ...&gt;   Try.failure(new IOException()).onFailure(e -&gt; { int x = 1 / 0; }).get();\n   ...&gt; } catch (ArithmeticException e) {\n   ...&gt;   System.out.println(e);\n   ...&gt; }\njava.lang.ArithmeticException: / by zero\n\njshell&gt; Consumer&lt;Object&gt; print = System.out::println\njshell&gt; Try.&lt;Number&gt;success(4).onFailure(print).get()\n$.. ==&gt; 4\n\njshell&gt; Try.success(4).recover(e -&gt; 10).get()\n$.. ==&gt; 4\njshell&gt; Try.failure(new IOException()).recover(e -&gt; 10).get();\n$.. ==&gt; 10\n\njshell&gt; try {\n   ...&gt;   Try.failure(new IOException()).recover(e -&gt; e.hashCode() / 0).get();\n   ...&gt; } catch (ArithmeticException e) {\n   ...&gt;   System.out.println(e);\n   ...&gt; }\njava.lang.ArithmeticException: / by zero\n\njshell&gt; Transformer&lt;Object, Integer&gt; hash = x -&gt; x.hashCode();\njshell&gt; Try.&lt;Number&gt;success(4).recover(hash).get()\n$.. ==&gt; 4\n</code></pre></p> <p>You can also test your code with <code>Test4.java</code>: <pre><code>$ javac -Xlint:unchecked -Xlint:rawtypes cs2030s/fp/Try.java\n$ javac Test4.java\n$ java Test4\n$ java -jar ~cs2030s/bin/checkstyle.jar -c ~cs2030s/bin/cs2030_checks.xml cs2030s/fp/Try.java\n</code></pre></p> <p>Write the javadoc documentation for <code>onFailure</code> and <code>recover</code> for <code>Try</code>.</p>"},{"location":"unix/index.html","title":"Index","text":""},{"location":"unix/index.html#using-unix-cli","title":"Using Unix CLI","text":"<ul> <li>Background and Philosophy of Unix</li> <li>Essential Unix Commands</li> <li>Advanced Unix Commands</li> </ul>"},{"location":"unix/advanced.html","title":"Unix CLI: Advanced","text":"<p>This article is adapted from the notes of the Unix@Home Workshop  held in August 2020.  </p> <p>After reading this article, students should</p> <ul> <li>appreciate the philosophy of Unix where small utility programs can be composed together to perform a complex task using the pipe <code>|</code> operator</li> <li>be aware of basic Unix utilities: <code>echo</code>, <code>sort</code>, <code>uniq</code>, <code>grep</code>, <code>head</code>, and <code>tail</code>.</li> <li>be able to use basic pattern matching <code>*</code> <code>?</code> <code>[]</code> and <code>{}</code> in <code>bash</code></li> <li>know how to use Tab, Ctrl+P, and Ctrl+N to work more efficiently in <code>bash</code></li> <li>know how to save time and effort by automating long complex commands using <code>bash</code> scripts</li> </ul>"},{"location":"unix/advanced.html#composing-programs-with","title":"Composing Programs with <code>|</code>","text":"<p>Another key innovation of Unix that led to its success is the invention of the <code>|</code> operator.  </p> <p>Before Unix, operating systems tend to provide complex, monolithic, programs.  The philosophy of Unix, however, is to provide many small, simple, utility programs, that can be composed to complete a more complex task.  These small programs each do one thing only (and do it well) and so are easier to write and less prone to bugs.</p> <p>The composition of these utility programs relies on two things.  First, plain text is often used as input and output of the programs.  These allow the programs to understand each other easily.  Second, they use <code>|</code> to communicate with each other.  The <code>|</code> operator takes the standard output from one program and redirects it as the standard input of another program.</p> <p>For instance, <pre><code>$ cat test.txt | wc\n       1      11      64\n</code></pre> compose <code>cat</code> and <code>wc</code> together.  Recall that <code>cat</code> reads the content of the file and prints it to standard output.  Here, we pipe the standard output from <code>cat</code> to <code>wc</code>.  So now, these printed texts are redirected as the standard input to <code>wc</code>.</p> <p>But this is just the same as <pre><code>$ wc &lt; test.txt\n</code></pre> that we have seen before.  What's the power in <code>|</code>?  </p> <p>Now, recall that we have made copies of <code>test.txt</code> earlier, into <code>foo.txt</code> and <code>bar.txt</code>.  If you have not done so or have removed them, you can quickly reproduce the files with: <pre><code>$ cp test.txt foo.txt\n$ cp test.txt bar.txt\n</code></pre></p> <p>Let's suppose now I want to count the total number of words for all three files.  Instead of calling <code>wc</code> on each file one by one, and sum them up myself.  I can just run:</p> <pre><code>$ cat test.txt foo.txt bar.txt | wc\n       3      33     192\n</code></pre> <p>Here, <code>cat</code> reads the three files, concatenates their content, and passes the output to <code>wc</code> for counting.</p>"},{"location":"unix/advanced.html#useful-utilities","title":"Useful Utilities","text":"<p>Before we see more interesting examples of using <code>|</code>, let's move beyond <code>cat</code> and <code>wc</code>, and see what other simple tools are there in Unix.</p>"},{"location":"unix/advanced.html#head-and-tail","title":"<code>head</code> and <code>tail</code>","text":"<p><code>head</code> and <code>tail</code> print out the first \\(k\\) lines and last \\(k\\) lines from a file (or standard input if the file name is not given).  By default, \\(k\\) is 10, but you can pass in an argument to specify \\(k\\).</p> <pre><code>$ cat test.txt foo.txt bar.txt\nThis is a test file for learning Unix file management commands.\nThis is a test file for learning Unix file management commands.\nThis is a test file for learning Unix file management commands.\n$ cat test.txt foo.txt bar.txt | tail -1\nThis is a test file for learning Unix file management commands.\n</code></pre>"},{"location":"unix/advanced.html#echo","title":"<code>echo</code>","text":"<p><code>echo</code> simply prints out the command-line argument to the standard output.</p> <pre><code>$ echo \"hello world!\"\nhello world!\n</code></pre>"},{"location":"unix/advanced.html#sort","title":"<code>sort</code>","text":"<p><code>sort</code> rearrange the input lines in alphabetical order. <pre><code>$ sort\njohn\njane\npeter\nmary^D\njane\njohn\nmary\npeter\n</code></pre></p> <p>In the example above, I entered <code>john</code>, <code>jane</code>, <code>peter</code>, <code>mary</code> followed by Ctrl+D to signify the end of input.  <code>sort</code> prints out <code>jane</code>, <code>john</code>, <code>mary</code>, <code>peter</code>, in that order.</p>"},{"location":"unix/advanced.html#uniq","title":"<code>uniq</code>","text":"<p><code>uniq</code> remove any two consecutive lines that are the same.</p> <pre><code>$ uniq\n1\n2\n2\n2\n1\n1^D\n1\n2\n1\n</code></pre> <p>For instance, in the above, there are three consecutive lines of <code>2</code>, so only one remained.  There are also two consecutive lines of <code>1</code>, so only one remained.`</p>"},{"location":"unix/advanced.html#grep","title":"<code>grep</code>","text":"<p><code>grep</code> returns the lines of text from the given file (or the standard input) that matches the given string.  For instance, run</p> <pre><code>$ grep abc\n</code></pre> <p>and start typing in some lines of text, some containing <code>abc</code>, some do not.  <code>grep</code> will spew out into the standard output all the lines that contain the text <code>abc</code> somewhere.  As usual, hit Ctrl+D when you are done.</p>"},{"location":"unix/advanced.html#pipe-example","title":"Pipe Example","text":"<p>To give you an example of how useful <code>|</code> is, here is a real example.  When processing the registration of the workshop, I have quite a few registrations that are duplicates -- students registered more than once.  I need a quick way to count how many unique registrants are there. So I keep the student ID of all registrants in a file called <code>ID</code>.  For instance, the file <code>ID</code> contains (not real data, of course)</p> <pre><code>A1234567X,CS\nA1234559A,CEG\nA1239999J,CEG\nA1234580K,CEG\nA1233210O,CS\nA1234567X,CS\nA1234581Q,ISC\nA1233216T,ISC\nA1239999J,CEG\n</code></pre> <p>Now, to count how many unique registrants, I just need to run:</p> <pre><code>$ cat ID | sort | uniq | wc -l\n    7\n</code></pre> <p>To count how many uniq registrants are <code>CEG</code> students, I just change it to: <pre><code>$ cat ID | sort | uniq | grep CEG | wc -l\n    3\n</code></pre></p>"},{"location":"unix/advanced.html#pattern-matching-in-bash","title":"Pattern Matching in <code>bash</code>","text":"<p>We now show you another productivity shortcut.  In an example earlier, you have seen how we passed in more than one file name into <code>cat</code>.  Recall that we can use Tab to auto-complete the file names, so we can hit fewer keys on the keyboards. Now, we show you there is an even faster way.</p> <p>Instead of <pre><code>$ cat test.txt foo.txt bar.txt | wc\n</code></pre></p> <p>We could just run <pre><code>$ cat *.txt | wc\n</code></pre></p> <p>The <code>*</code> is a special character in <code>bash</code> that represents 0 or more characters.  So, this command essentially says, <code>cat</code> any files that contain 0 or more characters, followed by <code>.txt</code>.</p> <p>The table below summarizes the useful patterns:</p> Pattern Matches <code>*</code> 0 or more characters <code>?</code> one character <code>[..]</code> one character, coming from the given set between <code>[</code> and <code>]</code>, <code>-</code> to indicate a range. <code>{.., ..}</code> Either one of the names, separated by <code>,</code>."},{"location":"unix/advanced.html#example-1","title":"Example 1:","text":"<pre><code>$ ls ???.txt\nbar.txt foo.txt\n</code></pre> <p>Since we use three <code>?</code>, it matches any file name with three characters followed by <code>.txt</code>.</p>"},{"location":"unix/advanced.html#example-2","title":"Example 2:","text":"<pre><code>$ ls [f-t]*t\nfoo.txt test.txt\n</code></pre> <p>The expression <code>[f-t]*t</code> matches all file names that start with the alphabet <code>f</code>, <code>g</code>, etc., until <code>t</code>, followed by zero or more characters, followed by <code>t</code>.</p>"},{"location":"unix/advanced.html#example-3","title":"Example 3:","text":"<pre><code>$ ls *.txt\nbar.txt foo.txt test.txt\n$ ls {fo,ba}??txt   \nbar.txt foo.txt\n</code></pre> <p>The expression <code>{fo,ba}??txt</code> matches any file names the start with either <code>fo</code> or <code>ba</code>, followed by two characters, followed by <code>txt</code>.</p>"},{"location":"unix/advanced.html#leveling-up-your-productivity-with-cli","title":"Leveling Up Your Productivity with CLI","text":""},{"location":"unix/advanced.html#minimizing-hand-movements","title":"Minimizing Hand Movements","text":"<p>You have seen how you can manage files and navigate around the directory structure, all by interacting with the command-line interface.  No windows. No mouse.  Just you, the keyboard, and the terminal.  You do not even need to use any arrow keys or function keys.  </p> <p>Why is this a big deal?  Let's look at the image of the keyboard below:</p> <p></p> <p>We only need to use the keys colored in pink.  And since these keys are concentrated in a small region on the keyboard, for most of us, we can reach the keys if we just position our hands over the keyboard1, we only need to move our fingers to type.  </p> <p></p>"},{"location":"unix/advanced.html#minimizing-typing","title":"Minimizing Typing","text":"<p>We can even minimize the movement of our fingers in several ways by typing less.  We have seen several ways where we have achieved these:</p> <ul> <li>Unix commands are named economically -- they are often only a few characters long.</li> <li>We can use Tab to auto-complete a command or a file name.</li> <li>We can use Ctrl+P or Ctrl+N to repeat a previous command.</li> </ul> <p>There are many more <code>bash</code> shortcuts for productivity, if you are keen, take a look at this cheat sheet.</p> <p>You have also seen that Unix has many small, simple, utilities that we can compose to solve a task.  But composing them requires much typing:</p> <pre><code>$ cat ID | sort | uniq | grep CEG | wc -l\n</code></pre> <p>If we need to run this over and over again or share this command with someone, we can simply put these commands in a file, and then run it by invoking its name.  Such a file containing commands for the shell is called a shell script.</p> <p>For example, let's create a file named <code>hello.sh</code> containing the line <code>echo hello!</code> by: <pre><code>$ cat &gt; hello.sh\necho hello!^D\n</code></pre></p> <p>The extension <code>.sh</code> is not necessary, but it is just something I use so that I can tell that this file contains a shell script.  In the example above, <code>cat</code> will wait for me to enter something on the keyboard.  So I entered <code>echo hello!</code> followed by Ctrl+D to indicate the end of the input.</p> <p>Now, to execute this file, we run: <pre><code>$ bash hello.sh\nhello!\n</code></pre> or <pre><code>$ bash &lt; hello.sh\nhello!\n</code></pre></p> <p>Recall that we said Unix shells do not necessarily interact with the users.  This is an example.  We pass the file <code>hello.sh</code> to a new instance of <code>bash</code>, asking it to interpret the lines inside this file as commands to execute.  </p> <p>Remember that we want to minimize typing.  What if we can just pass the filename directly to <code>bash</code> to execute?</p> <pre><code>$ ./hello.sh\nbash: ./hello.sh: Permission denied\n</code></pre> <p>Here, we specify the relative path of the script <code>hello.sh</code>, including the prefix <code>./</code> (for reasons that we will explain later).  But we should get an error telling us <code>Permission defined</code>.  Recall from the <code>File Permissions</code> section that a file needs to have the executable <code>x</code> permission to be executed.  So we need to add this permission for ourselves: <pre><code>$ chmod u+x hello.sh\n$ ./hello.sh\nhello!\n</code></pre></p> <ol> <li> <p>The recommended placement of hands over the keyboard is so that the thumbs are over the Space bar, the left fingers are over A S D F, and the right fingers are over J K L ;.\u00a0\u21a9</p> </li> </ol>"},{"location":"unix/background.html","title":"Unix CLI: Background","text":"<p>This article is a replication of the notes from the Unix@Home Workshop held in August 2020.  </p> <p>After reading this article, students should </p> <ul> <li>understand the basic terms: CLI, terminal, shell, command prompt</li> <li>appreciate why CLI is more efficient</li> <li>aware of the commonly used terminal control sequences </li> </ul>"},{"location":"unix/background.html#what-is-command-line-interfaces","title":"What is Command-Line Interfaces?","text":"<p>The command-line interface, or just CLI for short, is an important interface that we, as computing professionals, interact with the computer for most of our day-to-day tasks.</p> <p>In contrast to graphical user interfaces where users use a mouse to click/drag on menus and windows to interact with a computer, the command-line interface uses a keyboard and text.  The users would type a command to instruct the computer to do something, and the computer would respond by displaying the reply to the user.</p> <p>CLI evolves from teletypes machines where users would interact with the computer through a typewriter-like machine (see Figure 2.2. of this article for an example).  Users would type a command on the keyboard, and the typewriter would print out, line-by-line, the output on a piece of paper.  This is the era before monitors and mice.  Again, driven by constraints and necessity, CLI interfaces are designed to be simple and economical.  The commands are short and fast to type; the responses are succinct.</p> <p> Figure: A teletype device (Model 33 ASR) to interact with a computer. </p>"},{"location":"unix/background.html#why-cli-over-gui","title":"Why CLI over GUI?","text":"<p>Since CLI is designed to be economical, CLI is much more efficient and productive to use, in particular when we are interacting with a remote computer over the network -- sending text back and forth is much more efficient than sending graphical elements over the network.  Each character takes up to two bytes, but each pixel alone takes up 3 bytes of data.</p> <p>Another reason why using CLI is faster and more productive is that user can keep their hands on the keyboard at all times and does not need to switch frequently between keyboard and mouse._  While research has shown that GUI and mouse are great for casual users, for software developers that need to type on the keyboard most of the time, having to switch between keyboard and mouse is a productivity-killer.</p> <p>Further, CLI commands typically provide a host of options that is accessible directly (in contrast to clicking through preference dialogues) from the command line, making these commands flexible and customizable.</p> <p>Finally, since these commands are just text, we can put together a sequence of commands easily as a script, to automate highly repetitive tasks.</p>"},{"location":"unix/background.html#what-is-a-terminal","title":"What is a Terminal?","text":"<p>With the advances in Cathode-ray tube (CRT), the teletype machine is replaced with computer terminals in the late 1970s.  Instead of printing the output on paper, the output from CLI is now printed on a monitor supporting 24x80 characters on screen in black and white (or green).</p> <p> Figure: The VT100 Computer Terminal. </p> <p>In modern days, operating systems still use similar underlying functionalities to read in keyboard inputs and print the output as text to show to the users, but instead of these clunky special purpose devices, the functionality of a terminal is replaced by programs called terminal emulator or virtual terminal.  Examples include <code>Terminal</code> and <code>iTerm2</code> on macOS; <code>Windows Terminal</code> on Microsoft; <code>xterm</code> and <code>konsole</code> on Ubuntu, etc.  Many legacy control commands on these teletype machines remain in today's computing environment, such as the terminal control sequence.</p>"},{"location":"unix/background.html#what-is-a-shell","title":"What is a Shell?","text":"<p>The term CLI refers to a type of user interface.  To realize this interface, Unix computing environments rely on another type of program called shell.  </p> <p>A shell usually works closely with a terminal to get inputs from the users, interpret the meaning of the inputs, execute the tasks (perhaps through the invocation of other programs), and returned the output to the user through the terminal.</p> <p>Note that a shell can run on its own without a terminal (it can read input from a file, and write the output to a file, for instance).</p> <p>There are many shells available, each with different bells and whistles to help improve our productivity.  </p> <p>The most popular shell that comes as default on many Unix systems is <code>bash</code> or Bourne Again Shell.  This is the shell that we will use in this workshop and as default in the SoC Unix computing environment.</p> <p>Other popular shells are <code>fish</code> and Oh-my-zsh (<code>zsh</code>).</p>"},{"location":"unix/background.html#command-prompt","title":"Command Prompt","text":"<p>A shell has a command prompt. It typically looks something like this, but will be different depending on the default configuration on your machine: <pre><code>ooiwt@pe111:~$\n</code></pre></p> <p>The prompt is where you type in a command for the shell to interpret and execute.  </p> <p>In <code>bash</code>, the command prompt can be customized to include information such as the username, hostname, time, current working directory, etc.  It is customary to use the <code>$</code> sign as the final character of the prompt.  In our examples, we will just show <code>$</code> to indicate the command prompt.</p> <p>Depending on the habit, sometimes you are asked to type in a command \"into the terminal\", \"into the shell\", or \"into bash\".  They all mean the same thing: type in the command at the command prompt of the shell.</p>"},{"location":"unix/background.html#terminal-control-sequence","title":"Terminal Control Sequence","text":"<p>On the old teletype machines, a user can send special commands to the teletype machines to control their operation.  Many of these special commands still exist today, and can be triggered by hitting a combination of Ctrl and another key (i.e., a control sequence). </p> <p>The following lists some of the most useful control sequences to know:</p> <p>Ctrl+D :   signal the end of input to a program.  This is also used to exit from a shell (by telling the shell that you have no more input to send, and you are done with it).</p> <p>Ctrl+Z :   suspend the current running program.  This pauses the execution of the program (but not terminates it).  In the <code>bash</code> shell, the most recently suspended program can resume executing in the background with the command <code>bg</code> or be brought back to execution in the foreground again with the command <code>fg</code>.   </p> <p>Ctrl+C :   terminate the current running program.</p> <p>Ctrl+S :   freeze the terminal.  This is a legacy control command that pauses the output printing of a teletype machine.  You shouldn't need to use this control sequence.</p> <p>Ctrl+Q :   resume the terminal.  This is a legacy control command that resumes the printing of a teletype machine.  You shouldn't need to use this control sequence unless you accidentally hit Ctrl+S</p> <p>Ctrl+Z vs. Ctrl+C</p> <p>A common mistake for new students is to hit Ctrl+Z frequently if something goes wrong with their program -- this behavior could lead to multiple suspended programs (which still occupy resources such as memory on the computer).  The right sequence to use is Ctrl+C -- which terminates the program (and frees up the resources).</p> <p>Ctrl+S accidents</p> <p>Since Ctrl+S is used as the \"save\" shortcut in non-Unix environment, many students accidentally hit this control sequence, causing their terminal to freeze.  Don't panic if this happens.  Just hit Ctrl+Q and things will be back to normal.</p>"},{"location":"unix/background.html#references","title":"References","text":"<ul> <li>The Art of Unix Usability: Command Line Interfaces, by Eric Steven Raymond</li> </ul>"},{"location":"unix/essentials.html","title":"Unix CLI: The Essentials","text":"<p>This article is adapted from the notes of the Unix@Home Workshop held in August 2020.  It contains the essential knowledge that a CS2030S students need to survive using the PE nodes to do the labs (and to use a Unix CLI in general).</p> <p>After following this article, students should be able to:</p> <ul> <li>navigate comfortably in a Unix file system using shell commands <code>cd</code>, <code>pwd</code>, and <code>ls</code></li> <li>use <code>.</code>, <code>..</code>, <code>~</code> or <code>/</code> to form a relative or absolute path name to a file</li> <li>organize files in a Unix file system using shell commands <code>mkdir</code>, <code>rmdir</code>, <code>mv</code>, <code>rm</code>, and <code>cp</code></li> <li>view the content of the file using <code>cat</code>, <code>more</code> or <code>less</code></li> <li>manage the permission of a file using <code>chmod</code></li> <li>perform standard input/output redirection with <code>&lt;</code> and <code>&gt;</code></li> </ul>"},{"location":"unix/essentials.html#unix-directory","title":"Unix Directory","text":"<p>Unix organizes files according to a directory structure.  The following shows an example.</p> <p></p> <p>This structure is also known as a directory tree.</p> <p>There are two important directories that you need to know.</p>"},{"location":"unix/essentials.html#root-directory","title":"Root Directory","text":"<p>The root directory is the directory at the top of the directory tree1. It is simply referred to as <code>/</code>, without any name.  Under the root directory are many other system directory, which a casual user does not normally need to (and have no permission to) modify.</p>"},{"location":"unix/essentials.html#home-directory","title":"Home Directory","text":"<p>Each user has his/her own home directory.  The above figure shows where the home directory of the user <code>ooiwt</code> resides in the directory tree. The user <code>ooiwt</code> may create files or directories in his/her home directory, but not elsewhere unless permission is given.</p> <p>The home directory is referred to with the symbol <code>~</code> in <code>bash</code>.  Sometimes we add the username behind <code>~</code> to indicate the home directory of the other user. E.g., <code>~bob</code> means the home directory of a user named <code>bob</code>.</p>"},{"location":"unix/essentials.html#current-working-directory","title":"Current Working Directory","text":"<p>A user can navigate around the directory tree.  The current working directory is the directory that the user is currently in.  In contrast to the root and home directory, which are fixed2, the current working directory changes as the user moves around.  Knowing the current working directory is important since this is the default location in the directory tree a command executes.  As such, many systems by default display the current working directory as part of the <code>bash</code> command prompt.</p> <p>The current working directory is referred to with the symbol <code>.</code> in <code>bash</code>.</p>"},{"location":"unix/essentials.html#parent-directory","title":"Parent Directory","text":"<p>The parent directory is directory one layer up from the current directory.</p> <p>The parent directory is referred to with the symbol <code>..</code> in <code>bash</code>.</p> <p>To summarize, here are the short form representations:</p> Symbol Meaning <code>/</code> the root directory <code>~</code> the home directory <code>.</code> the current working directory <code>..</code> the parent directory"},{"location":"unix/essentials.html#specifying-a-path","title":"Specifying a Path","text":"<p>To specify a directory or a file in the Unix directory tree, we can use either the absolute path or the relative path.</p>"},{"location":"unix/essentials.html#absolute-path","title":"Absolute path","text":"<p>The absolute path is constructed as follows, starting from the root of the directory structure, find a path (a sequence of directories) to the location that you want to specify, then concatenate the names of the directories together, separated by the forward-slash <code>/</code>.  This is a similar notation used for Website URLs, so you should already be familiar with it.  For instance, the path <code>/home/o/ooiwt</code> is the absolute path of the directory named <code>ooiwt</code> in the figure above.</p> <p>An absolute path is independent of the current working directory and always start with <code>/</code> or <code>~</code></p>"},{"location":"unix/essentials.html#relative-path","title":"Relative path","text":"<p>The relative path is dependent on the current working directory.  To refer to another location, start from the current directory, and find a path (a sequence of directories) to the location that you refer to.  When we go up a tree, we use <code>..</code> to represent the directory.</p> <p>For example, referring to the figure above, if we are in the directory <code>/home/b</code>, and we wish to refer to <code>/home/o/ooiwt</code>, we can use the relative path <code>../o/ooiwt</code>.  If we wish to refer to <code>/home/b/bob</code>, we can use the relative path <code>bob</code>.</p> <p>A relative path never starts with <code>/</code>.</p>"},{"location":"unix/essentials.html#directory-related-commands","title":"Directory-related Commands","text":"<p>Now, let's take a look at some basic commands available in <code>bash</code> that deals with navigation and directories.</p>"},{"location":"unix/essentials.html#pwd-print-current-working-directory","title":"<code>pwd</code>: Print Current Working directory","text":"<p><code>pwd</code> shows you which directory you are currently in.  Type <code>pwd</code> into the command prompt, and it will print the absolute path to your current working directory. For instance, Suppose you are in <code>/home/o/ooiwt</code>, entering <pre><code>pwd\n</code></pre> will give the output <pre><code>/home/o/ooiwt\n</code></pre></p>"},{"location":"unix/essentials.html#ls-list-content-of-a-directory","title":"<code>ls</code>: LiSt content of a directory","text":"<p>The <code>ls</code> list the content in the current working directory.</p> <p>Rule of Silence</p> <p>Unix follows the economical rule of silence: programs should not print unnecessary output, to allow other programs and users to easily parse the output from one program.  So, if <code>ls</code> has nothing to list, it will list nothing (as opposed to, say, printing \"This is an empty directory.\")</p> <p>In Unix, a file or directory with a name that starts with <code>.</code> is hidden from <code>ls</code>.  Common hidden files are <code>.vimrc</code>, the configuration file for <code>vim</code>, and <code>.ssh</code>, the directory to store your SSH keys and configuration.  To view all the files, including hidden files, run <code>ls</code> with the <code>-a</code> flag (<code>a</code> stands for all).  </p>"},{"location":"unix/essentials.html#mkdir-make-a-subdirectory","title":"<code>mkdir</code>: MaKe a subDIRectory","text":"<p>The <code>mkdir</code> command creates a subdirectory with the given name in the current directory.</p> <p>In the example below, we assume that we start with an empty directory.  </p> <pre><code>$ ls\n$ mkdir workshop\n$ ls\nworkshop\n$ ls -F\nworkshop/\n</code></pre> <p>Here, we create a directory called <code>workshop</code>.  Now, when we <code>ls</code>, you can see the directory listed.  </p> <p>You may also use <code>ls -F</code> for more information (<code>-F</code> is one of the many options/flags available for the <code>ls</code> command. To see a complete list of the options, refer to the man pages, i.e., <code>man ls</code>.)</p> <p>The slash <code>/</code> beside the filename tells you that the file is a directory.  A normal file does not have a slash beside its name when \"ls -F\" is used.</p> <p>You may also use the <code>ls -l</code> command (hyphen el, not hyphen one) to display almost all the file information, include the size of the file and the date of modification.</p> <p>Use Up Arrow for Command History</p> <p><code>bash</code> maintains a history of your previously executed commands, and you may use the Ctrl+P (previous) and Ctrl+N (next) to go through it. Press the Ctrl+P until you find a previously executed command. You may then press Enter to execute it or edit the command before executing it. This is handy when you need to repeatedly execute a long <code>bash</code> command.</p>"},{"location":"unix/essentials.html#cd-change-directory","title":"<code>cd</code>: Change Directory","text":"<p>To navigate in the directory tree, changing the current working directory from one to another, we use the <code>cd</code> command.</p> <pre><code>$ pwd\n/home/o/ooiwt\n$ cd workshop\n$ pwd\n/home/o/ooiwt/workshop\n</code></pre> <p>Suppose our starting working directory is <code>/home/o/ooiwt</code>, after we <code>cd</code> into <code>workshop</code>, the current working directory becomes <code>/home/o/ooiwt/workshop</code>.  Note that <code>cd</code> can take in either an absolute path or a relative path.  The example above takes in a relative path as the argument.</p> <p>As mentioned in \"Unix CLI: Background\", it is common to include the current working directory into the shell's prompt.  So, you may see your command prompt updated to include the new working directory.</p> <p>Entering <code>cd</code> alone (without argument) brings you back to your home directory.  </p>"},{"location":"unix/essentials.html#rmdir-remove-a-subdirectory","title":"<code>rmdir</code>: ReMove a subDIRectory","text":"<p><code>rmdir</code> removes a subDIRectory in the current directory -- note that a directory must be empty before it can be removed.</p> <p>The command <pre><code>$ rmdir workshop\n</code></pre> will remove the directory that you just created.</p>"},{"location":"unix/essentials.html#file-management","title":"File Management","text":"<p>This note assumes that you are familiar with navigation with the Unix directory structure.</p> <p>We will now learn some commands to help us deal with files.</p> <p>Let's recreate the <code>workshop</code> directory in case you have already deleted it with the <code>rmdir</code> at the end of the last unit.</p> <pre><code>$ mkdir -p workshop\n$ cd workshop\n$ ls\n</code></pre> <p>All the above commands should complete successfully and silently.  Let's populate the directory with a new file.  Cut-and-paste the command below into the command prompt:</p> <pre><code>wget https://www.comp.nus.edu.sg/~ooiwt/unix-workshop/test.txt\n</code></pre> <p>You should see a file being downloaded and saved with an output similar to below: <pre><code>--2020-07-27 15:26:49--  https://raw.githubusercontent.com/nus-unix-workshop/2021-s1/master/test.txt\nResolving raw.githubusercontent.com (raw.githubusercontent.com)... 151.101.0.133, 151.101.64.133, 151.101.128.133, ...\nConnecting to raw.githubusercontent.com (raw.githubusercontent.com)|151.101.0.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 64 [text/plain]\nSaving to: \u2018test.txt\u2019\n\ntest.txt              100%[======================&gt;]      64  --.-KB/s    in 0s\n\n2020-07-27 15:26:50 (2.35 MB/s) - \u2018test.txt\u2019 saved [64/64]\n</code></pre></p> <p>Now run <code>ls</code>, and you should see that <code>ls</code> returns <code>test.txt</code> as the content of the current working directory.</p> <pre><code>$ ls\ntest.txt\n</code></pre>"},{"location":"unix/essentials.html#cp-copy-files","title":"<code>cp</code>: CoPy files","text":"<p>Now let's try to copy this file to another name. <pre><code>$ cp test.txt foo.txt\n$ ls\ntest.txt foo.txt\n</code></pre> The command above copies the file <code>test.txt</code> into <code>foo.txt</code>.</p> <p>If you want to copy the whole directory, use <code>-r</code> flag, where <code>r</code> stands for copying recursively.</p> <p>Now let's create another directory called <code>copy</code>. <pre><code>$ cd ..\n$ mkdir copy\n$ cd copy\n$ ls\n</code></pre></p> <p>Run <code>pwd</code> to double-check that you are in the directory called <code>copy</code> that is at the same level as <code>workshop</code>.</p> <p>Now, we are going to use <code>cp</code> with the <code>-r</code> flag, to copy recursively the whole of <code>workshop</code> directory over.</p> <pre><code>$ cp -r ../workshop .\n</code></pre> <p>The command <code>cp</code> takes in two arguments, the first is the source, and the second is the destination.</p> <p>Note that we use <code>.</code> above to indicate that we wish to copy the whole subtree of <code>workshop</code> over the current directory.  The command should complete without any message.  Upon completion, you can run <code>ls</code> to double-check that the workshop directory exists under <code>workshop</code>.</p> <p>!!! warning <code>cp</code> Overwrites     If there is an existing file with the same name, <code>cp</code> will overwrite     the existing file without warning.</p>"},{"location":"unix/essentials.html#mv-move-or-rename-files","title":"<code>mv</code>: MoVe or rename files","text":"<p>Now, let's change directory back to <code>workshop</code>. <pre><code>$ cd ../workshop\n</code></pre> and use the <code>mv</code> command to rename <code>foo.txt</code> into <code>bar.txt</code>.</p> <pre><code>$ ls\nfoo.txt test.txt\n$ mv foo.txt bar.txt\n$ ls\nbar.txt test.txt\n</code></pre> <p>As you can see above, just like <code>cp</code>, <code>mv</code> takes in two arguments, the first is the source and the second is the destination.</p> <p>If the destination of <code>mv</code> is a directory, however, instead of renaming, the <code>mv</code> commands move the source to the destination directory.</p> <pre><code>$ ls\nbar.txt test.txt\n$ mv ../copy/workshop/foo.txt .\n$ ls\nbar.txt foo.txt test.txt\n</code></pre> <p>Here, you can see that we have moved <code>foo.txt</code> over to the current directory.</p> <p>!!! warning <code>mv</code> Overwrites     If there is an existing file with the same name, <code>mv</code> will overwrite     the existing file without warning. <code>mv</code> comes with a <code>-i</code> flag that interactively asks you if you are sure if you want to overwrite a file.  It is a good idea to always run <code>mv -i</code>. Hit Y to continue overwriting the existing file.  You can look up on the Internet on how to make <code>-i</code> the default using <code>alias</code> command in <code>.bashrc</code>.</p> <p>Use Tab for Name Completion</p> <p>If you have a very long file name, you may use the <code>bash</code> auto-completion feature to reduce typing. For instance, you may type: <pre><code>$ mv t\n</code></pre> and press the Tab key, <code>bash</code> will complete the filename for you if there is only one filename with the prefix \"t\". Otherwise, it will fill up the filename to the point where you need to type in more characters for disambiguation. The Tab key can also complete the name of a command.</p>"},{"location":"unix/essentials.html#rm-remove-files","title":"<code>rm</code>: ReMove files","text":"<p>We can use <code>rm</code> to remove files.  Be careful with this command -- files deleted cannot be restored.  There is no trash or recycled bin like in Mac or Windows.</p> <pre><code>$ ls\nbar.txt foo.txt test.txt\n$ rm foo.txt\n$ ls\nbar.txt test.txt\n</code></pre> <p>rm -rf</p> <p>While the Unix command line provides lots of flexibility and power, with great power comes great responsibility.  Some commands are extremely dangerous.  <code>rm -rf *</code> is the most famous one.  The notation <code>*</code> refers to all files, and the flag <code>-f</code> means forceful deletion (no question asked!), and <code>-r</code> means remove recursively everything under the current directory tree.  Accidentally running this command has ruined many lives.  Read more here</p> <p><code>rm</code> comes with a <code>-i</code> flag that interactively asks you if you are sure if you want to delete a file.  It is a good idea to always run <code>rm -i</code>.</p> <pre><code>$ rm -i bar.txt\nrm: remove regular file 'bar.txt'?\n</code></pre> <p>Type <code>y</code> or <code>n</code> to answer yes or no respectively.</p>"},{"location":"unix/essentials.html#cat-catenate-file-content-to-screen","title":"<code>cat</code>: CATenate file content to screen","text":"<p>To quickly take a look at the content of the file, use the <code>cat</code> command.</p> <pre><code>$ cat test.txt\nThis is a test file for learning Unix file management commands.\n</code></pre> <p><code>less</code> is a variant of <code>cat</code> that includes features to read each page leisurely and is useful for long files. <pre><code>$ less test.txt\n</code></pre></p> <p>In <code>less</code>, use <code>&lt;space&gt;</code> to move down one page, <code>b</code> to move Back up one page, and <code>q</code> to Quit.</p>"},{"location":"unix/essentials.html#man-online-manual","title":"<code>man</code>: Online MANual","text":"<p>An online help facility is available in Unix via the <code>man</code> command (<code>man</code> stands for MANual). To look for more information about any Unix command, for example, <code>ls</code>, type <code>man ls</code>. Type <code>man man</code> and refer to Man Pages to find out more about the facility. To exit <code>man</code>, press <code>q</code>.</p>"},{"location":"unix/essentials.html#file-permission-management","title":"File Permission Management","text":"<p>File permissions determine who can do what to a file.  Typically, you do not need to fiddle with the file permission, but when you need to, it is usually for an important reason, and it is critical to do it right.</p>"},{"location":"unix/essentials.html#the-what-of-file-permissions","title":"The What of File Permissions","text":"<p>Let's look at what you can do to a file first.  Unix file permissions allow control of three actions: <code>r</code> (read), <code>w</code> (write) and <code>x</code> (execute).  These permission settings allow the following different actions to be done for regular files and directories.</p> permission effect on file effect on directory <code>r</code> reading the content of a file read the names of the files in the directory <code>w</code> writing into a file create/delete/rename files in the directory <code>x</code> executing a file access contents and meta-info (size, creation time) of files in the directory <p>These three actions can be controlled independently.  </p> <p>The permissions on a file can be expressed in two ways:</p> <ul> <li> <p>using symbolic notation.  For instance,  <code>rwx</code>, <code>r-x</code>, <code>-wx</code>, where a <code>-</code> means that the corresponding permission is not given (in the order of <code>r</code>, <code>w</code>, <code>x</code>).</p> </li> <li> <p>using a numerical notation. This notation uses a digit between 0 and 7, which is computed as a sum of the individual digit representing the permissions: <code>r</code> is represented with 4, <code>w</code> is represented with 2, and <code>x</code> is represented with 1. For instance, <code>r-x</code> has a numerical representation of 5, and <code>-wx</code> has a numerical representation of 3.</p> </li> </ul>"},{"location":"unix/essentials.html#the-who-of-file-permissions","title":"The Who of File Permissions","text":"<p>Unix divides the users into three classes: <code>u</code> is the user who owns the file; <code>g</code> refers to the users in the same group as the user; and <code>o</code> are all the other users.</p> <p>The permissions can be controlled separately for these classes of users.  The permission notation simply concatenates the file permissions of each class of users together, in the order of <code>u</code>, <code>g</code>, and <code>o</code>.</p> <p>For instance, the permission of 644, or <code>rw-r--r--</code>, on a file means that:</p> <ul> <li>the owner can read and write</li> <li>the group users can only read</li> <li>all the other users can only read</li> </ul>"},{"location":"unix/essentials.html#checking-file-permission","title":"Checking file permission","text":"<p>You can view the permission of a file by using the <code>ls -l</code> command (<code>l</code> for long format):</p> <pre><code>$ ls -l test.txt\n-rw-r--r--@ 1 ooiwt  staff  64 Jul 28 09:52 test.txt\n</code></pre> <p>Ignoring the first <code>-</code> and the last <code>@</code>, you can see that the permission of <code>test.txt</code> is 644.</p>"},{"location":"unix/essentials.html#the-chmod-command","title":"The <code>chmod</code> command","text":"<p>You can use <code>chmod</code> command to change the permissions of a file or a directory.</p> <p>For instance, <pre><code>$ chmod 666 test.txt\n$ ls -l test.txt\n-rw-rw-rw-@ 1 ooiwt  staff  64 Jul 28 09:52 test.txt\n</code></pre> would change add the permission <code>w</code> to both group and other users1.</p> <p>An alternative way is to just specify the changes.  To remove the permission to write from others, you can run: <pre><code>$ chmod o-w test.txt\n$ ls -l test.txt\n-rw-rw-r--@ 1 ooiwt  staff  64 Jul 28 09:52 test.txt\n</code></pre></p>"},{"location":"unix/essentials.html#common-scenarios-for-chmod","title":"Common Scenarios for <code>chmod</code>","text":"<p>Here are some scenarios where you might need to use the <code>chmod</code> command:</p> <ul> <li> <p>If you use the SoC Unix server to do your homework, you should prevent the directory that stores your homework from being accessible by other users.  Make sure that your homework directory as the permission of <code>700</code>.</p> </li> <li> <p>If you download a file from the Internet and you do not have the permission to read it, you should do a <code>u+r</code> to give yourself the read permission.</p> </li> <li> <p>A program should have execution permission to run.  If you have a script or an executable file that you can't run, give yourself the execution permission <code>u+x</code>.</p> </li> </ul>"},{"location":"unix/essentials.html#standard-inputoutput","title":"Standard Input/Output","text":""},{"location":"unix/essentials.html#history","title":"History","text":"<p>Two of the design decisions of Unix that lead to its simplicity are the decisions to (i) decouple the physical input/output devices from the programs, allowing programs written for Unix to read from abstract input and output devices; and (ii) make all programs read and write from these abstract input and output devices by default.  Before Unix, the older operating systems often require programmers to painstakingly set up connections to the teletype machines and other devices for reading inputs and printing outputs.   With Unix, programmers can now focus on solving the tasks at hand and let Unix takes care of the input and output.</p> <p>The two abstract devices that Unix provides are called standard input and standard output.  By default, the standard input refers to the keyboard and the standard output is the terminal.</p>"},{"location":"unix/essentials.html#examples-using-cat-and-wc","title":"Examples using <code>cat</code> and <code>wc</code>","text":"<p>Let's look at these concepts closer, by examining some examples.</p> <p>Remember <code>cat</code>?  The <code>cat</code> command takes in a filename and it prints the content of the file to the standard output.</p> <pre><code>$ cat test.txt\nThis is a test file for learning Unix file management commands.\n</code></pre> <p>If no filename is given, <code>cat</code> by default try to read from the standard input.  Try running:</p> <pre><code>$ cat\n</code></pre> <p>You will see that the command is waiting for you to type in something.  Type in anything, as soon as you press Enter, <code>cat</code> is going to read in the text from the standard input, as if it is the content of a file, and then prints the content to the standard output.  You can keep typing, supplying text to <code>cat</code>, or you can type Ctrl+D to send the end-of-input command to <code>cat</code>.</p> <p>Let's look at another command, <code>wc</code>.  <code>wc</code> is a utility that counts the number of lines, words, characters.  If we call <code>wc</code> and supply it a file name, it will count the number of lines, words, and characters in that given file.</p> <pre><code>$ wc test.txt\n       1      11      64 test.txt\n</code></pre> <p>The output means that there is 1 line, 11 words, and 64 characters in the file <code>test.txt</code>.</p> <p>But if you do not pass in any file name, <code>wc</code> is going to read in the text from the standard input, as if it is the content of a file, and prints the three counters to the standard output.  Go ahead and try:</p> <pre><code>$ wc\n</code></pre> <p>You will see that the <code>wc</code> command is waiting for you to type in something.  Type in a few sentences, you can hit Enter for a new line.  When you are done, type Ctrl+D.  <code>wc</code> will count the number of lines, words, and characters for the text that you just entered.</p>"},{"location":"unix/essentials.html#output-redirection","title":"Output Redirection","text":"<p>By defining two abstract input and output devices (or channels), Unix frees the programmers from worrying about where to read the input from and write the output to.  Most of the time, we can write the output of the program to the standard output.  In instances where we need to write the output to another location, we can just redirect the output.</p> <p>The operators <code>&gt;</code> and <code>&gt;&gt;</code> are used to redirect the standard output to a file.  The difference is that <code>&gt;</code> will overwrite the given file, while <code>&gt;&gt;</code> will concatenate into the given file.</p> <p>For example: <pre><code>$ wc test.txt &gt; test.count\n$ cat test.count\n       1      11      64 test.txt\n</code></pre></p> <p>The first command redirects the output from <code>wc</code> to a file named <code>test.count</code>, so you do not see anything printed to the output anymore.  We can check by running <code>cat</code> on the new file <code>test.count</code> -- indeed the original output from <code>wc</code> is now stored in the file <code>test.count</code>.</p> <p>If we repeat the command <code>wc test.txt &gt; test.count</code> again, you can see that the file has been overwritten with the output from <code>wc</code> again.  But if we replace <code>&gt;</code> with <code>&gt;&gt;</code>, a new line is concatenated into <code>test.count</code>.   So the file now has two lines.</p> <pre><code>$ wc test.txt &gt; test.count\n$ cat test.count\n       1      11      64 test.txt\n$ wc test.txt &gt;&gt; test.count\n$ cat test.count\n       1      11      64 test.txt\n       1      11      64 test.txt\n</code></pre>"},{"location":"unix/essentials.html#input-redirection","title":"Input Redirection","text":"<p>The operator <code>&lt;</code> is used to redirect a file into the standard input. So, instead of reading from the keyboard, we can now read from a file.  Commands such as <code>cat</code> and <code>wc</code> already support from a file directly, so there is no difference in terms of functionality to run the commands by passing in the file name, or by using the <code>&lt;</code> operator.</p> <pre><code>$ wc test.txt\n       1      11      64 test.txt\n$ wc &lt; test.txt\n       1      11      64\n$ cat test.txt\nThis is a test file for learning Unix file management commands.\n$ cat &lt; test.txt\nThis is a test file for learning Unix file management commands.\n</code></pre> <p>Note the slight difference in the output format of the second <code>wc</code> above -- it no longer prints the file name since from <code>wc</code> points of view, it is read from the standard input and not from a file, so it is not aware of the file named <code>test.txt</code></p> <p>In most CS programming assignments, however, to keep things simple, you will be asked to read from the standard input only, so the <code>&lt;</code> is a great time-saver -- you do not have to repeatedly type in the same input data over and over from the keyboard.  You can just save the input data in a file, then redirect it to standard input with the <code>&lt;</code> operator.</p>"},{"location":"unix/essentials.html#other-useful-online-tools","title":"Other Useful Online Tools","text":"<ul> <li>explainshell explain each shell command for you</li> </ul> <ol> <li> <p>Giving write permission to other users is a security risk.  You should not do this unless you know what you are doing.\u00a0\u21a9\u21a9</p> </li> <li> <p>Not exactly true -- since Unix is designed to be flexible, even the root and the home directory can be changed!  But let's not worry about that for now since there is no good reason to do that as a beginner.\u00a0\u21a9</p> </li> </ol>"},{"location":"vim/index.html","title":"Index","text":""},{"location":"vim/index.html#vim","title":"Vim","text":"<ul> <li>The Philosophy of Vim</li> <li>Setting up Vim for CS2030S</li> <li>Quick Lessons</li> <li>Vim Tips</li> <li>Color Scheme and Plugins</li> </ul>"},{"location":"vim/philosophy.html","title":"The Philosophy of <code>vim</code>","text":"<p>This article is adapted from the notes of the Unix@Home Workshop  held in August 2020.</p> <p>After reading this article, students should</p> <ul> <li>appreciate the usefulness of learning <code>vim</code> and using it as the main source code editor.</li> <li>appreciate the efficiency and philosophy of using <code>vim</code>.</li> <li>have experience navigating around a text buffer and manipulating text in <code>vim</code></li> <li>be aware of how to learn more about using <code>vim</code>.</li> </ul> <p>To edit our code, we need a proper editor.  Remember that, ideally, we want to keep our hands on the keyboard and keep ourselves \"in the zone\" with only the terminal, the keyboard, and ourselves, so we will use a terminal-based editor: no windows, no mouse, no arrow keys, no function keys.</p> <p>There are only two respectable, widely available text editors in Unix -- <code>vim</code> and <code>emacs</code>.  Which one is better has been an ongoing religious war, but for us in SoC, we use <code>vim</code>.</p>"},{"location":"vim/philosophy.html#minimizing-hand-movements","title":"Minimizing Hand Movements","text":"<p><code>vim</code>, like the shell, aims to minimize hand movements.  Frequently used commands are positioned in convenient places on the keyboard.  Let me give you a few examples.</p> <ul> <li> <p>To exit vim, type Shift+Z+Z.  Notice that this is located in the bottom left corner of your keyboard.  For normal typing, your left hand is supposed to be placed over the keys A S D F, so you just need to move slightly your left pinky to Shift and left ring finger to Z and hit them.</p> </li> <li> <p>To move the cursor, instead of using the arrow keys, <code>vim</code> uses H to move left, L to move right, J to move down, and K to move up.  For normal typing, your right hand is supposed to be placed on J K L ;, so these arrow keys alternatives are located very near to where your right hand should be!</p> </li> </ul> <p>I have a few more things to say about using H J K L to replace the arrow keys:</p> <ul> <li> <p>It is not uncommon for applications to re-map other keys for movement.  Many first-person shooting games use W A S D for movement, for the same reason as <code>vim</code> -- it is close to the resting position of the left hand on the keyboard.</p> </li> <li> <p>The use of H J K L for movement is more ubiquitous than you think.  In the Web-version of Gmail, Facebook, and Reddit, for instance, you could use J and K to move up and down across posts.</p> </li> </ul>"},{"location":"vim/philosophy.html#multi-modal-editor","title":"Multi-modal Editor","text":"<p><code>vim</code> is a multi-modal editor.  While most other editors make no distinction between reading and editing, <code>vim</code> makes an explicit distinction between the two.  <code>vim</code> has two basic modes:</p> <ul> <li><code>NORMAL</code> mode: where you read, navigate and manipulate the text.</li> <li><code>INSERT</code> mode: where you insert the text</li> </ul> <p>As a programmer, having a separate <code>NORMAL</code> mode makes sense since we spend much time reading and navigating around source code.  Thus, allowing the editing commands to be optimized.</p> <p>In the <code>NORMAL</code> mode, you can use any of these keys I S A O (with or without Shift) to switch to <code>INSERT</code> mode.  To go back to <code>NORMAL</code> mode, press Esc.  The keys I S A O have different meanings, which you will learn later.</p> <p>Note that most of the time you will be in <code>NORMAL</code> mode.  So a habitual <code>vim</code> user would insert some text and immediately switch back to normal mode by hitting Esc.</p>"},{"location":"vim/philosophy.html#tell-vim-what-you-want-to-do-dont-do-it-yourself","title":"Tell <code>vim</code> What You Want To Do; Don't Do It Yourself","text":"<p>In <code>NORMAL</code> mode, you can manipulate text in <code>vim</code> by issuing commands to <code>vim</code>.  These commands are like a programming language.  It is also not unlike the Unix commands, in that each command does a small thing but can be composed together to perform complex text manipulation.</p> <p>Let me give an example here.  Suppose you have a sentence:</p> <pre><code>Wherever there is light, there is also a shadow.\n</code></pre> <p>You want to remove <code>also a</code> from the sentence.</p> <p>What would you do in a typical text editor?  You can use move your hand away from the keyboard, find your mouse, move your mouse cursor to highlight the text, and then hit Del.  Or you could move the cursor (by mouse or by repeatedly hitting the keyboard) to place the cursor after <code>a</code>, and then press Del six times.</p> <p>In addition to being tedious, this is error-prone.  You might highlight one additional or one less space, or hit Del one too many times.</p> <p>What we are used to doing is performing the action of deleting the words ourselves.  For <code>vim</code>, we do it differently.  We need to look for the word <code>also</code> and delete two words.  This translates to the command / A L S O Enter D 2 W.</p> <ul> <li>/ triggers a search.  This is an almost universal command -- try / on Facebook (web) or on this page.</li> <li>A L S O Enter tells <code>vim</code> what you want to search. After pressing Enter, your cursor should be placed at the beginning of <code>also</code>.</li> <li>D 2 W tell <code>vim</code> to \"delete two words\".</li> </ul> <p>Instead of worrying about the actual actions to perform the deletion, we issue higher-level commands to describe what we want to do.  This is powerful since this is how our brain thinks -- \"I need to insert this here, change this word to that, remove two lines, etc.\"  All these maps into commands in <code>vim</code>.  As a result, once you master <code>vim</code> basics, you can type as fast as you think1!</p> <p>A common pattern for <code>vim</code> command consists of three parts: (i) place the cursor; (ii) perform an action; (iii) move to the new placement of the cursor.  In the example above, / A L S O Enter places the cursor, D is the action (delete), and 2 W is the movement (move the cursor forward by two words).</p> <p>Another common command that students used is G G = Shift+G.  This command is used to indent the source code in the current file.  G G is the command to place the cursor at the top of the file.  = is the action (indent), and Shift+G is the command to place the cursor on the last line of the file.</p>"},{"location":"vim/philosophy.html#be-a-good-unix-citizen","title":"Be A Good Unix Citizen","text":"<p>Not only do the basic commands <code>vim</code> adhere to the Unix principles of composability, <code>vim</code> plays well with Unix shells, which adds additional power to <code>vim</code>.  For instance, if you want to have the standard output from a command paste into the file you are editing, you can run:</p> <p><pre><code>:r! &lt;command&gt;\n</code></pre> : triggers the <code>vim</code> command line.  R ask <code>vim</code> to read something and paste it into the current cursor location.  At this point, you can pass in, for instance, another file name.  But here, we enter !, which tells <code>vim</code> to run a shell.  We then pass the <code>command</code> to the shell.  Whatever the command writes to the standard output, will be read and inserted into <code>vim</code>.</p> <p>Want to insert today's date? <pre><code>:r! date\n</code></pre></p> <p>Want to insert a mini calendar? <pre><code>:r! cal\n</code></pre></p> <p>Want to insert the list of all JPG pictures? <pre><code>:r! ls *jpg\n</code></pre></p> <p>You can even pass a chunk of text from <code>vim</code> to the standard input of another program, and replace it with what is printed to the standard output by that program.</p>"},{"location":"vim/philosophy.html#other-reasons-to-learn-vim","title":"Other Reasons To Learn <code>vim</code>","text":"<p>Besides enabling you to type as fast as you think with as few hand movements as possible, there are other reasons to use <code>vim</code>:</p> <ul> <li> <p><code>vim</code> is installed by default in almost any Unix environment.  Imagine if you get called to a client-side to debug a Linux server, and you need to edit something -- you can rest assured that <code>vim</code> is there.</p> </li> <li> <p><code>vim</code> is the only source code editor you need to learn and master.  It works for almost any programming language.  If you use IDE, you have to learn IntelliJ for Java, IDLE for Python, Visual Studio C++ for C++, etc.  This reason is also why VS Code has gained significant popularity in recent years.</p> </li> <li> <p><code>vim</code> is extensible and programmable.  It has been around for almost 30 years, and tons of plugins have been written.  Whatever feature you need, there is likely a native <code>vim</code> command or a <code>vim</code> plugin for that.</p> </li> </ul> <p>The only downside to using <code>vim</code> is that it is terminal-based (some consider it ugly) and it has a steep learning curve.  But, in our experience, students will build up their muscle memory and are comfortable with <code>vim</code> after 2-3 weeks of usage.</p> <p>For CS1010, there is another practical reason to learn and gain familiarity with <code>vim</code>.  The practical exams are conducted in a sandboxed environment, which you can only access through <code>ssh</code> via a terminal.  You only have a few choices (<code>emacs</code>, <code>nano</code>, <code>vim</code>) and <code>vim</code> is the only reasonable choice. </p> <ol> <li> <p>The book Practical Vim by Drew Neil has the subtitle \"Edit text at the speed of thought\".\u00a0\u21a9</p> </li> </ol>"},{"location":"vim/plugins.html","title":"Vim Extensions on PE Hosts","text":"<p>CS2030S provides a minimal set of vim extensions (i.e., plugins and color schemes) officially.  At the beginning of the semester, students can install the same set of extensions following the vim setup procedure.  The same set of official extensions will be made available during the practical exams.</p> <p>Students are free to install any additional color schemes or plugins if they wish.  These additional extensions, however, are not allowed and will not be available during the practical exams.</p> <p>The following are the officially supported vim extensions in CS2030S.</p>"},{"location":"vim/plugins.html#color-schemes","title":"Color Schemes","text":"<p>We installed three color schemes <code>~cs1010/.vim/colors</code>.  You may copy them over to your own home directory, by running</p> <pre><code>mkdir -p ~/.vim\ncp -r ~cs1010/.vim/colors ~/.vim\n</code></pre> <p>The three color schemes are:</p> <ul> <li>gruvbox</li> <li>molokai</li> <li>onedark</li> </ul> <p>You can change your vim color scheme using the <code>:color</code> command.  For instance,</p> <pre><code>:color gruvbox\n</code></pre> <p>You can add the line <code>color gruvbox</code> (without <code>:</code>) to your <code>~/.vimrc</code> so that the color scheme is loaded at the start of every vim session.</p> <p>Some color schemes display differently depending on whether the background is set to <code>dark</code> or <code>light</code></p> <p>Some examples, with <code>set background=dark</code> in <code>~/.vimrc</code>:</p> <p>The Vim default color scheme:</p> <p></p> <p>The molokai (CS1010's default) color scheme:</p> <p></p> <p>The gruvbox color scheme </p> <p></p>"},{"location":"vim/quick-lessons.html","title":"Quick <code>vim</code> Lessons","text":"<p>Here is a quick walkthrough to get a taste of <code>vim.</code></p>"},{"location":"vim/quick-lessons.html#lesson-1-navigation","title":"Lesson 1: Navigation","text":"<p>Download the following file for practice using <code>vim</code> in this session. <pre><code>$ wget https://www.comp.nus.edu.sg/~ooiwt/unix-workshop/jfk.txt\n</code></pre></p> <p>The file named <code>jfk.txt</code> should be downloaded.  Now let's start your first <code>vim</code> session.</p> <pre><code>$ vim jfk.txt\n</code></pre> <p>When you start, you will be in <code>NORMAL</code> mode.  For now, just move around the cursor with H J K L.  Get comfortable using the keys.</p> <p>Next, try ( and ) to move forward and backward, sentence-by-sentence.</p> <p>Next, try { and } to move forward and backward, paragraph-by-paragraph.</p> <p>Now, try Ctrl+F and Ctrl+B to move forward and backward, page-by-page.</p> <p>Use 0 to jump to the beginning of the line, and Shift+4 ($) to jump to the end of the line.</p> <p>Use G+G to jump to the beginning of the file, and Shift+G (<code>G</code>) to jump to the last line of the file.</p> <p>Now try /, type in any word (or prefix of a word) and Enter.  This should move the cursor to the beginning of the word.  You can use N and Shift+N to move to the next match and the previous match.</p> <p>When you are comfortable moving around, you can Shift+Z+Z to exit.</p> <p>Congratulations, you have just completed your first session in <code>vim</code>!</p>"},{"location":"vim/quick-lessons.html#lesson-2-manipulating-text","title":"Lesson 2: Manipulating Text","text":"<p>Now, we are going to open up the same file again and try to manipulate the text.  We are going to stay in the <code>NORMAL</code> mode still.</p> <pre><code>$ vim jfk.txt\n</code></pre>"},{"location":"vim/quick-lessons.html#deletion","title":"Deletion","text":"<p>Try 0 D 3 W to move the cursor to the beginning of the line and delete three words.</p> <p>Press U to undo.  This is another lifesaver that you should remember.</p> <p>In <code>vim</code>, repeating the same command twice usually means applying it to the whole line.  So D D deletes the current line.  Try that.</p> <p>Pairing a command with Shift (or the capital letter version) usually means applying the action until the end of the line.  So Shift+D deletes from the current cursor until the end of the line.</p>"},{"location":"vim/quick-lessons.html#copy-pasting","title":"Copy-Pasting","text":"<p>Hit P to paste back what you just deleted.  Try moving the cursor to somewhere else and paste.</p> <p>To copy (or yank) the current line, hit Y Y.</p> <p>Remember that all these commands can be composed using the movement-action-movement pattern.  For instance, Shift+9 Y Shift+0, which corresponds to: move to the beginning of the sentence, yank, and until the end of the sentence, basically copy the current sentence.</p> <p>As you have seen in the D 2 W example, you can precede an action with a number to repeat an action multiple times.</p> <p>Try Y Y 9 P.  You should be able to understand what just happened!</p>"},{"location":"vim/quick-lessons.html#deleting-a-character","title":"Deleting a Character","text":"<p>The X command deletes the current character.</p> <p>Try this exercise: At the end of the file <code>jfk.txt</code>, there are some typos: <pre><code>libertyi. liberty.\n</code></pre> Change <code>libertyi. liberty.</code> to <code>libtery.</code> by positioning the cursor on the second <code>i</code> and deleting it.  Then use Shift+D to delete the extra <code>liberty.</code> at the end of the sentence.</p>"},{"location":"vim/quick-lessons.html#visual-mode","title":"Visual Mode","text":"<p>In addition to the <code>INSERT</code> and <code>NORMAL</code> modes, <code>vim</code> has the third mode, the <code>VISUAL</code> mode.  You can enter the <code>VISUAL</code> mode by hitting V.  Once in visual mode, you can move your cursor to select the text and perform some actions on it (e.g., D or X to delete, Y to yank).</p> <p>Hitting Shift+V will allow you to select line-by-line.</p> <p>The <code>VISUAL</code> mode allows us to pipe the selected text to another Unix command, and replace it with the result of that command.</p> <p>Go ahead and try to select a paragraph in <code>jfk.txt</code>, and hit :.  You will see that <pre><code>:'&lt;,'&gt;\n</code></pre></p> <p>appears in the last line of the terminal.  At this point, you can type in actions that you want to perform on the selected text.  For instance, <pre><code>:'&lt;,'&gt;w john.txt\n</code></pre></p> <p>will write it to a file named <code>john.txt</code>.</p> <p>But, let's try the following: <pre><code>:'&lt;,'&gt;!fmt\n</code></pre></p> <p><code>!fmt</code> tells <code>vim</code> to invoke the shell and run <code>fmt</code>.  <code>fmt</code> is another simple small Unix utility that takes in a text (from standard input) and spews out formatted text in the standard output.  You will see that the width of the text has changed to the default of 65.</p> <p>You can try something that we have seen before.  Select the text again, and hit <pre><code>:'&lt;,'&gt;!wc\n</code></pre></p> <p>The selected text will be replaced with the output from <code>wc</code>.</p>"},{"location":"vim/quick-lessons.html#the-command","title":"The <code>:</code> command","text":"<p>You have seen examples of <code>:</code> commands for writing to a file or piping selected text to an external command.</p> <p>The <code>:</code> command also enables many actions that you can do in <code>vim</code>.  Here are a few essential yet simple commands.</p> <ul> <li>To jump to a line, hit : followed by the line number.</li> <li>To open another file, hit : and then type in <code>e &lt;filename&gt;</code></li> <li>To find help on a topic, hit : and then type in <code>help &lt;keyword&gt;</code></li> </ul> <p>Other advanced features such as search-and-replace, changing preferences, splitting windows, and opening new tabs, are also accessible from the <code>:</code> command.</p> <p>The <code>:</code> command prompt supports Ctrl+P and Ctrl+N for navigating back and forth your command history, just like <code>bash</code>.  It also supports Tab for auto-completion.</p>"},{"location":"vim/quick-lessons.html#lesson-3-insert-mode","title":"Lesson 3: Insert mode!","text":"<p>Finally, we are going to try inserting some text.  Remember, to use <code>INSERT</code> mode, we always start with a command I A O or S (may pair with Shift) followed by the text that you want to insert, followed by Esc.</p> <p>Let's try I (insert).  Place your cursor anywhere, hit I, and start typing, when you are done.  Hit Esc.</p> <p>You just added some text to the file.</p> <p>Place your cursor anywhere, hit A (append), and start typing, when you are done.  Hit Esc.  A appends the text to the end of the current line.</p> <p>Hit O (open) and start typing, when you are done.  Hit Esc.  O opens up a new line for your text.</p> <p>Hit S (substitute) and start typing, when you are done.  Hit Esc.  S substitute the current character with your text.</p> <p>Now try it with Shift and see the difference in behavior.</p>"},{"location":"vim/quick-lessons.html#learning-more","title":"Learning More","text":"<p>You can run <code>vimtutor</code> to learn more about <code>vim</code>.</p> <p>You can also check out the tips that we have collected for CS1010 or watch the various tutorials online.  </p> <p>Here are some useful resources on <code>vim</code>:</p> <ul> <li>Learn vim Progressively.</li> <li>Vim: Precision Editing at the Speed of Thought: A talk by Drew Neil</li> <li>Vim Adventure: An adventure game for learning <code>vim</code></li> <li>Vim Casts: Videos and articles for teaching <code>vim</code></li> <li>Vim Video Tutorials by Derek Wyatt</li> <li>Vim Awesome: Directory of plugins.</li> </ul>"},{"location":"vim/setup.html","title":"Setting Up <code>vim</code> on PE Hosts","text":""},{"location":"vim/setup.html#vim-configuration","title":"Vim Configuration","text":"<p>Like many other Unix programs, you can configure your preferences by creating an <code>rc</code> (run commands) file in your home directory.  These <code>rc</code> files will be read by the corresponding programs and executed line-by-line as if the text is entered into the program through a keyboard.  You can view an <code>rc</code> file as a script that will be executed automatically whenever a program starts.</p> <p>For <code>vim</code>, the <code>rc</code> file is called <code>.vimrc</code>.  The <code>.</code> in the front of the file name carries a special meaning in Unix.  It means that this file is hidden -- you won't see it when you <code>ls</code>.  Hiding the run command files prevent your home directory from being cluttered.  To tell <code>ls</code> to show the hidden files, use the <code>-a</code> flag <pre><code>$ ls -a\n</code></pre></p> <p>We have created a <code>.vimrc</code> file, with CS2030S defaults, for your use.  This is the basis upon which you can build your own configuration. </p> <p>To copy this file to your home directory on the PE nodes, <pre><code>$ cp ~cs2030s/.vimrc ~\n</code></pre></p> <p>You can ask <code>vim</code> to automatically back up the files that you edit.  This has been a lifesaver for me on multiple occasions.</p> <p>The default <code>.vimrc</code> contains the following two lines:</p> <pre><code>set backup\nset backupdir=~/.backup\n</code></pre> <p>This causes <code>vim</code> to save the previous version of every file you edited in a backup directory at location <code>~/.backup</code>.  You need to create this directory, however, by</p> <pre><code>$ mkdir -p ~/.backup\n</code></pre> <p>Now, if you made changes to a file that you regretted, or if you accidentally deleted a file, you can check under <code>~/.backup</code> to see if the backup can save you.</p>"},{"location":"vim/setup.html#vim-plugins","title":"Vim Plugins","text":"<p>CS2030S provides a minimal set of vim extensions by default for your labs and practical exams.  See the article on vim plugins for details.  </p> <p>Additional vim extensions are installed under <code>~/.vim</code>.  To install these \"official\" CS2030S vim extensions, you can copy the <code>.vim</code> from cs2030s's home directory to your home directory.  On the PE host, run:</p> <pre><code>mkdir -p ~/.vim\ncp -r ~cs2030s/.vim/* ~/.vim\n</code></pre> <p>You can test out the different color schemes according to the instructions to check if you have set up the plugins correctly.  The default CS2030S <code>.vimrc</code> uses the <code>molokai</code> color schemes.</p>"},{"location":"vim/tips.html","title":"Vim Tips","text":"<p>I collected some tips on <code>vim</code> that I find helpful for students. </p> <p>Prerequisite: You have gone through the basic quick lessons and have set up your vim in your PE account.</p>"},{"location":"vim/tips.html#1-useful-configuration","title":"1. Useful Configuration","text":""},{"location":"vim/tips.html#showing-line-numbers","title":"Showing Line Numbers","text":"<p>If you prefer to show the line number on every line in <code>vim</code>, add <pre><code>set number\n</code></pre></p> <p>to your <code>~/.vimrc</code>.</p>"},{"location":"vim/tips.html#2-navigation","title":"2. Navigation","text":""},{"location":"vim/tips.html#faster-navigation","title":"Faster Navigation","text":"<p>If you find yourselves typing too many HJKL to navigate around your code, check out the following shortcuts to navigate around:</p> <p>To move word-by-word:</p> <ul> <li>W jump to the beginning of the next word</li> <li>B ump to the beginning of the previous word (reverse of <code>w</code>)</li> <li>E jump to the end of the word (or next word when pressed again)</li> </ul> <p>To search:</p> <ul> <li>F char: search forward in the line and sit on the next matching char</li> <li>T char:  search forward in the line and sit on one space before the matching char</li> </ul> <p>0 would move you to the beginning of the line, but when coding, it is sometimes useful to jump to the first non-blank character instead.  To do so, use Shift+6 (^).</p> <p>In coding, we have many pairs of <code>[]</code>, <code>{}</code>, <code>()</code> and <code>&lt;&gt;</code>.  You can use Shift+5 (%) jump between matching parentheses.</p>"},{"location":"vim/tips.html#jump-to-a-line","title":"Jump to a Line","text":"<p>If the compiler tells you there is an error on Line \\(x\\), you can issue <code>:&lt;x&gt;</code> to jump to Line \\(x\\).  For instance, <code>:40</code> will go to Line 40.</p>"},{"location":"vim/tips.html#3-editing-operations","title":"3. Editing Operations","text":""},{"location":"vim/tips.html#undo-and-redo","title":"Undo and Redo","text":"<p>Since we are on the topic of correcting mistakes, U in command mode undo your changes.  Prefix it with a number \\(n\\) to undo \\(n\\) times.  If you want to undo your undo, Ctrl+R will redo.</p>"},{"location":"vim/tips.html#navigation-editing","title":"Navigation + Editing","text":"<p><code>vim</code> is powerful because you can combine operations with navigation.  For instance C to change, D to delete, Y to yank (copy).  Since W is the navigation command to move over the current word, combining them we get:</p> <ul> <li>CW change the current word (delete the current word and enter insert mode)</li> <li>DW delete the current word</li> <li>YW yank the current word (copy word into buffer)</li> </ul> <p>Can you guess what each of these does:</p> <ul> <li>DFShift+0 </li> <li>DFShift+0 </li> <li>CShift+4</li> <li>Y0</li> </ul> <p>If you repeat the operation C, D, and Y, it applies to the whole line, so:</p> <ul> <li>CC change the whole line</li> <li>DD delete the whole line</li> <li>YY yank the whole line</li> </ul> <p>You can add a number before an operation to specify how many times you want to repeat an operation.  So 5DD  deletes 5 lines, 5DW deletes 5 words, etc.</p> <p>See the article Operator, the True Power of <code>Vim</code> for more details.</p>"},{"location":"vim/tips.html#swapping-lines","title":"Swapping Lines","text":"<p>Sometimes you want to swap the order of two lines of code, in command mode, DDP will do the trick.  DD deletes the current line, P paste it after the current line, in effect swapping the order of the two lines.</p>"},{"location":"vim/tips.html#commenting-blocks-of-code","title":"Commenting blocks of code","text":"<p>Sometimes we need to comment out a whole block of code in C for testing purposes. There are several ways to do it in <code>vim</code>:</p> <ul> <li>Place the cursor on the first line of the block of code you want to comment on.</li> <li>0 to jump to the beginning of the line</li> <li>Shift+V enter visual mode</li> <li>Use the arrow key to select the block of code you want to comment on.</li> <li>Shift+I to insert at the beginning of the line (here, since we already selected the block, we will insert at the beginning of every selected)</li> <li>// to insert the C comment character (you will see it inserted in the current line, but don't worry)</li> <li>Esc to escape from the visual code.</li> </ul> <p>To uncomment,</p> <ul> <li>Place the cursor on the first line of the block of code you want to comment.</li> <li>0 to jump to the beginning of the line</li> <li>Ctrl+V enter block visual mode</li> <li>Use the arrow key to select the columns of text containing <code>//</code></li> <li>X to delete them</li> </ul>"},{"location":"vim/tips.html#4-other-useful-commands","title":"4. Other Useful Commands","text":""},{"location":"vim/tips.html#search-and-replace-in-vim","title":"Search and Replace in <code>vim</code>","text":"<pre><code>:%s/oldWord/newWord/gc\n</code></pre> <p><code>:</code> enters the command mode.  <code>%</code> means apply to the whole document, <code>s</code> means substitute, <code>g</code> means global (otherwise, only the first occurrence of each line is replaced). <code>c</code> is optional -- adding it cause <code>vim</code> to confirm with you before each replacement  </p>"},{"location":"vim/tips.html#shell-command","title":"Shell Command","text":"<p>If you need to issue a shell command quickly, you don't have to exit <code>vim</code>, run the command, and launch <code>vim</code> again.  You can use <code>!</code>,</p> <pre><code>:!&lt;command&gt;\n</code></pre> <p>will issue the command to shell.  E.g.,</p> <pre><code>:!ls\n</code></pre> <p>You can use this to compile your current file, without exiting <code>vim</code>.</p> <pre><code>:!make\n</code></pre> <p><code>make</code> is a builtin command for <code>vim</code>, so you can also simply run</p> <pre><code>:make\n</code></pre>"},{"location":"vim/tips.html#terminal","title":"Terminal","text":"<p>You can open an interactive shell from within <code>vim</code> with: <pre><code>:terminal\n</code></pre></p> <p>This command splits the window and add a terminal, within which you can compile or run your code.  </p>"},{"location":"vim/tips.html#abbreviation","title":"Abbreviation","text":"<p>You can use the command <code>ab</code> to abbreviate frequently typed commands.  E.g., in your <code>~/.vimrc</code>,</p> <pre><code>ab pl cs1010_print_long(\n</code></pre> <p>Now, when you type <code>pl</code>, it will be expanded into <code>cs1010_print_long(</code></p>"},{"location":"vim/tips.html#auto-completion","title":"Auto-Completion","text":"<p>You can use Ctrl+P or Ctrl+N to auto-complete.  By default, the autocomplete dictionary is based on the text in your current editing buffers.  This is a very useful keystroke saver for long function names and variable names.</p>"},{"location":"vim/tips.html#auto-indent-the-whole-file","title":"Auto-Indent the Whole File","text":"<p>You can GG=Shift+G in command mode (i.e., type out <code>gg=G</code>) to auto-indent the whole file.  GG is the command to go to the beginning of the file.  = is the command to indent.  Shift+G is the command to go to the end of the file.</p>"},{"location":"vim/tips.html#split-vims-viewport","title":"Split <code>vim</code>'s Viewport","text":"<ul> <li><code>:sp file.c</code> splits the <code>vim</code> window horizontally</li> <li><code>:vsp file.c</code> splits the <code>vim</code> window vertically</li> <li>Ctrl+WCtrl+W moves between the different <code>vim</code> viewports</li> </ul> <p>Alternatively, run <code>vim -O file1 file2</code> to immediately open both files in two different viewpoints.</p>"},{"location":"vim/tips.html#compare-two-files","title":"Compare two files","text":"<p>You can compare two files with <code>vim</code>, using the <code>-d</code> flag.  For instance,</p> <p><code>vim -d file1 file2</code></p> <p>would open up two files for line-by-line comparison.  This is most useful if you want to compare the output of your program with the expected output.</p>"},{"location":"vim/tips.html#5-recovery-files","title":"5. Recovery Files","text":"<p>Vim automatically saves the files you are editing into temporary swap files, with the extension <code>.swp</code>.  These files are hidden, so you don't normally see them when you run <code>ls</code>.  (You need to run <code>ls -a</code> to view the hidden files)</p> <p>The swap files are useful if your editing session is disrupted before you save (e.g., the network is disconnected, you accidentally close the terminal, your OS crashes, etc.).</p> <p>When you launch <code>vim</code> to edit a file, say, <code>foo.c</code>.  <code>vim</code> will check if a swap file <code>.foo.c.swp</code> exist.  If it does, <code>vim</code> with display the following</p> <pre><code>Found a swap file by the name \".foo.c.swp\"\n          owned by: elsa   dated: Sat Aug 21 15:01:04 2021\n         file name: ~elsa/foo.c\n          modified: no\n         user name: elsa   host name: pe116\n        process ID: 7863 (STILL RUNNING)\nWhile opening file \"foo.c\"\n             dated: Mon Jul 12 18:38:37 2021\n\n(1) Another program may be editing the same file.  If this is the case,\n    be careful not to end up with two different instances of the same\n    file when making changes.  Quit, or continue with caution.\n(2) An edit session for this file crashed.\n    If this is the case, use \":recover\" or \"vim -r a.c\"\n    to recover the changes (see \":help recovery\").\n    If you did this already, delete the swap file \".a.c.swp\"\n    to avoid this message.\n\nSwap file \".a.c.swp\" already exists!\n[O]pen Read-Only, (E)dit anyway, (R)ecover, (Q)uit, (A)bort:\n</code></pre> <p>The messages above are self-explanatory.  Read it carefully.  Most of the time, you want to choose \"R\" to recover your edits, so that you can continue editing.  Remember to remove the file <code>.foo.c.swp</code> after you have recovered.  Otherwise, <code>vim</code> will prompt you the above messages every time you edit <code>foo.c</code>.</p> <p>Warning: if <code>foo.c</code> is newer than the state saved in <code>.foo.c.swp</code>, and you recover from <code>.foo.c.swp</code>, you will revert to the state of the file as saved in the swap file.  This can happen if (i) you edit the file without recovery, or (ii) you recover the file, continue editing, but did not remove the <code>.foo.c.swp</code> file after.</p>"}]}